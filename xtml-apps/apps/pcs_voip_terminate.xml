<?xml version="1.0"?>
<xtml version="1.0" xmlns="urn:www.pactolus.com:xtml" >
  <version sce-version="6021" prev-sce-version="6021" last-mod-time="Thursday, March 25, 2010 23:49:34"/>
  <events >
    <event name="OnNewInvite" display="NewInvite"/>
    <event name="OnReInvite" display="ReInvite"/>
    <event name="OnConnectToVoicemail" display="ConnectToVoicemail"/>
    <event name="HandoffCallInfo" display="HandoffCallInfo" >
      <parameter name="strPhoneNumber" type="string"/>
      <parameter name="nDeptId" type="i4"/>
    </event>
    <event name="ScreenResponse" display="ScreenResponse" >
      <parameter name="sResponse" type="i2"/>
      <parameter name="strSessionId" type="string"/>
      <parameter name="strFrom" type="string"/>
      <parameter name="strTo" type="string"/>
      <parameter name="strCallId" type="string"/>
      <parameter name="strCSeq" type="string"/>
      <parameter name="strRemoteUri" type="string"/>
      <parameter name="strRoute" type="string"/>
      <parameter name="strRemoteSdp" type="string"/>
    </event>
  </events>
  <global-handlers >
    <handler event="Pactolus.EveSipRefer.1" function="OnRefer" public="0" always-on="0"/>
    <handler event="Pactolus.EveSipInvite.1" function="OnInvite" public="1" always-on="0"/>
    <handler event="Pactolus.EveSipBye.1" function="OnBye" public="0" always-on="0"/>
    <handler event="Standard.OnServiceLoad.1" function="OnServiceLoad" public="0" always-on="0"/>
    <handler event="Standard.OnSessionEnd.1" function="OnSessionEnd" public="0" always-on="0"/>
    <handler event="Standard.OnTimer.1" function="OnTimer" public="0" always-on="0"/>
    <handler event="Pactolus.EveSipInfo.1" function="OnInfo" public="0" always-on="0"/>
    <handler event="Pactolus.EveSipOptions.1" function="OnOptions" public="1" always-on="0"/>
    <handler event="Pactolus.EveSipAck.1" function="OnAck" public="0" always-on="0"/>
    <handler event="Pactolus.EveSipResponse.1" function="OnResponse" public="0" always-on="0"/>
  </global-handlers>
  <global-vars >
    <var name="g_nTimeout" type="i4" >10</var>
    <var name="g_oCallLegs" type="object" ></var>
    <var name="g_strMyVia" type="string" ></var>
    <var name="g_bSpiralTransfer" type="boolean" >0</var>
    <var name="g_oGSXList" type="object" ></var>
    <var name="g_oMS" type="object" ></var>
    <var name="g_oProxyList" type="object" ></var>
    <var name="g_oSub" type="object" ></var>
    <var name="g_STATE" type="i2" >0</var>
    <var name="g_strAni" type="string" ></var>
    <var name="g_strRoute" type="string" ></var>
    <var name="g_strSessionId" type="string" ></var>
    <var name="g_oAPI" type="object" ></var>
    <var name="g_oAccessLine" type="object" ></var>
    <var name="g_oVoipService" type="object" ></var>
    <var name="g_oSimRingCallLegs" type="object" ></var>
    <var name="g_oRate" type="object" ></var>
    <var name="g_oTimer" type="object" ></var>
    <var name="g_bCallIdFromDB" type="boolean" >0</var>
    <var name="g_nFinalStatus" type="i4" >0</var>
    <var name="g_oIVR" type="object" ></var>
    <var name="g_nDestinations" type="i4" >0</var>
    <var name="g_bTryReceptionist" type="boolean" >0</var>
    <var name="g_bHangUpAttendingLeg" type="boolean" >0</var>
    <var name="g_bTransfer" type="boolean" >0</var>
    <var name="g_bAttendedTransfer" type="boolean" >0</var>
    <var name="g_oCLegAPI" type="object" ></var>
    <var name="g_bWriteCLegCDR" type="boolean" >0</var>
    <var name="g_bOffNet302" type="boolean" >0</var>
    <var name="g_nOnHoldTimer" type="i4" >0</var>
    <var name="g_strRecording" type="string" ></var>
    <var name="g_nRecordingLength" type="i4" >0</var>
    <var name="g_bPlayingMOH" type="boolean" >0</var>
    <var name="g_nInterruptPlays" type="i4" >0</var>
    <var name="g_nInterruptTimer" type="i4" >0</var>
    <var name="bPlayInterrupt" type="boolean" >0</var>
    <var name="g_strOriginalContact" type="string" ></var>
  </global-vars>
  <shared-vars >
    <var name="s_strPrimarySoftswitch" type="string" ></var>
    <var name="s_strBackupSoftswitch" type="string" ></var>
    <var name="s_strNiuAddress" type="string" ></var>
    <var name="s_strLocalUri" type="string" ></var>
    <var name="s_nLongTimeout" type="i4" >60</var>
    <var name="s_nMSG_NUM_ACCESS_LINE_DISABLED" type="i4" >6003</var>
    <var name="s_nMSG_NUM_BAD_ACTIVATION_PIN" type="i4" >6000</var>
    <var name="s_nMSG_NUM_JVM_ERROR" type="i4" >1000</var>
    <var name="s_nMSG_NUM_MAX_SP_STREAMS" type="i4" >6002</var>
    <var name="s_nMSG_NUM_PIN_LOCKED" type="i4" >1011</var>
    <var name="s_nMSG_NUM_SP_DISABLED" type="i4" >1004</var>
    <var name="s_nMSG_NUM_SUB_DISABLED" type="i4" >1005</var>
    <var name="s_nShortTimeout" type="i4" >5</var>
    <var name="s_CT_911" type="i2" >6</var>
    <var name="s_CT_CALL_RETURN" type="i2" >7</var>
    <var name="s_CT_FORWARD" type="i2" >5</var>
    <var name="s_CT_NORMAL" type="i2" >1</var>
    <var name="s_CT_TRANSFER" type="i2" >4</var>
    <var name="s_CT_VMAIL_DEPOSIT" type="i2" >3</var>
    <var name="s_CT_VMAIL_RETRIEVAL" type="i2" >2</var>
    <var name="s_STATE_AWAITING_CALL" type="i2" >0</var>
    <var name="s_STATE_CONNECTED_TO_CALLED" type="i2" >2</var>
    <var name="s_STATE_CONNECTING_TO_CALLED" type="i2" >1</var>
    <var name="s_STATE_TEARING_DOWN_CALL" type="i2" >5</var>
    <var name="s_STATE_TRANSFERRING_CALL" type="i2" >4</var>
    <var name="s_strOutboundTo" type="string" ></var>
    <var name="s_nRING_NO_ANSWER_TIME" type="i4" >300</var>
    <var name="s_nSessionTimerInterval" type="i4" >0</var>
    <var name="s_strBackupPSX" type="string" ></var>
    <var name="s_strCodec" type="string" ></var>
    <var name="s_strPrimaryPSX" type="string" ></var>
    <var name="s_strSessionTimerFlag" type="string" >F</var>
    <var name="s_strPrependToOutdial" type="string" ></var>
    <var name="s_CT_RT_OFF_NET" type="i2" >2</var>
    <var name="s_RT_ON_NET" type="i2" >1</var>
    <var name="s_RT_OFF_NET" type="i2" >2</var>
    <var name="s_TR_BUSY" type="i2" >7</var>
    <var name="s_TR_CALLED_PARTY_HANGUP" type="i2" >1</var>
    <var name="s_TR_CALLING_PARTY_HANGUP" type="i2" >2</var>
    <var name="s_TR_NO_ANSWER" type="i2" >8</var>
    <var name="s_TR_NO_MONEY" type="i2" >3</var>
    <var name="s_TR_OTHER" type="i2" >10</var>
    <var name="s_TR_REINVITE_FAILED" type="i2" >9</var>
    <var name="s_TR_REORIGINATION" type="i2" >5</var>
    <var name="s_TR_SIP_NON_SUCCESS" type="i2" >4</var>
    <var name="s_TR_SYSTEM_ERROR" type="i2" >6</var>
    <var name="s_strCarrierName" type="string" ></var>
    <var name="s_HT_SEQUENTIAL" type="i2" >0</var>
    <var name="s_HT_SIMULTANEOUS_RING" type="i2" >1</var>
    <var name="s_strMsType" type="string" >PCS</var>
    <var name="s_nPacketizationPeriod" type="i2" >20</var>
    <var name="s_nCaleaDelay" type="i4" >0</var>
    <var name="s_strCaleaRedirect1" type="string" ></var>
    <var name="s_strCaleaRedirect2" type="string" ></var>
    <var name="s_nMediumTimeout" type="i4" >15</var>
    <var name="s_CT_SEND_REMIND_ME" type="i2" >16</var>
    <var name="s_LEG_STATE_NONE" type="i2" >0</var>
    <var name="s_LEG_STATE_DIALING" type="i2" >1</var>
    <var name="s_LEG_STATE_CONNECTED" type="i2" >2</var>
    <var name="s_bCallerIdLookup" type="boolean" >0</var>
    <var name="s_strCallerIdLookup" type="string" >0</var>
    <var name="s_STATE_REJECTING_CALL" type="i2" >0</var>
    <var name="s_CT_IVR" type="i2" >18</var>
    <var name="s_CT_IVR_TRANSFER" type="i2" >20</var>
    <var name="s_CT_HUNT_GROUP" type="i2" >21</var>
    <var name="s_strBroadbandPrefix" type="string" ></var>
    <var name="s_STATE_RECONNECTING_TO_REFERRED" type="i2" >6</var>
    <var name="s_bFalseAnswerDetection" type="boolean" >0</var>
    <var name="s_bProvisionNanpWithLeadingOne" type="boolean" >0</var>
  </shared-vars>
  <functions >
    <function name="OnServiceLoad" start="1" event="OnServiceLoad" returns="void" >
      <parameters >
        <parameter name="strAppName" type="string" pass="byref"/>
        <parameter name="nSessionCount" type="i2" pass="byref"/>
        <parameter name="nMaxIterations" type="i2" pass="byref"/>
        <parameter name="nServerId" type="i2" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="strFalseAnswerDetection" type="string" ></var>
        <var name="strNanp" type="string" ></var>
      </local-vars>
      <actions >
        <action id="1" plug-in="Pactolus.UserFunction.1" ><?xtml-editor x=56 y=70 ?>
          <user-function xmlns="urn:www.pactolus.com:xtml:application" process="&quot;PACTOLUS_ps_c_adaptor&quot;" function="&quot;get_property&quot;" timeout="g_nTimeout" return="" async="0" >
            <parameter >"primary-softswitch"</parameter>
            <parameter >s_strPrimaryPSX</parameter>
            <parameter >"backup-softswitch"</parameter>
            <parameter >s_strBackupPSX</parameter>
            <parameter >"niu-address"</parameter>
            <parameter >s_strNiuAddress</parameter>
            <parameter >"prepend-to-outdial"</parameter>
            <parameter >s_strPrependToOutdial</parameter>
            <parameter >"carrier-name"</parameter>
            <parameter >s_strCarrierName</parameter>
            <parameter >"media-server-type"</parameter>
            <parameter >s_strMsType</parameter>
            <parameter >"packetization-period"</parameter>
            <parameter >s_nPacketizationPeriod</parameter>
            <parameter >"calea-delay"</parameter>
            <parameter >s_nCaleaDelay</parameter>
            <parameter >"calea-redirect1"</parameter>
            <parameter >s_strCaleaRedirect1</parameter>
            <parameter >"calea-redirect2"</parameter>
            <parameter >s_strCaleaRedirect2</parameter>
            <parameter >"caller-id-lookup"</parameter>
            <parameter >s_strCallerIdLookup</parameter>
            <parameter >"broadband-prefix"</parameter>
            <parameter >s_strBroadbandPrefix</parameter>
            <parameter >"false-answer-detection"</parameter>
            <parameter >strFalseAnswerDetection</parameter>
            <parameter >"provision-nanp-with-leading-one"</parameter>
            <parameter >strNanp</parameter>
          </user-function>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[Session.s_strLocalUri = "<sip:" + Server.sipAddress ;



if( 5060 != Server.sipPort ) {



	Session.s_strLocalUri += ":" ;



	Session.s_strLocalUri += Server.sipPort ;



}



Session.s_strLocalUri += ">";







if( 0 == Session.s_strPrimaryPSX.length ) {



	Server.logError("Primary softswitch sip address must be supplied and was not") ;



}



else {



	Server.logInfo("Primary softswitch sip address: " + Session.s_strPrimaryPSX) ;



}







Server.logInfo("Backup softswitch sip address: " + Session.s_strBackupPSX) ;







if( 0 == Session.s_strNiuAddress.length ) {



	Server.logError("NIU sip address must be supplied and was not") ;



}



else {



	Server.logInfo("NIU sip address: " + Session.s_strNiuAddress) ;



}



if ( 0 != Session.s_strBroadbandPrefix.length ) {



	Server.logInfo("Need to check for and strip broadband identifying prefix <" + Session.s_strBroadbandPrefix + ">");



}







Session.s_bCallerIdLookup = false ;



if( 0 == Clib.strcmpi( Session.s_strCallerIdLookup, "yes") ||



	0 == Clib.strcmpi( Session.s_strCallerIdLookup, "on") ||



	0 == Clib.strcmpi( Session.s_strCallerIdLookup, "true") ||



	0 == Clib.strcmpi( Session.s_strCallerIdLookup, "T") ||



	0 == Clib.strcmpi( Session.s_strCallerIdLookup, "1") ) {







	Session.s_bCallerIdLookup = true ;	



	Server.logInfo("Caller id lookup is enabled") ;



}



else {



	Server.logInfo("Caller id lookup is not enabled") ;



}



if( 0 == Clib.strcmpi( Session.strFalseAnswerDetection, "yes" ) ||



	0 == Clib.strcmpi( Session.strFalseAnswerDetection, "true" ) ||



	0 == Clib.strcmpi( Session.strFalseAnswerDetection, "T" ) ||



	0 == Clib.strcmpi( Session.strFalseAnswerDetection, "on" ) ||



	0 == Clib.strcmpi( Session.strFalseAnswerDetection, "1" ) ) {



	



	Session.s_bFalseAnswerDetection = true ;



	Server.logInfo("False answer detection is on") ;



}



if( 0 == Clib.strcmpi( Session.strNanp, "yes" ) ||



	0 == Clib.strcmpi( Session.strNanp, "true" ) ||	



	0 == Clib.strcmpi( Session.strNanp, "T" ) ||



	0 == Clib.strcmpi( Session.strNanp, "on" ) ||



	0 == Clib.strcmpi( Session.strNanp, "1" ) ) {



	



	Session.s_bProvisionNanpWithLeadingOne = true ;



	Server.logInfo("NANP numbers are provisioned in the DB with a leading '1', we will not strip the leading '1' before authenticating") ;



}]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=292 y=148 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
        </action>
      </actions>
    </function>
    <function name="OnInvite" start="1" event="OnInvite" returns="void" >
      <parameters >
        <parameter name="strAccept" type="string" pass="byref"/>
        <parameter name="strAcceptEncoding" type="string" pass="byref"/>
        <parameter name="strAcceptLanguage" type="string" pass="byref"/>
        <parameter name="strAlertInfo" type="string" pass="byref"/>
        <parameter name="strAllow" type="string" pass="byref"/>
        <parameter name="strAllowEvents" type="string" pass="byref"/>
        <parameter name="strAnonymity" type="string" pass="byref"/>
        <parameter name="strAuthorization" type="string" pass="byref"/>
        <parameter name="strCallId" type="string" pass="byref"/>
        <parameter name="strCallInfo" type="string" pass="byref"/>
        <parameter name="strContact" type="string" pass="byref"/>
        <parameter name="strContent" type="string" pass="byref"/>
        <parameter name="strContentDisposition" type="string" pass="byref"/>
        <parameter name="strContentEncoding" type="string" pass="byref"/>
        <parameter name="strContentLanguage" type="string" pass="byref"/>
        <parameter name="strContentType" type="string" pass="byref"/>
        <parameter name="strCSeq" type="string" pass="byref"/>
        <parameter name="strDate" type="string" pass="byref"/>
        <parameter name="strEncryption" type="string" pass="byref"/>
        <parameter name="strErrorInfo" type="string" pass="byref"/>
        <parameter name="strExpires" type="string" pass="byref"/>
        <parameter name="strFrom" type="string" pass="byref"/>
        <parameter name="strInReplyTo" type="string" pass="byref"/>
        <parameter name="strMaxForwards" type="string" pass="byref"/>
        <parameter name="strMIMEVersion" type="string" pass="byref"/>
        <parameter name="strMinSE" type="string" pass="byref"/>
        <parameter name="strOrganization" type="string" pass="byref"/>
        <parameter name="strPriority" type="string" pass="byref"/>
        <parameter name="strProxyAuthorization" type="string" pass="byref"/>
        <parameter name="strProxyRequire" type="string" pass="byref"/>
        <parameter name="strRecordRoute" type="string" pass="byref"/>
        <parameter name="strReferredBy" type="string" pass="byref"/>
        <parameter name="strRemotePartyID" type="string" pass="byref"/>
        <parameter name="strReplaces" type="string" pass="byref"/>
        <parameter name="strRequestURI" type="string" pass="byref"/>
        <parameter name="strRequire" type="string" pass="byref"/>
        <parameter name="strResponseKey" type="string" pass="byref"/>
        <parameter name="strRoute" type="string" pass="byref"/>
        <parameter name="strSessionExpires" type="string" pass="byref"/>
        <parameter name="strSubject" type="string" pass="byref"/>
        <parameter name="strSupported" type="string" pass="byref"/>
        <parameter name="strTimestamp" type="string" pass="byref"/>
        <parameter name="strTo" type="string" pass="byref"/>
        <parameter name="strUserAgent" type="string" pass="byref"/>
        <parameter name="strVia" type="string" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="oSipMsg" type="object" ></var>
        <var name="nReturnValue" type="i4" >0</var>
        <var name="strOrigHost" type="string" ></var>
        <var name="strRealm" type="string" ></var>
        <var name="strDBName" type="string" ></var>
        <var name="strMatchContact" type="string" ></var>
        <var name="strMatchRecordRoute" type="string" ></var>
        <var name="bPlayRejectMsg" type="boolean" >0</var>
        <var name="bRouteToVmail" type="boolean" >0</var>
        <var name="bRejectCall" type="boolean" >0</var>
        <var name="bCallEstablished" type="boolean" >0</var>
        <var name="bConnected" type="boolean" >0</var>
        <var name="strStatus" type="string" >0</var>
        <var name="bLoopDetected" type="boolean" >0</var>
        <var name="bRouteToIvr" type="boolean" >0</var>
        <var name="bHandoff" type="boolean" >0</var>
        <var name="strPhoneNumber" type="string" ></var>
        <var name="nDeptId" type="i4" >0</var>
      </local-vars>
      <actions >
        <action id="1" plug-in="Pactolus.Branch.1" ><?xtml-editor x=24 y=62 ?>
          <results >
            <result name="Default" link="4" stubbed="0"/>
            <result name="Loop detected" link="23" stubbed="0" >bLoopDetected == true



AND g_STATE == s_STATE_AWAITING_CALL</result>
            <result name="New Call" link="20" stubbed="0" >g_STATE == s_STATE_AWAITING_CALL



AND bHandoff == false</result>
            <result name="handoff" link="20" stubbed="0" >bHandoff == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Request-URI " + Session.strRequestURI ) ;







if( 0 == Session.strCallId.indexOf("pcst") ) {



	Session.bLoopDetected = true ;



}



if( Session.s_STATE_AWAITING_CALL == Session.g_STATE && -1 != Session.strTo.indexOf("tag=") ) {



	Server.logInfo("This is a handoff call that previously went to an IVR") ;



	Session.bHandoff = true ;



}]]></script>
          </scripts>
        </action>
        <action id="4" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=298 y=184 ?>
          <!--ReInvite-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ReInvite&quot;" return="" external-function="0" library="" >
            <parameter >oSipMsg</parameter>
          </function>
          <results >
            <result name="Default" link="5" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oSipMsg.strFrom = Session.strFrom ;



Session.oSipMsg.strTo = Session.strTo ;



Session.oSipMsg.strRequestUri = Session.strRequestURI ;



Session.oSipMsg.strCallId = Session.strCallId ;



Session.oSipMsg.strCSeq = Session.strCSeq ;



Session.oSipMsg.strContent = Session.strContent ;



Session.oSipMsg.strContentDisposition = Session.strContentDisposition ;



Session.oSipMsg.strContentType = Session.strContentType ;



Session.oSipMsg.strVia = Session.strVia ;



Session.oSipMsg.strRecordRoute = Session.strRecordRoute ;



Session.oSipMsg.strRoute = Session.strRoute ;



Session.oSipMsg.strSubject = Session.strSubject ;



Session.oSipMsg.strContact = Session.strContact ;



Session.oSipMsg.strDate = Session.strDate ;



Session.oSipMsg.strExpires = Session.strExpires ;



Session.oSipMsg.strAccept = Session.strAccept ;



Session.oSipMsg.strAcceptEncoding = Session.strAcceptEncoding ;



Session.oSipMsg.strAcceptLanguage = Session.strAcceptLanguage ;



Session.oSipMsg.strAuthorization = Session.strAuthorization ;



Session.oSipMsg.strEncryption = Session.strEncryption ;



Session.oSipMsg.strProxyAuthorization = Session.strProxyAuthorization ;



Session.oSipMsg.strProxyRequire = Session.strProxyRequire ;



Session.oSipMsg.strRequire = Session.strRequire ;



Session.oSipMsg.strResponseKey = Session.strResponseKey ;



Session.oSipMsg.strSessionExpires = Session.strSessionExpires ;



Session.oSipMsg.strSupported = Session.strSupported ;



Session.oSipMsg.strTimestamp = Session.strTimestamp ;



Session.oSipMsg.strSubject = Session.strSubject ;







/* recently added SIP headers */



Session.oSipMsg.strAnonymity = Session.strAnonymity ;



Session.oSipMsg.strMinSE = Session.strMinSE ;



Session.oSipMsg.strRemotePartyID = Session.strRemotePartyID ;



Session.oSipMsg.strUserAgent = Session.strUserAgent ;



Session.oSipMsg.strMaxForwards = Session.strMaxForwards ;



Session.oSipMsg.strReplaces = Session.strReplaces;



]]></script>
          </scripts>
        </action>
        <action id="5" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=588 y=170 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* save the remote Sdp of both A and B which we will need for a call transfer */



if( js_isInviteOnHold( Session.strContent ) ) { 

	Session.g_oCallLegs[0].strRemoteSdpForRefer = Session.g_oCallLegs[0].strRemoteSdp ;

	Session.g_oCallLegs[1].strRemoteSdpForRefer = Session.g_oCallLegs[1].strRemoteSdp ;

}



]]></script>
          </scripts>
        </action>
        <action id="14" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=314 y=432 ?>
          <!--psAuthTerminate-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;psAuthTerminate&quot;" return="nReturnValue" external-function="0" library="" >
            <parameter >g_oCallLegs[0]</parameter>
          </function>
          <results >
            <result name="Default" link="19" stubbed="0"/>
            <result name="route to voicemail" link="17" stubbed="0" >bRouteToVmail == true</result>
            <result name="play reject msg" link="18" stubbed="0" >bPlayRejectMsg == true</result>
            <result name="reject call without msg" link="32" stubbed="0" >bRejectCall == true</result>
            <result name="route to ivr" link="24" stubbed="0" >g_oAPI.strCallType == s_CT_IVR



AND g_bTryReceptionist == false</result>
            <result name="screen call" link="25" stubbed="0" >g_oAPI.strScreenCallFlag == "T"</result>
          </results>
          <scripts >
            <script language="javascript" timing="middle" ><![CDATA[/* route directly to voicemail if no routes are given and vmail is available */



Session.g_oAPI.bWriteCDR = true ;







/* if zero-cost calls are not allowed, and there is no credit remaining, simply reject the call */



if( "F" == Session.g_oAPI.strAllowZeroCostFlag ) {



	if( !Session.g_oAPI.bPrepaid && Session.g_oAPI.bCreditLimit && Session.g_oAPI.fCreditUsed >= Session.g_oAPI.fCreditLimit ) {



		Server.logInfo("Rejecting an incoming postpaid call because credit limit has been reached and allow zero cost calls is not enabled for this service") ;



		Session.strErrorInfo = "Insufficient funds (credit limit has been reached)" ;



		Session.bRejectCall = true ;



	}



	else if( Session.g_oAPI.bPrepaid && Session.g_oAPI.fAccountBalance <= 0.0 ) {



		Server.logInfo("Rejecting an incoming prepaid call because account has no money and allow zero cost calls is not enabled for this service") ;



		Session.strErrorInfo = "Insufficient funds (prepaid balance exhausted)" ;



		Session.bRejectCall = true ;



	}



}



if( 0 == Session.g_nDestinations && !Session.g_bOffNet302 ) {



	if ( Session.g_bTryReceptionist ) {



		Session.bRejectCall = true ;



		Server.logError("No routes exist for receptionist phone.");



	}



	else if ( Session.g_oAPI.strCallType == Session.s_CT_IVR ) {



		Session.bRouteToIvr = true;



		Session.g_oAPI.bWriteCDR = false ;



		Session.g_oCallLegs[1].strCallType = Session.g_oAPI.strCallType ;



	}



	else if( Session.g_oAPI.bForwardToVoicemail) {



		Session.bRouteToVmail = true ;



	}



	else if( 0 != Session.g_oAPI.nRejectMsgType ) {



		Session.g_oAPI.bWriteCDR = false ;



		Session.bPlayRejectMsg = true ;



	}



	else {



		/* simply reject the call */



		Session.g_oAPI.bWriteCDR = false ;



		Session.bRejectCall = true ;



	}



}







]]></script>
            <script language="javascript" timing="last" ><![CDATA[// moved from "first" seeing the from.displayName could change in the call to



// psAuthTerminate ...



var from = new SipFrom (Session.g_oCallLegs[1].strFrom.toString());



if( null != from.displayName ) {



	Session.g_oCallLegs[0].strSvcProviderCallerId = from.displayName ;



	Session.g_oCallLegs[0].strSubscriberCallerId = from.displayName ;



	Session.g_bCallIdFromDB = true;



}



else if( Session.g_oCallLegs[0].strCallingNumber.length > 0 ) {



	Session.g_oCallLegs[0].strSvcProviderCallerId = Session.g_oCallLegs[0].strCallingNumber ;



	Session.g_oCallLegs[0].strSubscriberCallerId = Session.g_oCallLegs[0].strCallingNumber ;



}



else {



	Session.g_oCallLegs[0].strSvcProviderCallerId = Session.g_oCallLegs[0].strSubscriberCallerId = "Unknown caller" ;



}







Server.logInfo ("Display Name       : " + from.displayName);



Server.logInfo ("Svc Prvdr Call Id  : " + Session.g_oCallLegs[0].strSvcProviderCallerId);



Server.logInfo ("Subscriber Call Id : " + Session.g_oCallLegs[0].strSubscriberCallerId);







if( Session.bHandoff ) {



	Session.g_oCallLegs[1].strScreenCallFlag = "T" ;



	Session.g_oCallLegs[1].strIVRSdp = Session.g_oCallLegs[0].strRemoteSdp ;



	Session.g_oCallLegs[0].strRequestUri = Session.g_oCallLegs[0].strRemoteUri ;



}]]></script>
          </scripts>
        </action>
        <action id="15" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=392 y=726 ?>
          <!--SIP/2.0 480 Temporarily Unavailable-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <contact >s_strLocalUri</contact>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >"SIP/2.0 480 Temporarily Unavailable"</status>
            <to >strTo</to>
            <via >strVia</via>
            <additional-parameters >
              <error-info >strErrorInfo</error-info>
            </additional-parameters>
          </sip-response>
          <results >
            <result name="Default" link="16" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="16" plug-in="Standard.EndSession.1" ><?xtml-editor x=966 y=734 ?></action>
        <action id="17" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=689 y=455 ?>
          <!--ConnectToVoicemail-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ConnectToVoicemail&quot;" return="" external-function="0" library="" >
            <parameter >bCallEstablished</parameter>
          </function>
          <results >
            <result name="Default" link="5" stubbed="0"/>
            <result name="handoff" link="31" stubbed="0" >bHandoff == true</result>
          </results>
        </action>
        <action id="18" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=677 y=556 ?>
          <!--ConnectToRejectMsg-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ConnectToRejectMsg&quot;" return="" external-function="0" library="" >
            <parameter >g_oAPI.nRejectMsgType</parameter>
          </function>
          <results >
            <result name="Default" link="16" stubbed="0"/>
          </results>
        </action>
        <action id="19" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=661 y=275 ?>
          <!--ConnectToSubscriber-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ConnectToSubscriber&quot;" return="bConnected" external-function="0" library="" >
            <parameter >bCallEstablished</parameter>
          </function>
          <results >
            <result name="Default" link="22" stubbed="0"/>
            <result name="connected" link="34" stubbed="0" >bConnected == true



AND bHandoff == false</result>
            <result name="forward to voicemail" link="17" stubbed="0" >g_oAPI.bForwardToVoicemail == true



AND g_oAPI.strCallType != s_CT_SEND_REMIND_ME



AND bRouteToIvr == false



AND g_nFinalStatus != 302



AND bConnected == false</result>
            <result name="route to IVR" link="24" stubbed="0" >g_oAPI.strCallType == s_CT_IVR



AND g_bTryReceptionist == false



AND bConnected == false</result>
            <result name="302 final response" link="14" stubbed="0" >g_nFinalStatus == 302</result>
            <result name="connected after handoff" link="31" stubbed="0" >bConnected == true



AND bHandoff == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[// set the default response to 480 in case we don't get anything from 



// the phone ...



Session.g_oCallLegs[0].strStatus = "SIP/2.0 480 Temporarily Unavailable";







Server.logInfo("CallLeg[0].strRequestUri = " + Session.g_oCallLegs[0].strRequestUri);



Server.logInfo("CallLeg[0].strOriginalTo = " + Session.g_oCallLegs[0].strOriginalTo);



]]></script>
          </scripts>
        </action>
        <action id="20" plug-in="Pactolus.UserFunction.1" ><?xtml-editor x=53 y=268 ?>
          <!--strip_digits: calling number-->
          <user-function xmlns="urn:www.pactolus.com:xtml:application" process="&quot;PACTOLUS_ps_c_adaptor&quot;" function="&quot;strip_digits&quot;" timeout="2" return="" async="0" >
            <parameter >g_oCallLegs[0].strCallingNumber</parameter>
            <parameter >g_oCallLegs[0].strCallingNumber</parameter>
          </user-function>
          <results >
            <result name="Default" link="21" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* initialize global objects */



InitVars() ;







Session.g_oAccessLine.strRealm = "" ;



if( Session.strProxyAuthorization.length > 0 ) {



	var s = Session.strProxyAuthorization ;



	js_parse_value( s, "realm", Session.g_oAccessLine.strRealm ) ;



	Session.g_oCallLegs[0].strOrigRouteType = Session.s_RT_ON_NET ;



}



else {



	Session.g_oCallLegs[0].strOrigRouteType = Session.s_RT_OFF_NET ;



}







Session.g_oAPI.bWriteCDR = false ;







/* save the sip call information for the incoming leg */



Session.g_oCallLegs[0].strFrom = Session.strFrom ;



Session.g_oCallLegs[0].strRequestUri = Session.strRequestURI ;



Session.g_oCallLegs[0].strCallId = Session.strCallId ;



Session.g_oCallLegs[0].strCSeq = Session.strCSeq ;



Session.g_oCallLegs[0].strRemoteCSeq = Session.strCSeq ;



Session.g_oCallLegs[0].strRemoteSdp = Session.strContent ;



Session.g_oCallLegs[0].strContentDisposition = Session.strContentDisposition ;



Session.g_oCallLegs[0].strContentType = Session.strContentType ;



Session.g_oCallLegs[0].strVia = Session.strVia ;



Session.g_oCallLegs[0].strRecordRoute = Session.strRecordRoute ;



Session.g_oCallLegs[0].strRoute = Session.strRoute ;



Session.g_oCallLegs[0].strSubject = Session.strSubject ;



Session.g_oCallLegs[0].strContact = Session.s_strLocalUri ;



Session.g_oCallLegs[0].strDate = Session.strDate ;



Session.g_oCallLegs[0].strExpires = Session.strExpires ;



Session.g_oCallLegs[0].strAccept = Session.strAccept ;



Session.g_oCallLegs[0].strAcceptEncoding = Session.strAcceptEncoding ;



Session.g_oCallLegs[0].strAcceptLanguage = Session.strAcceptLanguage ;



Session.g_oCallLegs[0].strAuthorization = Session.strAuthorization ;



Session.g_oCallLegs[0].strEncryption = Session.strEncryption ;



Session.g_oCallLegs[0].strProxyAuthorization = Session.strProxyAuthorization ;



Session.g_oCallLegs[0].strProxyRequire = Session.strProxyRequire ;



Session.g_oCallLegs[0].strRequire = Session.strRequire ;



Session.g_oCallLegs[0].strPrivacy = Session.strResponseKey ;



Session.g_oCallLegs[0].strSessionExpires = Session.strSessionExpires ;



Session.g_oCallLegs[0].strSupported = Session.strSupported ;



Session.g_oCallLegs[0].strTimestamp = Session.strTimestamp ;



Session.g_oCallLegs[0].strMaxForwards = Session.strMaxForwards ;



Session.g_oCallLegs[0].strTo = Session.g_oCallLegs[0].strOriginalTo = Session.strTo ;



Session.g_oCallLegs[0].bUac = false ;



Session.g_oCallLegs[0].bReverseFromTo = true; 



Session.g_oCallLegs[0].strOrigFlag = "F" ;







/* calculate the uri and route to use on the A leg */



if( Session.bHandoff ) {



	Session.g_oCallLegs[0].strRemoteUri = Session.strContact ;



	Session.g_oCallLegs[0].strRoute = Session.strRoute ;



}



else {



js_calculate_uri_and_route( true, "SIP/2.0", 



	Session.strFrom.toString(), 



	Session.strContact.toString(), 



	Session.strRecordRoute.toString(), 



	Session.g_oCallLegs[0].strRemoteUri, 



	Session.g_oCallLegs[0].strRoute ) ;



}







/* recently added SIP headers */



Session.g_oCallLegs[0].strAnonymity = Session.strAnonymity ;



Session.g_oCallLegs[0].strMinSE = Session.strMinSE ;



Session.g_oCallLegs[0].strRemotePartyID = Session.strRemotePartyID ;



Session.g_oCallLegs[0].strUserAgent = Session.strUserAgent ;



Session.g_oCallLegs[0].strMaxForwards = Session.strMaxForwards ;







var from = new SipFrom( Session.strFrom.toString() ) ;



var uri = new SipRequestUri( Session.strRequestURI.toString() ) ;







Session.g_oAPI.otg = "" ;



Session.g_oAPI.dtg = "" ;



Session.g_oAPI.otg = from.url.otg ;



Session.g_oAPI.dtg = uri.url.dtg ;







if( null != from.url.phoneNumber 

	&& "Unavailable" != from.url.phoneNumber 

	&& "unavailable" != from.url.phoneNumber

	&& "Anonymous" != from.url.phoneNumber

	&& "anonymous" != from.url.phoneNumber
	
	&& "Unknown" != from.url.phoneNumber
	
	&& "unknown" != from.url.phoneNumber) {



	Session.g_oAPI.strAniReceived = from.url.phoneNumber ;



	



	/* the ACME formats ANI as "<sip:5085150900-didgxx...@ip> */



	var len = Session.g_oAPI.strAniReceived.length ;



	var nPos = -1 ;



	for( var i = 0; i < len; i++ ) {



		var c = Session.g_oAPI.strAniReceived.charAt(i) ;



		if( c < '0' || c > '9' ) {



			nPos = i ;



			break ;



		}



	}



	if( nPos > 0 ) {



		Session.g_oAPI.strAniReceived = Session.g_oAPI.strAniReceived.toString().slice(0, nPos ) ;



		Server.logInfo("Stripping non-digit character from ANI.  Before: " + Session.strFrom + ". After: " + Session.g_oAPI.strAniReceived ) ;



	}



}



else {



	Session.g_oAPI.strAniReceived = "" ;



}



if (null != uri.url.phoneNumber ) {
	var myArray = uri.url.phoneNumber.toString().split(";"); 
	Session.g_oAPI.strDestReceived = myArray[0] ;
} else {
	Session.g_oAPI.strDestReceived = "";
}



Server.logInfo("ANI: " + Session.g_oAPI.strAniReceived ) ;



Server.logInfo("Dest: " + Session.g_oAPI.strDestReceived ) ;











Session.g_oCallLegs[0].strOrigFlag = "F" ;



if( null != from.url.otg ) {



	Session.g_oCallLegs[0].strOrigTrunkGroup = from.url.otg ;



}



if( null != from.url.oli ) {



	Session.g_oCallLegs[0].strInfoDigits = from.url.oli ;



}







Session.g_oCallLegs[0].strCallingNumber = Session.g_oAPI.strAniReceived ;



Session.g_oCallLegs[0].strCalledNumber = Session.g_oAPI.strDestReceived ;







if( null != from.displayName ) {



	Session.g_oCallLegs[0].strSvcProviderCallerId = from.displayName ;



	Session.g_oCallLegs[0].strSubscriberCallerId = from.displayName ;



}



else if( Session.g_oCallLegs[0].strCallingNumber.length > 0 ) {



	Session.g_oCallLegs[0].strSvcProviderCallerId = Session.g_oCallLegs[0].strCallingNumber ;



	Session.g_oCallLegs[0].strSubscriberCallerId = Session.g_oCallLegs[0].strCallingNumber ;



}



else {



	Session.g_oCallLegs[0].strSvcProviderCallerId = Session.g_oCallLegs[0].strSubscriberCallerId = "Unknown caller" ;



}







var contact = new SipUrl( Session.strContact.toString() ) ;



Session.g_oCallLegs[0].strRemoteSignalingAddress = Session.g_oAPI.strGWIPIngress = contact.host ;



if( null != contact.port ) {



	Session.g_oCallLegs[0].nRemoteSignalingPort = Session.g_oAPI.nGWPortIngress = contact.port ;



}



else {



	Session.g_oCallLegs[0].nRemoteSignalingPort = Session.g_oAPI.nGWPortIngress = 5060 ;



}







Session.g_oAPI.bCallerIdBlocked = isPrivacyRequested( Session.g_oCallLegs[0] ) ;







Session.g_oAPI.bRelayMedia = true ;



if( -1 != Session.strRequestURI.indexOf( "route_sip_only" ) ) {



	Server.logInfo("Terminating sip-to-sip call on which media will remain locally (not traverse SBC)") ;



	Session.g_oAPI.bRelayMedia = false ;



}







if( Session.bHandoff ) {



	Server.logInfo("This is a call handed back from an IVR; treat as a new call in all respects except that the A leg is established") ;



	Session.g_oCallLegs[0].bConnected = true ;



	



	/* remove tag from to */



	var i = Session.strTo.indexOf(";tag=") ;



	if( -1 != i ) {



		Session.g_oCallLegs[0].strOriginalTo = Session.strTo.substr( 0, i )  ;



		Server.logInfo("After removing tag from To the original To is: " + Session.g_oCallLegs[0].strOriginalTo ) ;



	}



}



/* save SDP from caller leg in case we later do a transfer */

Session.g_oCallLegs[0].strRemoteSdpForRefer = Session.g_oCallLegs[0].strRemoteSdp ;





]]></script>
          </scripts>
        </action>
        <action id="21" plug-in="Pactolus.UserFunction.1" ><?xtml-editor x=65 y=427 ?>
          <!--strip_digits: called number-->
          <user-function xmlns="urn:www.pactolus.com:xtml:application" process="&quot;PACTOLUS_ps_c_adaptor&quot;" function="&quot;strip_digits&quot;" timeout="2" return="" async="0" >
            <parameter >g_oCallLegs[0].strCalledNumber</parameter>
            <parameter >g_oCallLegs[0].strCalledNumber</parameter>
          </user-function>
          <results >
            <result name="Default" link="14" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[Session.g_oAPI.strAniReceived = Session.g_oCallLegs[0].strCallingNumber ;



Session.g_oAPI.strDestReceived = Session.g_oCallLegs[0].strCalledNumber ;







/* calculate the uri and route to use on the A leg */



js_calculate_uri_and_route( true, "SIP/2.0", 



	Session.strFrom.toString(), 



	Session.strContact.toString(), 



	Session.strRecordRoute.toString(), 



	Session.g_oCallLegs[0].strRemoteUri, 



	Session.g_oCallLegs[0].strRoute ) ;











var from = new SipFrom( Session.strFrom.toString() ) ;



var uri = new SipRequestUri( Session.strRequestURI.toString() ) ;



if( null != from.url.phoneNumber 

	&& "Unavailable" != from.url.phoneNumber 

	&& "unavailable" != from.url.phoneNumber

	&& "Anonymous" != from.url.phoneNumber

	&& "anonymous" != from.url.phoneNumber) {



	Session.g_oAPI.strAniReceived = from.url.phoneNumber ;



	



	/* the ACME formats ANI as "<sip:5085150900-didgxx...@ip> */



	var len = Session.g_oAPI.strAniReceived.length ;



	var nPos = -1 ;



	for( var i = 0; i < len; i++ ) {



		var c = Session.g_oAPI.strAniReceived.charAt(i) ;



		if( c < '0' || c > '9' ) {



			nPos = i ;



			break ;



		}



	}



	if( nPos > 0 ) {



		Session.g_oAPI.strAniReceived = Session.g_oAPI.strAniReceived.toString().slice(0, nPos ) ;



		Server.logInfo("Stripping non-digit character from ANI.  Before: " + Session.strFrom + ". After: " + Session.g_oAPI.strAniReceived ) ;



	}



}



else {



	Session.g_oAPI.strAniReceived = "" ;



}



Server.logInfo("ANI: " + Session.g_oAPI.strAniReceived ) ;



if (null !=  uri.url.phoneNumber) {
	var s = new String( uri.url.phoneNumber ) ;
	var myArray = s.split(";"); 
	Session.g_oAPI.strDestReceived = myArray[0] ;
} else {
	Session.g_oAPI.strDestReceived = "";
}

if ( 0 != Session.s_strBroadbandPrefix.length ) {



	var prefix = Session.s_strBroadbandPrefix.length;



	if ( Session.s_strBroadbandPrefix == Session.g_oAPI.strDestReceived.toString().substr(0, prefix) ){



		Session.g_oAPI.strDestReceived = Session.g_oAPI.strDestReceived.toString().substr((prefix));



	}



}



else {



	/* strip 1 from NANP numbers, unless they are provisioned in DB with leading one */



	if( !Session.s_bProvisionNanpWithLeadingOne && Session.g_oCallLegs[0].strOrigRouteType == Session.s_RT_OFF_NET &&



		11 == Session.g_oAPI.strDestReceived.length && 



		0 == Session.g_oAPI.strDestReceived.indexOf("1") ) {



	



		Session.g_oAPI.strDestReceived = Session.g_oAPI.strDestReceived.toString().substr(1) ;



	}



}



Server.logInfo("After stripping, Dest is: " + Session.g_oAPI.strDestReceived);















]]></script>
          </scripts>
        </action>
        <action id="22" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=936 y=392 ?>
          <!--send appropriate status-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <contact >s_strLocalUri</contact>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >strStatus</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="16" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.strStatus = var status = new SipStatus (Session.g_oCallLegs[0].strStatus.toString()) ;



if ( status.code < 200 ) {



	Session.strStatus = "SIP/2.0 480 Temporarily Unavailable";



}







Server.logInfo ("Call Leg A status = " + Session.strStatus);]]></script>
          </scripts>
        </action>
        <action id="23" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=267 y=296 ?>
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >"SIP/2.0 482 Loop Detected"</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="16" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="24" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=689 y=694 ?>
          <!--ConnectToIvr-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ConnectToIVR&quot;" return="nReturnValue" external-function="0" library="" >
            <parameter >bCallEstablished</parameter>
          </function>
          <results >
            <result name="Default" link="5" stubbed="0"/>
          </results>
        </action>
        <action id="25" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=693 y=817 ?>
          <!--ScreenCall-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ScreenCall&quot;" return="bConnected" external-function="0" library=""/>
          <results >
            <result name="Default" link="16" stubbed="1"/>
            <result name="failed to connect" link="16" stubbed="1" >nReturnValue == -99</result>
            <result name="connected" link="5" stubbed="0" >nReturnValue == 0</result>
            <result name="failure screening" link="17" stubbed="1" >nReturnValue == -1



AND g_oAPI.bForwardToVoicemail == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[if ( -99 == Session.nReturnValue ) {



	Session.g_oAPI.strScreenCallFlag = "F";



}]]></script>
          </scripts>
        </action>
        <action id="27" plug-in="Standard.EndSession.1" ><?xtml-editor x=874 y=62 ?></action>
        <action id="31" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=895 y=150 ?>
          <!--Invite A to B-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ReInviteParty&quot;" return="nReturnValue" external-function="1" library="lib_callcontrol.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oCallLegs[1].strRemoteSdp</parameter>
            <parameter >g_oCallLegs[1].strContentType</parameter>
            <parameter >s_strLocalUri</parameter>
          </function>
          <results >
            <result name="Default" link="27" stubbed="0"/>
            <result name="success" link="34" stubbed="0" >nReturnValue == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nReturnValue = -99;







]]></script>
          </scripts>
        </action>
        <action id="32" plug-in="Pactolus.Branch.1" ><?xtml-editor x=170 y=684 ?>
          <results >
            <result name="Default" link="15" stubbed="0"/>
            <result name="AA call" link="33" stubbed="0" >bHandoff == true</result>
          </results>
        </action>
        <action id="33" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=215 y=856 ?>
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="4" handle-responses="1" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >g_oCallLegs[0].strCallId</call-id>
            <cseq >g_oCallLegs[0].strCSeq</cseq>
            <from >g_oCallLegs[0].strTo</from>
            <request-uri >g_oCallLegs[0].strRemoteUri</request-uri>
            <to >g_oCallLegs[0].strFrom</to>
          </sip-bye>
          <results >
            <result name="Default" link="16" stubbed="1"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="34" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1155 y=245 ?>
          <results >
            <result name="Default" link="5" stubbed="1"/>
            <result name="ms connected" link="35" stubbed="0" >g_oMS[0].bCurrentlyConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("MESSAGEOUT g_oMS[0].bConnected: " + Session.g_oMS[0].bCurrentlyConnected);]]></script>
          </scripts>
        </action>
        <action id="35" plug-in="Pactolus.MGCPDelete.1" ><?xtml-editor x=1312 y=332 ?>
          <dlcx xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[0].strConnectionId" endpoint="g_oMS[0].strEndPoint" callid="g_oMS[0].strCallId" timeout="5" returns="" ms-type="&quot;PCS&quot;" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </dlcx>
          <results >
            <result name="Default" link="5" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
      </actions>
    </function>
    <function name="OnSessionEnd" start="9" event="OnSessionEnd" returns="void" >
      <parameters >
        <parameter name="nSessionEndReason" type="i2" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="nReturnCode" type="i4" >0</var>
        <var name="nIdxB" type="i4" >0</var>
        <var name="nIdxA" type="i4" >0</var>
        <var name="oDummy" type="object" ></var>
      </local-vars>
      <actions >
        <action id="9" plug-in="Pactolus.JavaStaticMethod.1" ><?xtml-editor x=69 y=121 ?>
          <!--deleteOriginationBySessionId-->
          <java xmlns="urn:www.pactolus.com:xtml:application" class="&quot;com.pactolus.psAPISceMisc&quot;" method="&quot;deleteOriginationBySessionId&quot;" timeout="s_nShortTimeout" return="" method-return-var="nReturnCode" method-return-type="0" >
            <parameter type="in" var-type="string" >g_oAPI.strPlatformSessionId</parameter>
            <parameter type="in" var-type="string" >g_oAPI.strProcDBName</parameter>
            <parameter type="in" var-type="i8" >g_oAPI.lServiceProviderId</parameter>
          </java>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo ("********************* deleteOriginationBySessionId parameters ***");



Server.logInfo ("Platform Session Id : " + Session.g_oAPI.strPlatformSessionId);



Server.logInfo ("DB Proc name        : " + Session.g_oAPI.strProcDBName);



Server.logInfo ("Service Provider Id : " + Session.g_oSub.lSPId);]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.logInfo ("********************* deleteOrginationBySessionId return code ***");



Server.logInfo ("Return code : " + Session.nReturnCode);]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Pactolus.Branch.1" ><?xtml-editor x=128 y=343 ?>
          <results >
            <result name="Default" link="8" stubbed="0"/>
            <result name="Write CDR" link="5" stubbed="0" >g_oAPI.bWriteCDR == true



AND g_oCallLegs[1].lTimeStart &gt; 0</result>
          </results>
        </action>
        <action id="3" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=891 y=346 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Session has ended") ;]]></script>
          </scripts>
        </action>
        <action id="5" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=236 y=531 ?>
          <!--psAPIProcCallCompletion-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;psAPIProcCallCompletion&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >g_oAPI</parameter>
            <parameter >g_oSub</parameter>
            <parameter >g_oCallLegs[nIdxA]</parameter>
            <parameter >g_oCallLegs[nIdxB]</parameter>
            <parameter >g_oRate</parameter>
            <parameter >oDummy</parameter>
            <parameter >oDummy</parameter>
          </function>
          <results >
            <result name="Default" link="6" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if ( true == Session.g_oCallLegs[1].bReferredTo ) {



	Session.nIdxB = 1 ;



	Session.nIdxA = 2 ;



	/* Reset CDR values so that subscriber is now the A leg of the call */



	Session.g_oCallLegs[2].strFrom = Session.g_oCallLegs[2].strTo ;



	Session.g_oCallLegs[2].strOrigFlag = "T" ; //we want this leg of the call to show up as a Placed Call 



	



	Session.g_oCallLegs[2].nOrigCountryCode = Session.g_oCallLegs[2].nDestCountryId ;



	Session.g_oCallLegs[2].strOrigAreaCode = Session.g_oCallLegs[2].strDestAreaCode ;



	Session.g_oCallLegs[2].strOrigTrunkGroup = Session.g_oCallLegs[2].strDestTrunkGroup ;



	Session.g_oCallLegs[2].strOrigRouteType = "1" ; 



	Session.g_oCallLegs[2].strCallingNumber = Session.g_oCallLegs[2].strOutdialDestNbr ;



}



else {



	Session.nIdxB = 1 ;



	Session.nIdxA = 0 ;



}







Session.g_oCallLegs[Session.nIdxB].lTimeEnded = Server.getUTCTime() ;







//js_log_object( Session.g_oAPI, "g_oAPI" ) ;



]]></script>
          </scripts>
        </action>
        <action id="6" plug-in="Pactolus.Branch.1" ><?xtml-editor x=486 y=533 ?>
          <results >
            <result name="Default" link="8" stubbed="0"/>
            <result name="g_bWriteCLegCDR" link="7" stubbed="0" >g_bWriteCLegCDR == true</result>
          </results>
        </action>
        <action id="7" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=749 y=530 ?>
          <!--psAPIProcCallCompletion-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;psAPIProcCallCompletion&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >g_oCLegAPI.oAPI</parameter>
            <parameter >g_oCLegAPI.oSub</parameter>
            <parameter >g_oCallLegs[nIdxA]</parameter>
            <parameter >g_oCallLegs[nIdxB]</parameter>
            <parameter >g_oCLegAPI.oRate</parameter>
            <parameter >oDummy</parameter>
            <parameter >oDummy</parameter>
          </function>
          <results >
            <result name="Default" link="8" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[Session.nIdxB].strCallType = Session.g_oCLegAPI.oAPI.strCallType;



Session.g_oCallLegs[Session.nIdxA].strOrigFlag = "F" ;



]]></script>
          </scripts>
        </action>
        <action id="8" plug-in="Pactolus.JavaStaticMethod.1" ><?xtml-editor x=615 y=275 ?>
          <!--unlockPin()-->
          <java xmlns="urn:www.pactolus.com:xtml:application" class="&quot;com.pactolus.psAPISceMisc&quot;" method="&quot;unlockPin&quot;" timeout="s_nShortTimeout" return="" method-return-var="nReturnCode" method-return-type="0" >
            <parameter type="in" var-type="string" >g_oAPI.strPlatformSessionId</parameter>
            <parameter type="in" var-type="string" >g_oAPI.strProcDBName</parameter>
            <parameter type="in" var-type="string" >g_oAPI.strPlatformSessionId</parameter>
            <parameter type="in" var-type="i8" >g_oSub.lSubscriberId</parameter>
          </java>
          <results >
            <result name="Default" link="3" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo ("********************* unlockPin parameters ***");



Server.logInfo ("Platform Session Id : " + Session.g_oAPI.strPlatformSessionId);



Server.logInfo ("DB Proc name        : " + Session.g_oAPI.strProcDBName);



Server.logInfo ("Platform Session Id : " + Session.g_oAPI.strPlatformSessionId);



Server.logInfo ("Subscriber Id       : " + Session.g_oSub.lSubscriberId);







]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.logInfo ("********************* unlockPin return code ***");



Server.logInfo ("Return code : " + Session.nReturnCode);]]></script>
          </scripts>
        </action>
      </actions>
    </function>
    <function name="OnAck" start="4" event="OnAck" returns="void" >
      <parameters >
        <parameter name="strAllowEvents" type="string" pass="byref"/>
        <parameter name="strAuthorization" type="string" pass="byref"/>
        <parameter name="strCallId" type="string" pass="byref"/>
        <parameter name="strContact" type="string" pass="byref"/>
        <parameter name="strContent" type="string" pass="byref"/>
        <parameter name="strContentDisposition" type="string" pass="byref"/>
        <parameter name="strContentEncoding" type="string" pass="byref"/>
        <parameter name="strContentLanguage" type="string" pass="byref"/>
        <parameter name="strContentType" type="string" pass="byref"/>
        <parameter name="strCSeq" type="string" pass="byref"/>
        <parameter name="strDate" type="string" pass="byref"/>
        <parameter name="strEncryption" type="string" pass="byref"/>
        <parameter name="strFrom" type="string" pass="byref"/>
        <parameter name="strMaxForwards" type="string" pass="byref"/>
        <parameter name="strMIMEVersion" type="string" pass="byref"/>
        <parameter name="strProxyAuthorization" type="string" pass="byref"/>
        <parameter name="strProxyRequire" type="string" pass="byref"/>
        <parameter name="strRecordRoute" type="string" pass="byref"/>
        <parameter name="strRequestURI" type="string" pass="byref"/>
        <parameter name="strRequire" type="string" pass="byref"/>
        <parameter name="strResponseKey" type="string" pass="byref"/>
        <parameter name="strRoute" type="string" pass="byref"/>
        <parameter name="strTimestamp" type="string" pass="byref"/>
        <parameter name="strTo" type="string" pass="byref"/>
        <parameter name="strUserAgent" type="string" pass="byref"/>
        <parameter name="strVia" type="string" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="bSpiralCallId" type="boolean" >0</var>
        <var name="bUnknownCallId" type="boolean" >0</var>
        <var name="nIdxA" type="i4" >0</var>
        <var name="nIdxB" type="i4" >0</var>
        <var name="strFromSend" type="string" ></var>
        <var name="strToSend" type="string" ></var>
        <var name="i" type="i4" >0</var>
      </local-vars>
      <actions >
        <action id="4" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=51 y=43 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
        </action>
        <action id="1" plug-in="Pactolus.Branch.1" ><?xtml-editor x=277 y=181 ?>
          <results >
            <result name="Default" link="3" stubbed="0"/>
            <result name="Unknown CallId" link="2" stubbed="0" >bUnknownCallId == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bUnknownCallId = false ;







	



if( Session.strCallId != Session.g_oCallLegs[0].strCallId &&



	Session.strCallId != Session.g_oCallLegs[1].strCallId ) {



		Server.logInfo ("Unknown CallId: " + Session.strCallId );		



		Session.bUnknownCallId = true ;



}]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=461 y=484 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
        </action>
        <action id="3" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=571 y=265 ?>
          <!--Send down other call leg-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >g_oCallLegs[i].strCallId</call-id>
            <cseq >g_oCallLegs[i].strCSeq</cseq>
            <from >g_oCallLegs[i].strFrom</from>
            <request-uri >g_oCallLegs[i].strRemoteUri</request-uri>
            <route >g_oCallLegs[i].strRoute</route>
            <to >g_oCallLegs[i].strTo</to>
            <via >g_oCallLegs[i].strVia</via>
          </sip-ack>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* determine which leg we're sending on, and whether we are a UAC or a UAS on that leg */



if( Session.strCallId == Session.g_oCallLegs[0].strCallId ) {



	Session.nIdxA = 0 ;



	Session.nIdxB = 1 ;



	



	Session.i = 1 ;



}



else {



	Session.nIdxA = 1 ;



	Session.nIdxB = 0 ;



	



	Session.i = 0 ;



}



]]></script>
          </scripts>
        </action>
      </actions>
    </function>
    <function name="OnBye" start="1" event="OnBye" returns="void" >
      <parameters >
        <parameter name="strAccept" type="string" pass="byref"/>
        <parameter name="strAcceptEncoding" type="string" pass="byref"/>
        <parameter name="strAcceptLanguage" type="string" pass="byref"/>
        <parameter name="strAllow" type="string" pass="byref"/>
        <parameter name="strAllowEvents" type="string" pass="byref"/>
        <parameter name="strAuthorization" type="string" pass="byref"/>
        <parameter name="strCallId" type="string" pass="byref"/>
        <parameter name="strCSeq" type="string" pass="byref"/>
        <parameter name="strDate" type="string" pass="byref"/>
        <parameter name="strEncryption" type="string" pass="byref"/>
        <parameter name="strErrorInfo" type="string" pass="byref"/>
        <parameter name="strFrom" type="string" pass="byref"/>
        <parameter name="strMaxForwards" type="string" pass="byref"/>
        <parameter name="strMIMEVersion" type="string" pass="byref"/>
        <parameter name="strProxyAuthorization" type="string" pass="byref"/>
        <parameter name="strProxyRequire" type="string" pass="byref"/>
        <parameter name="strRecordRoute" type="string" pass="byref"/>
        <parameter name="strReferredBy" type="string" pass="byref"/>
        <parameter name="strRequestURI" type="string" pass="byref"/>
        <parameter name="strRequire" type="string" pass="byref"/>
        <parameter name="strResponseKey" type="string" pass="byref"/>
        <parameter name="strRoute" type="string" pass="byref"/>
        <parameter name="strSupported" type="string" pass="byref"/>
        <parameter name="strTimestamp" type="string" pass="byref"/>
        <parameter name="strTo" type="string" pass="byref"/>
        <parameter name="strUserAgent" type="string" pass="byref"/>
        <parameter name="strVia" type="string" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="bSpiralCallId" type="boolean" >0</var>
        <var name="bUnknownCallId" type="boolean" >1</var>
        <var name="i" type="i4" >0</var>
        <var name="strFromSend" type="string" ></var>
        <var name="strToSend" type="string" ></var>
        <var name="nIdxA" type="i4" >0</var>
        <var name="nIdxB" type="i4" >0</var>
        <var name="oDummy" type="object" ></var>
        <var name="bOtherLegConnected" type="boolean" >0</var>
        <var name="bTransferred" type="boolean" >0</var>
      </local-vars>
      <actions >
        <action id="1" plug-in="Pactolus.Branch.1" ><?xtml-editor x=20 y=34 ?>
          <results >
            <result name="Default" link="6" stubbed="0"/>
            <result name="Unknown CallId" link="2" stubbed="0" >bUnknownCallId == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bUnknownCallId = false ;







if (Session.g_bTransfer && 



	Session.strCallId != Session.g_oCallLegs[2].strCallId &&



	Session.strCallId != Session.g_oCallLegs[0].strCallId &&



	Session.strCallId != Session.g_oCallLegs[1].strCallId ) {



	Server.logInfo ("Unknown CallId: " + Session.strCallId );



	Session.bUnknownCallId = true ;



}



else if( !Session.g_bTransfer &&



		Session.strCallId != Session.g_oCallLegs[0].strCallId &&



		Session.strCallId != Session.g_oCallLegs[1].strCallId ) {



		



	Server.logInfo ("Unknown CallId: " + Session.strCallId );



	Session.bUnknownCallId = true ;



}















/* if we are in the process of a call transfer,



 set this call leg to disconnected (most likely the Referring Party) */



if ( Session.strCallId == Session.g_oCallLegs[0].strCallId ) {



	Session.g_oCallLegs[0].bConnected = false ;



}



else if ( Session.strCallId == Session.g_oCallLegs[1].strCallId ) {



	Session.g_oCallLegs[1].bConnected = false ;



}



else if ( Session.g_bTransfer &&



			Session.strCallId == Session.g_oCallLegs[2].strCallId ) {



	Session.g_oCallLegs[2].bConnected = false;

	Session.bTransferred = true;

}



	



]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=441 y=55 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
        </action>
        <action id="4" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=265 y=512 ?>
          <!--Send down other call leg-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="5" handle-responses="1" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >g_oCallLegs[i].strCallId</call-id>
            <cseq >g_oCallLegs[i].strCSeq</cseq>
            <from >strFromSend</from>
            <request-uri >g_oCallLegs[i].strRemoteUri</request-uri>
            <route >g_oCallLegs[i].strRoute</route>
            <to >strToSend</to>
          </sip-bye>
          <results >
            <result name="Default" link="7" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[











]]></script>
          </scripts>
        </action>
        <action id="5" plug-in="Standard.EndSession.1" ><?xtml-editor x=1006 y=377 ?></action>
        <action id="6" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=112 y=171 ?>
          <!--200 OK-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >"SIP/2.0 200 OK"</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="10" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
            <result name="In Call Transfer" link="2" stubbed="0" >g_STATE == s_STATE_TRANSFERRING_CALL</result>
            <result name="g_bAttendedTransfer" link="9" stubbed="0" >g_bAttendedTransfer == true



AND g_oCallLegs[2].strCallId == strCallId</result>
            <result name="bTransferred" link="2" stubbed="0" >bTransferred == true</result>
          </results>
        </action>
        <action id="7" plug-in="Pactolus.Branch.1" ><?xtml-editor x=532 y=529 ?>
          <results >
            <result name="Default" link="5" stubbed="0"/>
            <result name="g_bHangUpAttendingLeg" link="8" stubbed="0" >g_bHangUpAttendingLeg == true</result>
          </results>
        </action>
        <action id="8" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=764 y=352 ?>
          <!--Send BYE to initial A-leg-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="5" handle-responses="1" increment-cseq-first="1" increment-cseq-last="0" >
            <call-id >g_oCallLegs[2].strCallId</call-id>
            <cseq >g_oCallLegs[2].strCSeq</cseq>
            <from >g_oCallLegs[2].strTo</from>
            <request-uri >g_oCallLegs[2].strRemoteUri</request-uri>
            <route >g_oCallLegs[2].strRoute</route>
            <to >g_oCallLegs[2].strFrom</to>
          </sip-bye>
          <results >
            <result name="Default" link="5" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* determine which leg we're sending on, and whether we are a UAC or a UAS on that leg */







if( Session.g_oCallLegs[0].strCallId == Session.strCallId ) {



	Session.i = 1 ;



	Session.g_oCallLegs[1].nTerminationReason = Session.g_oAPI.nCallTerminationReason = Session.s_TR_CALLING_PARTY_HANGUP ;



}



else {



	Session.i = 0 ;



	Session.g_oCallLegs[1].nTerminationReason = Session.g_oAPI.nCallTerminationReason = Session.s_TR_CALLED_PARTY_HANGUP ;



}







if( Session.g_oCallLegs[Session.i].bUac ) {



	Session.strToSend = Session.g_oCallLegs[Session.i].strTo ;



	Session.strFromSend = Session.g_oCallLegs[Session.i].strFrom ;



}



else {



	Session.strToSend = Session.g_oCallLegs[Session.i].strFrom ;



	Session.strFromSend = Session.g_oCallLegs[Session.i].strTo ;



}











]]></script>
          </scripts>
        </action>
        <action id="9" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=466 y=218 ?>
          <!--psAPIProcCallCompletion-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;psAPIProcCallCompletion&quot;" return="" external-function="1" library="lib_APISce.xml" >
            <parameter >g_oCallLegs[2].oAPI</parameter>
            <parameter >g_oCallLegs[2].oSub</parameter>
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oCallLegs[2]</parameter>
            <parameter >g_oCallLegs[2].oRate</parameter>
            <parameter >oDummy</parameter>
            <parameter >oDummy</parameter>
          </function>
          <results >
            <result name="Default" link="2" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oAPI.nOrigCountryId = Session.g_oAPI.nOrigCountryId;















]]></script>
            <script language="javascript" timing="last" ><![CDATA[if ( 0 != Session.nReturnCode ) {



	Server.logError("Failed to write CDR for Referring Party");



}







]]></script>
          </scripts>
        </action>
        <action id="10" plug-in="Pactolus.Branch.1" ><?xtml-editor x=51 y=428 ?>
          <results >
            <result name="Default" link="4" stubbed="0"/>
            <result name="other leg not connected" link="7" stubbed="0" >bOtherLegConnected == false</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* determine which leg we're sending on, and whether we are a UAC or a UAS on that leg */







if( Session.g_oCallLegs[0].strCallId == Session.strCallId ) {



	Session.i = 1 ;



	Session.g_oCallLegs[1].nTerminationReason = Session.g_oAPI.nCallTerminationReason = Session.s_TR_CALLING_PARTY_HANGUP ;



}



else {



	Session.i = 0 ;



	Session.g_oCallLegs[1].nTerminationReason = Session.g_oAPI.nCallTerminationReason = Session.s_TR_CALLED_PARTY_HANGUP ;



}







if( Session.g_oCallLegs[Session.i].bUac ) {



	Session.strToSend = Session.g_oCallLegs[Session.i].strTo ;



	Session.strFromSend = Session.g_oCallLegs[Session.i].strFrom ;



}



else {



	Session.strToSend = Session.g_oCallLegs[Session.i].strFrom ;



	Session.strFromSend = Session.g_oCallLegs[Session.i].strTo ;



}







Session.bOtherLegConnected = Session.g_oCallLegs[Session.i].bConnected ;]]></script>
          </scripts>
        </action>
      </actions>
    </function>
    <function name="ReInvite" start="14" event="ReInvite" returns="void" >
      <parameters >
        <parameter name="oSipMsg" type="object" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="bNewSdp" type="boolean" >0</var>
        <var name="bUnknownCallId" type="boolean" >0</var>
        <var name="nIdxA" type="i4" >0</var>
        <var name="nIdxB" type="i4" >0</var>
        <var name="bConnected" type="boolean" >0</var>
        <var name="nFinalStatus" type="i4" >0</var>
        <var name="bAlegHungUp" type="boolean" >0</var>
        <var name="bTrue" type="boolean" >1</var>
        <var name="nSessionTimerA" type="i4" >0</var>
        <var name="bReInvite" type="boolean" >0</var>
        <var name="bInviteOnHold" type="boolean" >0</var>
        <var name="strSessionExpires" type="string" ></var>
        <var name="nSessionTimerB" type="i4" >0</var>
        <var name="nSessionTimer" type="i4" >0</var>
        <var name="bReplaces" type="boolean" >0</var>
        <var name="nReturnValue" type="i4" >0</var>
      </local-vars>
      <actions >
        <action id="14" plug-in="Pactolus.Branch.1" ><?xtml-editor x=23 y=48 ?>
          <results >
            <result name="Default" link="29" stubbed="0"/>
            <result name="unknown callid" link="17" stubbed="0" >bUnknownCallId == true</result>
            <result name="reINVITE" link="20" stubbed="0" >bReInvite == true</result>
            <result name="RejectingCall" link="20" stubbed="0" >g_STATE == s_STATE_REJECTING_CALL</result>
            <result name="Invite on hold - MOH" link="28" stubbed="0" >bInviteOnHold == true



AND oSipMsg.strCallId == g_oCallLegs[1].strCallId



AND g_oAPI.strMOHFlag == "T"</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bUnknownCallId = false ;



Session.bReplaces = false;



var callId = Session.oSipMsg.strCallId;



if( Session.oSipMsg.strCallId != Session.g_oCallLegs[0].strCallId &&



	Session.oSipMsg.strCallId != Session.g_oCallLegs[1].strCallId ) {



		



	if ( 0 == Session.oSipMsg.strReplaces.length ) {	



		Session.bUnknownCallId = true ;



	}



	else {



		//this INVITE is meant to replace an existing dialog. Pull out the call id and 



		// ensure that it matches one of ours.



		var i = Session.oSipMsg.strReplaces.toString().indexOf(";");



		callId = Session.oSipMsg.strReplaces.toString().substring(0, i);



		if ( callId == Session.g_oCallLegs[0].strCallId ||



		     callId == Session.g_oCallLegs[1].strCallId ) {



	     



		     Session.bReplaces = true;



	     



		     Server.logInfo("Received INVITE with Replaces header for call id: " + callId);



		 }



	}



}







/* determine which leg we're sending on, and whether we are a UAC or a UAS on that leg */



if( callId == Session.g_oCallLegs[0].strCallId ) {



	Session.nIdxA = 0 ;



	Session.nIdxB = 1 ;



}



else {



	Session.nIdxA = 1 ;



	Session.nIdxB = 0 ;



}







if ( Session.bReplaces ) {



	Session.g_oCallLegs[Session.nIdxA].strTo = Session.g_oCallLegs[Session.nIdxA].strOriginalTo = Session.oSipMsg.strTo;



	Session.g_oCallLegs[Session.nIdxA].strFrom = Session.oSipMsg.strFrom;



	Session.g_oCallLegs[Session.nIdxA].strCallId = Session.oSipMsg.strCallId;







	js_calculate_uri_and_route( true, "SIP/2.0", 



		Session.oSipMsg.strFrom.toString(), 



		Session.oSipMsg.strContact.toString(), 



		Session.oSipMsg.strRecordRoute.toString(), 



		Session.g_oCallLegs[Session.nIdxA].strRemoteUri, 



		Session.g_oCallLegs[Session.nIdxA].strRoute ) ;



	



	Session.g_oCallLegs[Session.nIdxA].strRequestUri = Session.g_oCallLegs[Session.nIdxA].strRemoteUri ;



}







Session.g_oCallLegs[Session.nIdxA].strRemoteCSeq = Session.oSipMsg.strCSeq ;



Session.g_oCallLegs[Session.nIdxA].strVia = Session.oSipMsg.strVia ;







if( Session.oSipMsg.strContent == Session.g_oCallLegs[Session.nIdxA].strRemoteSdp ) {



	Server.logInfo("Received a session timer reINVITE") ;



	Session.bReInvite = true ;



	return ;



}



if( js_isInviteOnHold( Session.oSipMsg.strContent ) ) { 



	Session.bInviteOnHold = true ;



}







Server.logInfo("New SDP: " + Session.oSipMsg.strContent ) ;



Server.logInfo("Old SDP: " + Session.g_oCallLegs[Session.nIdxA].strRemoteSdp ) ;







//save the last negotiated sdp in case we need to revert in the case of a failed reINVITE



Session.g_oCallLegs[Session.nIdxA].strLastGoodSdp = Session.g_oCallLegs[Session.nIdxA].strRemoteSdp;







Session.g_oCallLegs[Session.nIdxA].strRemoteSdp = Session.oSipMsg.strContent ;



Session.g_oCallLegs[Session.nIdxA].strSdpToOfferB = "" ; //cuz ProxyCall would pick this up







/* we do not want to be the refresher on either leg*/



Session.nSessionTimerA = Clib.atoi( Session.oSipMsg.strSessionExpires ) ;



Session.g_oCallLegs[Session.nIdxA].bRefresher = false ;



Session.nSessionTimerB = Clib.atoi( Session.g_oCallLegs[Session.nIdxB].strSessionExpires ) ;



Session.g_oCallLegs[Session.nIdxB].bRefresher = false ;





]]></script>
          </scripts>
        </action>
        <action id="15" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1115 y=293 ?>
          <!--Connected to Called Party-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
        </action>
        <action id="17" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=299 y=430 ?>
          <!--SIP/2.0 481 Call Leg/Transaction Does Not Exist-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oSipMsg.strCallId</call-id>
            <cseq >oSipMsg.strCSeq</cseq>
            <from >oSipMsg.strFrom</from>
            <status >"SIP/2.0 481 Call Leg/Transaction Does Not Exist"</status>
            <to >oSipMsg.strTo</to>
            <via >oSipMsg.strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="19" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="18" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=426 y=34 ?>
          <!--ProxyCallWithoutRtpRelay-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ProxyCallWithoutRtpRelay&quot;" return="bConnected" external-function="1" library="lib_voip.xml" >
            <parameter >g_oCallLegs[nIdxA]</parameter>
            <parameter >g_oCallLegs[nIdxB]</parameter>
            <parameter >30</parameter>
            <parameter >nSessionTimerA</parameter>
            <parameter >g_oCallLegs[nIdxA].bRefresher</parameter>
            <parameter >nSessionTimerB</parameter>
            <parameter >g_oCallLegs[nIdxB].bRefresher</parameter>
            <parameter >bTrue</parameter>
            <parameter >nFinalStatus</parameter>
            <parameter >bAlegHungUp</parameter>
          </function>
          <results >
            <result name="Default" link="26" stubbed="0"/>
            <result name="connected" link="22" stubbed="0" >bConnected == true</result>
            <result name="reinvite failed, still connected" link="25" stubbed="0" >bConnected == false



AND g_oCallLegs[0].bConnected == true



AND g_oCallLegs[1].bConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if( !Session.bInviteOnHold ) {



	Session.g_oCallLegs[Session.nIdxA].strRemoteSdpForRefer = Session.oSipMsg.strContent ;



}







]]></script>
            <script language="javascript" timing="last" ><![CDATA[if( !Session.bInviteOnHold ) {



	Session.g_oCallLegs[Session.nIdxB].strRemoteSdpForRefer = Session.g_oCallLegs[Session.nIdxB].strRemoteSdp ;



}

else {

	/* since it was an INVITE on hold, set the stored remote Sdp for the initiating leg back to what is was before

	*/

	Session.g_oCallLegs[Session.nIdxA].strRemoteSdp = Session.g_oCallLegs[Session.nIdxA].strLastGoodSdp ;



	

}



]]></script>
          </scripts>
        </action>
        <action id="19" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=706 y=377 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
        </action>
        <action id="20" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=297 y=285 ?>
          <!--200 OK with my SDP-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oSipMsg.strCallId</call-id>
            <contact >s_strLocalUri</contact>
            <content >g_oCallLegs[nIdxB].strRemoteSdp</content>
            <content-type >"application/sdp"</content-type>
            <cseq >oSipMsg.strCSeq</cseq>
            <from >oSipMsg.strFrom</from>
            <require >"timer"</require>
            <session-expires >strSessionExpires</session-expires>
            <status >"SIP/2.0 200 OK"</status>
            <to >oSipMsg.strTo</to>
            <via >oSipMsg.strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="15" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.strSessionExpires = String( Clib.atoi( Session.oSipMsg.strSessionExpires ) ) + "; refresher=uac" ;]]></script>
          </scripts>
        </action>
        <action id="22" plug-in="Pactolus.Branch.1" ><?xtml-editor x=624 y=151 ?>
          <results >
            <result name="Default" link="15" stubbed="0"/>
            <result name="switch - we now refresh" link="24" stubbed="0" >g_oCallLegs[nIdxB].bRefresher == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_STATE = Session.s_STATE_CONNECTED_TO_CALLED;]]></script>
          </scripts>
        </action>
        <action id="23" plug-in="Standard.Timer.1" ><?xtml-editor x=1042 y=152 ?>
          <!--Set timer for B leg-->
          <timer xmlns="urn:www.pactolus.com:xtml:application" start="1" id="g_oCallLegs[nIdxB].nSessionTimerId" duration="nSessionTimer"/>
          <results >
            <result name="Default" link="15" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[Session.nIdxB].nSessionTimer = Session.nSessionTimerB ;



Session.g_oCallLegs[Session.nIdxB].bRefresher = true ;



Session.g_oCallLegs[Session.nIdxB].strSessionExpires = Session.nSessionTimerB.toString() + "; refresher=uac" ;



Session.nSessionTimer = Session.nSessionTimerB / 2;



Server.logInfo("Sending refreshing reINVITEs to B leg each " + Session.nSessionTimer + " seconds") ;



]]></script>
          </scripts>
        </action>
        <action id="24" plug-in="Standard.Timer.1" ><?xtml-editor x=824 y=146 ?>
          <!--Stop timer for B leg-->
          <timer xmlns="urn:www.pactolus.com:xtml:application" start="0" id="g_oCallLegs[nIdxB].nSessionTimerId" duration=""/>
          <results >
            <result name="Default" link="23" stubbed="0"/>
          </results>
        </action>
        <action id="25" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=677 y=22 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logError("reINVITE failed. Returning with last negotiated INVITE parameters.");



Session.g_oCallLegs[Session.nIdxA].strRemoteSdp = Session.g_oCallLegs[Session.nIdxA].strLastGoodSdp;



]]></script>
          </scripts>
        </action>
        <action id="26" plug-in="Standard.EndSession.1" ><?xtml-editor x=683 y=72 ?></action>
        <action id="27" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=546 y=618 ?>
          <!--bbtel_moh-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;bbtel_moh&quot;" return="nReturnValue" external-function="1" library="lib_voip.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oMS</parameter>
            <parameter >g_oAPI</parameter>
            <parameter >g_oAccessLine.oSub.strLanguage</parameter>
            <parameter >g_nInterruptTimer</parameter>
            <parameter >g_nInterruptPlays</parameter>
            <parameter >bPlayInterrupt</parameter>
          </function>
          <results >
            <result name="Default" link="19" stubbed="0"/>
            <result name="bConnected" link="19" stubbed="0" >bConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_bPlayingMOH = true;
Session.g_nInterruptPlays = 0;
Session.bPlayInterrupt = false;


]]></script>
            <script language="javascript" timing="last" ><![CDATA[if ( -99 == Session.nReturnValue ) {
	Session.g_bPlayingMOH = false;
}]]></script>
          </scripts>
        </action>
        <action id="28" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=302 y=608 ?>
          <!--200 OK with A's SDP-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oSipMsg.strCallId</call-id>
            <contact >s_strLocalUri</contact>
            <content >g_oCallLegs[nIdxA].strRemoteSdp</content>
            <content-type >"application/sdp"</content-type>
            <cseq >oSipMsg.strCSeq</cseq>
            <from >oSipMsg.strFrom</from>
            <session-expires >strSessionExpires</session-expires>
            <status >"SIP/2.0 200 OK"</status>
            <to >oSipMsg.strTo</to>
            <via >oSipMsg.strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="27" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="29" plug-in="Pactolus.Branch.1" ><?xtml-editor x=227 y=64 ?>
          <results >
            <result name="Default" link="18" stubbed="0"/>
            <result name="g_bPlayingMOH" link="30" stubbed="0" >g_bPlayingMOH == true</result>
          </results>
        </action>
        <action id="30" plug-in="Pactolus.MGCPDelete.1" ><?xtml-editor x=397 y=167 ?>
          <dlcx xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS.strConnectionId" endpoint="g_oMS.strEndPoint" callid="g_oMS.strCallId" timeout="5" returns="" ms-type="g_oMS.strType" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </dlcx>
          <results >
            <result name="Default" link="18" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Deleting MOH media server connection");



Session.g_bPlayingMOH = false;]]></script>
          </scripts>
        </action>
      </actions>
      <text-objects >
        <text-object x-coord="8" y-coord="739" width="552" height="211" text="A note on session timers: 







The pcs_voip_terminate app wants to receive session timer re-INVITEs



on both the A leg and the B leg.  This app sends the initial INVITE to B specifying that



B should be the refresher (refresher=uas); meanwhile, it sends the 200 OK back to A specifying that A should be the refresher on that leg (refresher=uac).







Thereafter, upon receiving a session timer re-INVITE from either A or B, it simply returns



a 200 OK with an indication that the far end should continue sending session timer re-INVITEs



on the same interval.







However, we have to handle the case where the remote side refuses to be the refresher, and then we switch and become the refresher on that leg.  That is what happens with a Sonus 4.x GSX." font-name="Times New Roman" size="-13" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="10" italic="0"/>
      </text-objects>
    </function>
    <function name="psAuthTerminate" start="1" event="psAuthTerminate" returns="i4" >
      <parameters >
        <parameter name="oSipMsg" type="object" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="strResponse" type="string" ></var>
        <var name="nReturnCode" type="i4" >0</var>
        <var name="bRedirectForCalea" type="boolean" >0</var>
        <var name="bSendCaleaNotify" type="boolean" >0</var>
        <var name="strCaleaEvent" type="string" ></var>
        <var name="strContact" type="string" ></var>
        <var name="bSNMPEvent" type="boolean" >0</var>
        <var name="oAPI_orig" type="object" ></var>
        <var name="oAccessLine_orig" type="object" ></var>
        <var name="oVoipService_orig" type="object" ></var>
        <var name="strErrorInfo" type="string" ></var>
      </local-vars>
      <actions >
        <action id="1" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=17 y=258 ?>
          <!--VoipAuthenticateTermination-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;VoipAuthenticateTermination&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >g_oAPI</parameter>
            <parameter >g_oAccessLine</parameter>
            <parameter >g_oVoipService</parameter>
            <parameter >strResponse</parameter>
            <parameter >g_oCallLegs[0].strRequestUri</parameter>
            <parameter >g_oSub</parameter>
          </function>
          <results >
            <result name="Default" link="12" stubbed="0"/>
            <result name="redirect for calea" link="5" stubbed="0" >nReturnCode == 0



AND bRedirectForCalea == true</result>
            <result name="send calea notify" link="6" stubbed="0" >nReturnCode == 0



AND bSendCaleaNotify == true</result>
            <result name="success" link="4" stubbed="0" >nReturnCode == 0</result>
            <result name="handling 302 response" link="10" stubbed="0" >g_nFinalStatus == 302



AND nReturnCode != 0</result>
            <result name="Pin locked, has vm" link="4" stubbed="0" >g_oAPI.bForwardToVoicemail == true



AND (nReturnCode == -10



OR nReturnCode == -11



OR nReturnCode == -17



OR nReturnCode == -15)</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oAPI.bRemindMeCall = ( -1 != Session.g_oCallLegs[0].strRequestUri.toString().indexOf("CT=Remind_Me") ) ;











Session.g_oAPI.bFaxCall = false ;



if( -1 != Session.g_oCallLegs[0].strRemoteSdp.toString().indexOf(" t38 " ) ||



	-1 != Session.g_oCallLegs[0].strRemoteSdp.toString().indexOf(" T38 " ) ) {



	



	Session.g_oAPI.bFaxCall = true ;



}







// get the department id from the request URI if it's there.



js_parse_value (Session.g_oCallLegs[0].strRequestUri.toString(), "dept_id", Session.g_oAPI.nDeptId);







//if we are handling a 302 response, save off the original object values, in case the 



// destination phone number is found to be off-net. ie. this call to auth term will return a non-success.



if ( 302 == Session.g_nFinalStatus ) {



	Session.g_oAPI.oRoute.length = 0;



	Session.g_nDestinations = 0;



	Session.oAccessLine_orig = Session.g_oAccessLine;



	Session.oAPI_orig = Session.g_oAPI;



	Session.oVoipService_orig = Session.g_oVoipService;



}



Session.g_bOffNet302 = false;











Session.bSNMPEvent = false;



	]]></script>
            <script language="javascript" timing="middle" ><![CDATA[if ( Session.g_oAPI.bRemindMeCall ) {



	Session.g_oAPI.bForwardToVoicemail = false;



}







/* if we need to wiretap this call, redirect it through a calea Server that can fork the stream, 



	unless it already is coming through such a machine. 



*/







if( "T" == Session.g_oAccessLine.strWiretapFlag ) {







	/* did it come through a calea Server? */



//	if( -1 == Session.oSipMsg.strRemoteSdp.indexOf("Pactolus") ) {



	



		/* no, redirect it through one if one has been configured, else ignore */



/*		if( Session.s_strCaleaRedirect1.length > 0 ) {



			Session.bRedirectForCalea = true ;



			Session.strContact = "<sip:" + Session.g_oAPI.strDestReceived + "@" + Session.s_strCaleaRedirect1 + ">" ;



			if( Session.s_strCaleaRedirect2.length > 0 ) {



				Session.strContact += ",<sip:" + Session.g_oAPI.strDestReceived + "@" + Session.s_strCaleaRedirect2 + ">" ;				



			}	



		}



	}



	else {



*/	



		/* yes, send a NOTIFY back to the calea Server to begin forking */



		Session.bSendCaleaNotify = true ;



		Session.strCaleaEvent = "calea;";



		



		/* wiretap destination */



		Session.strCaleaEvent += "wd=\"" ;



		Session.strCaleaEvent += Session.g_oAccessLine.strWiretapDest ;



		Session.strCaleaEvent += "\";";







		/* origination number */



		Session.strCaleaEvent += "on=\"" ;



		Session.strCaleaEvent += Session.g_oAPI.strAniReceived ;



		Session.strCaleaEvent += "\";";







		/* termination number */



		Session.strCaleaEvent += "tn=\"" ;



		Session.strCaleaEvent += Session.g_oAPI.strDestReceived ;



		Session.strCaleaEvent += "\";";







		/* serveiled number equals termination number for terminate app */



		Session.strCaleaEvent += "sn=\"" ;



		Session.strCaleaEvent += Session.g_oAPI.strDestReceived ;



		Session.strCaleaEvent += "\"" ;



	//}



}







if ( 99 == Session.nReturnCode || -50 == Session.nReturnCode ) {



	Session.bSNMPEvent = true;



}







//if the pin is locked and the subsciber has voice mail, route the call there instead of



// simply rejecting it.



if ( -15 == Session.nReturnCode && Session.g_oAPI.bForwardToVoicemail ) {



	Session.g_nDestinations = 0;



}]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.enableEvents(false) ;







js_initVoipCallLeg( Session.g_oCallLegs[1] ) ;







if ( -1 != Session.g_oCallLegs[0].strRequestUri.toString().indexOf("ReceptionRNA=")) {



	Server.logInfo("This is an attempt to reach the Receptionist before routing to an IVR");



	Session.g_bTryReceptionist = true;



	Session.g_oAPI.bForwardToVoicemail = false;



	js_parse_value (Session.g_oCallLegs[0].strRequestUri.toString(), "ReceptionRNA", Session.g_oAPI.nReceptionRNATimeout);



	Session.g_oAPI.nRingNoAnswerTimeout = Session.g_oAPI.nReceptionRNATimeout; 



	Server.logInfo("RNA set to: " + Session.g_oAPI.nRingNoAnswerTimeout + ". Call will not be routed to voice mail.");



}



	







if( 0 == Session.nReturnCode && !Session.bRedirectForCalea ) {







	/* determine how many destinations to try (not including voicemail) */



	for( var i = 0; i < Session.g_oAPI.oRoute.length; i++, Session.g_nDestinations++ ) {



		if( 0 == Session.g_oAPI.oRoute[i].strPhoneNumber.length	&&



			0 == Session.g_oAPI.oRoute[i].strContact.length	) {



			break ;



		}



	}



	



	Session.g_oAPI.oRoute.length = Session.g_nDestinations ;



	Server.logInfo("Number of routes returned was: " + Session.g_nDestinations ) ;



	



	/* if the user asked for simultaneous ring, but only provided a single destination then keep things simple */

	/* DH: when false answer detection is on, then we still want to go through the simring logic even when only attempting on call leg */

	if( Session.s_HT_SIMULTANEOUS_RING == Session.g_oAPI.nHuntType && Session.g_nDestinations < 2 && !Session.s_bFalseAnswerDetection ) {



		Session.g_oAPI.nHuntType = Session.s_HT_SEQUENTIAL ;



	}



	Server.logInfo("Routes will be attempted " + (Session.s_HT_SEQUENTIAL == Session.g_oAPI.nHuntType ? "sequentially" : "simultaneously") ) ;



	Server.logInfo("Voicemail " + (Session.g_oAPI.bForwardToVoicemail ? "will" : "will not") + " be attempted if all routes are exhausted") ;



							



	/* special call types */



	



	Session.g_oCallLegs[1].strCallType = Session.g_oAPI.strCallType ;



	



	if( Session.g_oAPI.strCallType == Session.s_CT_VMAIL_RETRIEVAL ) {



		Server.logInfo("This is a voice mail retrieval call") ;



		Session.g_oCallLegs[1].strDestRouteType = Session.s_RT_ON_NET ;



		Session.g_oAPI.oRoute[0].strContact = Session.s_strNiuAddress + ";target=pcs_vmail_retrieve" ;



		Session.g_oAPI.oRoute[0].strPhoneNumber = "" ;



	}



	else if ( Session.g_oAPI.strCallType == Session.s_CT_IVR ) {



		Session.g_oAPI.nDeptId = Session.g_oAPI.nDeptIdOut ;



		Server.logInfo("This is an IVR call for dept id: " + Session.g_oAPI.nDeptId );



		



		Session.g_oCallLegs[1].strDestRouteType = Session.s_RT_ON_NET ;



		if ( 0 < Session.g_oAPI.oRoute[0].strContact.length ) {



			Session.g_oCallLegs[1].strOutdialDestNbr = Session.g_oAPI.strReceptionPhone ;



			Session.g_bTryReceptionist = true;



			Session.g_oAPI.nRingNoAnswerTimeout = Session.g_oAPI.nReceptionRNATimeout ;



			Server.logInfo("Trying IVR Receptionist at " + Session.g_oCallLegs[1].strOutdialDestNbr + " for " + Session.g_oAPI.nReceptionRNATimeout + " seconds");



		}



		else {



			Server.logInfo("No receptionist route information received. Routing direct to IVR");



			Session.g_bTryReceptionist = false;



		}



	}



	







	//TODO: determine if this is an international origination (how?)



	Session.g_oCallLegs[0].strIntlOrigFlag = "F" ;		



	Session.g_oCallLegs[0].strOrigRouteType = Session.g_oAPI.strOrigOnNet;



	Session.g_oCallLegs[0].nOrigCountryCode = Session.g_oAPI.nOrigCountryId ;



	Session.g_oCallLegs[0].strOrigCallingCode = Session.g_oAPI.strOrigCallingCode ;



	Session.g_oCallLegs[0].strOrigAreaCode = Session.g_oAPI.strOrigAreaCode ;







}







Session.g_oProxyList[0] = Session.s_strPrimaryPSX ;



if( Session.s_strBackupPSX.length > 0 ) {



	Session.g_oProxyList[1] = Session.s_strBackupPSX ;



}







if ( 302 == Session.g_nFinalStatus ) {



	Session.g_oCallLegs[1].strCallType = Session.g_oAPI.strCallType = Session.s_CT_FORWARD ;



	Session.g_oCallLegs[1].strOutdialDestNbr = Session.g_oAPI.strDestReceived;



}







if( 0 != Session.nReturnCode ) {



	switch (Session.nReturnCode)



	{



	case -3: 



			Server.logInfo("Subscriber disabled"); 



			Session.strErrorInfo = "Subscriber disabled";



			break ;



	case -4: 



			Server.logInfo("Service provider disabled"); 



			Session.strErrorInfo = "Service Provider disabled";



			break ;



	case -5: 



			Server.logInfo("Phone disabled"); 



			Session.strErrorInfo = "Phone disabled";



			break ;



	case -6: 	



			Server.logInfo("Restricted destination"); 



			Session.strErrorInfo = "Restricted destination";



			break ;



	case -7: 



			Server.logInfo("No caller id"); 



			Session.strErrorInfo = "No Caller ID";



			break ;



	case -8: 



			Server.logInfo("PSTN call not allowed for this class of service"); 



			Session.strErrorInfo = "PSTN not allowed";



			break ;



	case -9: 



			Server.logInfo("E911 call not allowed for this subscriber"); 



			Session.strErrorInfo = "E911 not enabled for user";



			break ;



	case -10: 



			Server.logInfo("Maximum streams reached for this access line"); 



			Session.strErrorInfo = "Max calls for Access Line";



			break ;



	case -11: 



			Server.logInfo("Maximum streams reached for this service provider"); 



			Session.strErrorInfo = "Max calls for Service Provider";



			break ;



	case -12: 



			Server.logInfo("Destination Unreachable") ;



			Session.strErrorInfo = "Destination Unreachable";



			break ;



	case -14: 



			Server.logInfo("Account expired") ;



			Session.strErrorInfo = "Account expired";



			break ;



	case -15: 



			Server.logInfo("PIN Locked") ;



			Session.strErrorInfo = "PIN locked";



			break ;



	case -17:



			Server.logInfo("Maximum external streams already in use");



			Session.strErrorInfo = "Max external streams";



			break;		



	case -19:



			Server.logInfo("Platform Owner does not support E-911 calls");



			Session.strErrorInfo = "E-911 not supported by Platform";



			break;



	case -99: 



			Server.logError("DB error during device registration"); 



			Session.strErrorInfo = "DB error";



			Session.bSNMPEvent = true;



			break ;



	default: 



			Server.logError("Unknown error : " + Session.nReturnCode ) ; 



			Session.strErrorInfo = "Return code " + Session.nReturnCode + " from authTerminate" ;



			Session.bSNMPEvent = true;



			break ;



	}	



}



]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=523 y=235 ?>
          <!--Send appropriate non-success response-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >g_oCallLegs[0].strCallId</call-id>
            <cseq >g_oCallLegs[0].strRemoteCSeq</cseq>
            <from >g_oCallLegs[0].strFrom</from>
            <status >strResponse</status>
            <to >g_oCallLegs[0].strTo</to>
            <via >g_oCallLegs[0].strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="9" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.enableEvents(true) ;]]></script>
          </scripts>
        </action>
        <action id="3" plug-in="Standard.EndSession.1" ><?xtml-editor x=779 y=427 ?></action>
        <action id="4" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=338 y=653 ?>
          <!--SUCCESS-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="nReturnCode"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[1].bUac = true ;



Session.g_oCallLegs[1].strOriginalTo = Session.g_oCallLegs[0].strOriginalTo ;







//use the final dest phone number that we pulled out in the OnInvite function,



// after stripping any route code digits.



var toDest;



if ( 302 == Session.g_nFinalStatus ) {



	toDest = Session.g_oAPI.strOrigDestReceived;



}



else {



	toDest = Session.g_oAPI.strDestReceived;



}



var to = new SipTo(Session.g_oCallLegs[1].strOriginalTo.toString());



to.url.user = toDest;



if ( null != to.displayName && undefined != to.displayName) {



	to.displayName = toDest;



}


Session.g_oCallLegs[1].strTo = Session.g_oCallLegs[1].strOriginalTo = to.encode();




Server.logInfo("Constructed B-leg TO header: " + Session.g_oCallLegs[1].strTo);











/* replace ip address and port in the A leg From header with our's before using on the B leg */



var from = new SipFrom( Session.g_oCallLegs[0].strFrom.toString() ) ;



from.url.host = Server.sipAddress ;



from.url.port = Server.sipPort ;







/* also, if the caller is in the subscriber's contact list, use that name for caller id */



if( Session.g_oAPI.bRemindMeCall ) {



	from.displayName = "REMINDER CALL" ;



}



else if( null != Session.g_oAPI.strCallingNumberContactName && Session.g_oAPI.strCallingNumberContactName.length > 0 ) {



	from.displayName = Session.g_oAPI.strCallingNumberContactName ;



}



Session.g_oCallLegs[1].strFrom = from.encode() ;







var sdpUsed = new Sdp( Session.g_oCallLegs[0].strRemoteSdp.toString() ) ;



Session.g_oCallLegs[0].strSdpToOfferB = Session.g_oCallLegs[0].strRemoteSdp;







/* force PCMU on IVR calls */







if( Session.s_CT_VMAIL_RETRIEVAL == Session.g_oAPI.strCallType ||



	Session.s_CT_VMAIL_DEPOSIT == Session.g_oAPI.strCallType ||



	"T" == Session.g_oAPI.strScreenCallFlag ) {



		Server.logInfo("Modifying SDP so PCMU is used for connection to MS") ;



		js_modifySdpForCodec( Session.g_oCallLegs[0].strSdpToOfferB, 0 ) ;



		sdpUsed = new Sdp( Session.g_oCallLegs[0].strSdpToOfferB.toString() ) ;



}



	 



else if( Session.g_oAccessLine.strCodec.length > 0 ) {



		



	/* if a specific codec was selected, try that */



	if( 0 == Clib.strcmpi( "PCMU", Session.g_oAccessLine.strCodec ) ) {



		Server.logInfo("Modifying SDP so PCMU is the preferred codec") ;



		js_modifySdpForCodec( Session.g_oCallLegs[0].strSdpToOfferB, 0 ) ;



		Session.g_oMS.strCodec = Session.g_oAccessLine.strCodec;



		sdpUsed = new Sdp( Session.g_oCallLegs[0].strSdpToOfferB.toString() ) ;



	}



	else if( 0 == Clib.strcmpi( "G729", Session.g_oAccessLine.strCodec ) ) {



		Server.logInfo("Modifying SDP so G729 is the preferred codec") ;



		js_modifySdpForCodec( Session.g_oCallLegs[0].strSdpToOfferB, 18 ) ;



		Session.g_oMS.strCodec = Session.g_oAccessLine.strCodec;



		sdpUsed = new Sdp( Session.g_oCallLegs[0].strSdpToOfferB.toString() ) ;



	}



}



Session.g_oCallLegs[1].strCallType = Session.g_oAPI.strCallType ;



if ( 302 == Session.g_nFinalStatus ) {



	Session.g_oCallLegs[1].strEnteredDestNbr = Session.g_oAPI.strOrigDestReceived ;



} 



else {



	Session.g_oCallLegs[1].strEnteredDestNbr = Session.g_oAPI.strDestReceived ;



}







/* save payload type */



if( sdpUsed.media.length > 0 && sdpUsed.media[0].rtpMaps.length > 0 ) {



	Session.g_oAPI.nRTPEncoding = Session.g_oCallLegs[1].nPayloadType = sdpUsed.media[0].rtpMaps[0].type ;



	if( null != Session.g_oCallLegs[1].nRtpClockRate ) {



		Session.g_oCallLegs[1].nRtpClockRate = sdpUsed.media[0].rtpMaps[0].clockRate ;



	}



	else {



		Session.g_oCallLegs[1].nRtpClockRate = 8000 ;



	}



}







Session.g_oCallLegs[1].strCallType = Session.g_oAPI.strCallType ;



Session.g_oCallLegs[1].strWiretapFlag = Session.g_oAccessLine.strWiretapFlag ;



Session.g_oCallLegs[1].strWiretapDest = Session.g_oAccessLine.strWiretapDest ;



Session.g_oCallLegs[1].strIntlDestFlag = Session.g_oAPI.strIntlDestFlag ;



Session.g_oCallLegs[1].nDestCountryId = Session.g_oAPI.nDestCountryId ;



Session.g_oCallLegs[1].strDestCallingCode = Session.g_oAPI.strDestCallingCode ;



Session.g_oCallLegs[1].strDestAreaCode = Session.g_oAPI.strDestAreaCode ;



Session.g_oCallLegs[1].strDestRouteType = Session.g_oAPI.strDestOnNet ;











Session.g_oAccessLine.strLanguage = Session.g_oAPI.strLanguage = Session.g_oAccessLine.oSub.strLanguage;







/* save some information in the API global object that we will need dest auth and cdr */



if ( 302 != Session.g_nFinalStatus ) {



	Session.g_oAPI.lServiceProviderId = Session.g_oAccessLine.oSub.lSPId ;



	Session.g_oSub.nPrimaryOfferingId = Session.g_oAccessLine.oSub.nPrimaryOfferingId;



	Session.g_oSub.nServiceId = Session.g_oVoipService.nSvcId ;



	Session.g_oSub.lSubscriberId = Session.g_oAccessLine.oSub.lSubscriberId ;



	Session.g_oSub.fPrepaidBalance = Session.g_oAPI.fAccountBalance ;



	Session.g_oAPI.strStrippedOrigNumber = Session.g_oAPI.strAniReceived; 



	Session.g_oAPI.lPhoneNumberId = Session.g_oAccessLine.lPhoneNumberId ;



	Session.g_oAPI.lWiretapOrderId = Session.g_oAccessLine.lWiretapOrderId ;



	Session.g_oAPI.strDestinationNumber = Session.g_oAPI.strDestReceived ;







	if ( !Session.g_oAPI.bPrepaid ) {



		Session.g_oAPI.strPostPaidFlag = "T" ;



	}



	else {



		Session.g_oAPI.strPostPaidFlag = "F";



	}	



	if (Session.g_oAPI.bRateCalls ) {



		Session.g_oAPI.strRateCallsFlag = "T";



	}



	else {



		Session.g_oAPI.strRateCallsFlag= "F";



	}



	if (Session.g_oAPI.bCreditLimit) {



		Session.g_oAPI.strCreditLimitFlag = "T";



	}



	else{



		Session.g_oAPI.strCreditLimitFlag = "F";



	}







	Session.g_oSub.nExpirationType = Session.g_oAccessLine.oSub.nExpirationType ;



	Session.g_oSub.nCurrencyId = Session.g_oAccessLine.oSub.nCurrencyId ;



	Session.g_oSub.strFirstCallFlag = Session.g_oAccessLine.oSub.strFirstCallFlag ;



	Session.g_oAPI.nRoundingSeconds = Session.g_oAPI.nRoundingSeconds ;



	Session.g_oSub.nRoundingThreshold =  Session.g_oAccessLine.oSub.nRoundingThresholdSeconds ;



	Session.g_oSub.nNumExpDays = Session.g_oAccessLine.oSub.nNumExpDays ;



	Session.g_oSub.fCallMarkupPercent = Session.g_oAccessLine.oSub.fCallMarkupPercent ;



	Session.g_oSub.nSecondsRemaining = Session.g_oVoipService.nMaxCallDuration ;



	Session.g_oAPI.strCustomerCode = Session.s_strCarrierName;



}







if( Session.g_oAPI.strRingTone.length > 0 ) {



	Session.g_oCallLegs[1].strAlertInfo = Session.g_oAPI.strRingTone ;



	Server.logInfo("Setting Alert-Info header on B leg to: " + Session.g_oCallLegs[1].strAlertInfo ) ;



} 















/* set flag to write CDR at session end */



if ( Session.g_oAPI.strCallType != Session.s_CT_IVR && !Session.g_bTryReceptionist ) {



	Session.g_oAPI.bWriteCDR = true ;



}















Server.enableEvents(true) ;]]></script>
          </scripts>
        </action>
        <action id="5" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=338 y=335 ?>
          <!--Redirect the call through a calea server-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >g_oCallLegs[0].strCallId</call-id>
            <contact >strContact</contact>
            <cseq >g_oCallLegs[0].strCSeq</cseq>
            <from >g_oCallLegs[0].strFrom</from>
            <status >"SIP/2.0 300 Multiple Choices"</status>
            <to >g_oCallLegs[0].strTo</to>
            <via >g_oCallLegs[0].strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="3" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[var s = new String(Session.g_oCallLegs[0].strTo) ;



if( -1 == s.indexOf("tag=") ) {



	Session.g_oCallLegs[0].strTo += ";tag=" ;



	Session.g_oCallLegs[0].strTo += Server.getUTCTime();



}







Server.enableEvents(true) ;]]></script>
          </scripts>
        </action>
        <action id="6" plug-in="Pactolus.SipNotify.1" ><?xtml-editor x=339 y=478 ?>
          <!--Event: calea-->
          <sip-notify xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oSipMsg.strCallId</call-id>
            <cseq >oSipMsg.strCSeq</cseq>
            <event >strCaleaEvent</event>
            <from >oSipMsg.strTo</from>
            <request-uri >oSipMsg.strRemoteUri</request-uri>
            <route >oSipMsg.strRoute</route>
            <to >oSipMsg.strFrom</to>
            <subscription-state >"active"</subscription-state>
          </sip-notify>
          <results >
            <result name="Default" link="7" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="7" plug-in="Pactolus.Sleep.1" ><?xtml-editor x=596 y=518 ?>
          <!--sleep configurable number of seconds to set up wiretap-->
          <sleep xmlns="urn:www.pactolus.com:xtml:application" duration="s_nCaleaDelay"/>
          <results >
            <result name="Default" link="4" stubbed="0"/>
          </results>
        </action>
        <action id="8" plug-in="Pactolus.UserFunction.1" ><?xtml-editor x=911 y=287 ?>
          <!--PACTOLUS_ps_c_adaptor-->
          <user-function xmlns="urn:www.pactolus.com:xtml:application" process="&quot;PACTOLUS_ps_c_adaptor&quot;" function="&quot;increment_event_counter&quot;" timeout="s_nShortTimeout" return="nReturnCode" async="0" >
            <parameter >"dbase-error"</parameter>
          </user-function>
          <results >
            <result name="Default" link="3" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[Server.logError("Log SNMP event returned: " + Session.nReturnCode + ", exit on " + Result.name);]]></script>
          </scripts>
        </action>
        <action id="9" plug-in="Pactolus.Branch.1" ><?xtml-editor x=812 y=189 ?>
          <results >
            <result name="Default" link="3" stubbed="0"/>
            <result name="SNMPEvent" link="8" stubbed="0" >bSNMPEvent == true</result>
          </results>
        </action>
        <action id="10" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=335 y=733 ?>
          <!--VoipGetDestCallingInfo-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;VoipGetDestCallingInfo&quot;" return="" external-function="1" library="lib_APISce.xml" >
            <parameter >g_oAPI</parameter>
            <parameter >g_oAccessLine</parameter>
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >g_oVoipService.nSvcId</parameter>
            <parameter >g_oAPI.nDialingPlanId</parameter>
          </function>
          <results >
            <result name="Default" link="11" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("The forwarding number from a 302 response is off-net.");



Session.g_bOffNet302 = true;







//reset the object values, since they would have been resset in the call to authTerm.



Session.g_oAccessLine = Session.oAccessLine_orig;



Session.g_oAPI = Session.oAPI_orig;



Session.g_oVoipService = Session.oVoipService_orig;]]></script>
          </scripts>
        </action>
        <action id="11" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=605 y=755 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("g_oCallLeg[0].strTo: " + Session.g_oCallLegs[0].strTo);







Session.g_oCallLegs[1].bUac = true ;



Session.g_oCallLegs[1].strOriginalTo = Session.g_oCallLegs[0].strTo ;







//use the final dest phone number that we pulled out in the OnInvite function,



// after stripping any route code digits.



var to = new SipTo(Session.g_oCallLegs[1].strOriginalTo.toString());



to.url.user = Session.g_oAPI.strOrigDestReceived;



if ( null != to.displayName && undefined != to.displayName) {



	to.displayName = Session.g_oAPI.strOrigDestReceived;



}


Session.g_oCallLegs[1].strTo = Session.g_oCallLegs[1].strOriginalTo = to.encode();



Server.logInfo("Constructed B-leg TO header: " + Session.g_oCallLegs[1].strTo);







/* replace ip address and port in the A leg From header with our's before using on the B leg */



var from = new SipFrom( Session.g_oCallLegs[0].strFrom.toString() ) ;



from.url.host = Server.sipAddress ;



from.url.port = Server.sipPort ;







Session.g_oCallLegs[1].strFrom = from.encode() ;







/* save payload type */



var sdpUsed = new Sdp( Session.g_oCallLegs[0].strRemoteSdp.toString() ) ;



if( sdpUsed.media.length > 0 && sdpUsed.media[0].rtpMaps.length > 0 ) {



	Session.g_oAPI.nRTPEncoding = Session.g_oCallLegs[1].nPayloadType = sdpUsed.media[0].rtpMaps[0].type ;



	if( null != Session.g_oCallLegs[1].nRtpClockRate ) {



		Session.g_oCallLegs[1].nRtpClockRate = sdpUsed.media[0].rtpMaps[0].clockRate ;



	}



	else {



		Session.g_oCallLegs[1].nRtpClockRate = 8000 ;



	}



}











Session.g_oCallLegs[1].strWiretapFlag = Session.g_oAccessLine.strWiretapFlag ;



Session.g_oCallLegs[1].strWiretapDest = Session.g_oAccessLine.strWiretapDest ;



Session.g_oCallLegs[1].strIntlDestFlag = Session.g_oAPI.strIntlDestFlag ;



Session.g_oCallLegs[1].nDestCountryId = Session.g_oAPI.nDestCountryId ;



Session.g_oCallLegs[1].strDestCallingCode = Session.g_oAPI.strDestCallingCode ;



Session.g_oCallLegs[1].strDestAreaCode = Session.g_oAPI.strDestAreaCode ;



Session.g_oCallLegs[1].strDestRouteType = Session.g_oAPI.strDestOnNet = Session.s_RT_OFF_NET ;



Session.g_oCallLegs[1].strEnteredDestNbr = Session.g_oAPI.strOrigDestReceived ;



Session.g_oAPI.strDestinationNumber = Session.g_oAPI.strDestReceived ;







Server.enableEvents(true) ;]]></script>
          </scripts>
        </action>
        <action id="12" plug-in="Pactolus.Branch.1" ><?xtml-editor x=221 y=222 ?>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="A leg connected" link="13" stubbed="0" >g_oCallLegs[0].bConnected == true</result>
          </results>
        </action>
        <action id="13" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=46 y=95 ?>
          <!--outdial from MS-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;MSOutdialParty&quot;" return="nReturnCode" external-function="1" library="lib_mediaserver.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oMS</parameter>
            <parameter >strContact</parameter>
          </function>
          <results >
            <result name="Default" link="3" stubbed="0"/>
            <result name="success" link="14" stubbed="0" >nReturnCode == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Request-uri: " + Session.g_oCallLegs[0].strRequestUri ) ;



Server.logInfo("remote uri: " + Session.g_oCallLegs[0].strRemoteUri ) ;



Session.g_oCallLegs[0].strRequestUri = Session.g_oCallLegs[0].strRemoteUri ;]]></script>
          </scripts>
        </action>
        <action id="14" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=257 y=59 ?>
          <!--please try your call later-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS.strConnectionId" endpoint="g_oMS.strEndPoint" callid="g_oMS.strCallId" repeat="1" timeout="s_nLongTimeout" ms-type="g_oMS.strType" returns="" start-play="1" interrupt="0" return-immediate="0" digit-map="" language="g_oAccessLine.oSub.strLanguage" digits="" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="index" >370</audio>
          </play>
          <results >
            <result name="Default" link="16" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="16" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=503 y=59 ?>
          <!--Hang up caller-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="4" handle-responses="1" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >g_oCallLegs[0].strCallId</call-id>
            <cseq >g_oCallLegs[0].strCSeq</cseq>
            <from >g_oCallLegs[0].strTo</from>
            <request-uri >g_oCallLegs[0].strRemoteUri</request-uri>
            <to >g_oCallLegs[0].strFrom</to>
            <additional-parameters >
              <error-info >strErrorInfo</error-info>
            </additional-parameters>
          </sip-bye>
          <results >
            <result name="Default" link="9" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
        </action>
      </actions>
    </function>
    <function name="ConnectToVoicemail" start="4" event="ConnectToVoicemail" returns="i4" >
      <parameters >
        <parameter name="bCallEstablished" type="boolean"/>
      </parameters>
      <local-vars >
        <var name="bConnected" type="boolean" >0</var>
        <var name="bAlegHungUp" type="boolean" >0</var>
        <var name="bTrue" type="boolean" >1</var>
        <var name="nFinalStatus" type="i4" >0</var>
      </local-vars>
      <actions >
        <action id="4" plug-in="Pactolus.Branch.1" ><?xtml-editor x=47 y=215 ?>
          <results >
            <result name="Default" link="1" stubbed="0"/>
            <result name="ms connected" link="5" stubbed="0" >g_oMS[0].bCurrentlyConnected == true</result>
          </results>
        </action>
        <action id="1" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=292 y=90 ?>
          <!--Connect to Voicemail-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ProxyCallWithoutRtpRelay&quot;" return="bConnected" external-function="1" library="lib_voip.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >300</parameter>
            <parameter >0</parameter>
            <parameter >0</parameter>
            <parameter >0</parameter>
            <parameter >0</parameter>
            <parameter >bTrue</parameter>
            <parameter >nFinalStatus</parameter>
            <parameter >bAlegHungUp</parameter>
          </function>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="connected" link="3" stubbed="0" >bConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* construct headers on the Called Party leg */



//INVITE sip:10.10.100.127:5060;target=pcs_vmail_deposit;vmail_account_id=7632 SIP/2.0



Session.g_oCallLegs[1].strRemoteUri = "sip:" ;



Session.g_oCallLegs[1].strRemoteUri += Session.g_oAPI.strDestReceived  ;



Session.g_oCallLegs[1].strRemoteUri += "@" ;



Session.g_oCallLegs[1].strRemoteUri += Session.s_strNiuAddress ;



if( Session.s_CT_VMAIL_RETRIEVAL == Session.g_oAPI.strCallType ) {



	Session.g_oCallLegs[1].strRemoteUri += ";target=pcs_vmail_retrieve" ;



}



else { 



	Session.g_oCallLegs[1].strRemoteUri += ";target=pcs_vmail_deposit" ;



}



if ( /* 0 < Session.g_oAPI.nDeptId && */ 0 < Session.g_oAPI.lVoiceMailId ) {



	if( 0 < Session.g_oAccessLine.lAccessLineId ) {



		Session.g_oCallLegs[1].strRemoteUri += ";access_line_id=" ;



		Session.g_oCallLegs[1].strRemoteUri += Session.g_oAccessLine.lAccessLineId;	



	}



	Session.g_oCallLegs[1].strRemoteUri += 	";vmail_account_id=";



	Session.g_oCallLegs[1].strRemoteUri += Session.g_oAPI.lVoiceMailId;



}



if( Session.s_CT_VMAIL_RETRIEVAL == Session.g_oAPI.strCallType ) {



	if( 0 != Session.g_oAPI.lVoiceMailId && 0 != Session.g_oAccessLine.lAccessLineId ) {



		Session.g_oCallLegs[1].strRemoteUri += ";vmail_account_id=" ;	



		Session.g_oCallLegs[1].strRemoteUri += Session.g_oAPI.lVoiceMailId ;



		Session.g_oCallLegs[1].strRemoteUri += ";access_line_id=" ;



		Session.g_oCallLegs[1].strRemoteUri += Session.g_oAccessLine.lAccessLineId;



	}



	else {



		Session.g_oCallLegs[1].strRemoteUri += ";access_line_id=0" ;



	}



}







Session.g_oCallLegs[1].strRequestUri = Session.g_oCallLegs[1].strRemoteUri ;







/* let the library assign a callid and cseq */



Session.g_oCallLegs[1].strCallId = "" ;



Session.g_oCallLegs[1].strCSeq = "" ;



Session.g_oCallLegs[1].strFrom = Session.g_oCallLegs[0].strFrom ;



Session.g_oCallLegs[1].strTo = Session.g_oCallLegs[0].strOriginalTo ;



Session.g_oCallLegs[1].strRoute = "" ;



Session.g_oCallLegs[1].bUac = true ;







Session.g_oCallLegs[1].strOutdialDestNbr =  Session.g_oAPI.strDestReceived ;



Session.g_oCallLegs[1].strDestRouteType = Session.s_RT_ON_NET ;



Session.g_oAPI.strIntlDestFlag = "F" ;







Session.g_oCallLegs[0].strContact = Session.g_oCallLegs[1].strContact = Session.s_strLocalUri ;







Session.g_oCallLegs[1].lTimeStart = Server.getUTCTime() ;







if( Session.g_oAPI.dtg.length > 0 ) {



	var newFrom = new SipFrom( Session.g_oCallLegs[1].strFrom ) ;



	newFrom.url.otg = "" ;



	Session.g_oCallLegs[1].strFrom = newFrom.encode() ;



	Session.g_oCallLegs[1].strFrom += ";otg=";



	Session.g_oCallLegs[1].strFrom += Session.g_oAPI.dtg ;



}







//clear out the rates, in case this is a case where all routes were exhausted



js_initRATE(Session.g_oRate);







Session.g_STATE = Session.s_STATE_CONNECTING_TO_CALLED;



]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Standard.EndSession.1" ><?xtml-editor x=535 y=76 ?>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* failed to connect to all routes and to voicemail, which should never happen */



Server.logError("Failed to connect to all routes and to voicemail") ;



Session.g_oCallLegs[1].nTerminationReason = Session.g_oAPI.nCallTerminationReason = Session.s_TR_SYSTEM_ERROR ;]]></script>
          </scripts>
        </action>
        <action id="3" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=536 y=175 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value="0"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* it has now become a voicemail deposit call */



Session.g_oAPI.strCallType = Session.g_oCallLegs[1].strCallType = Session.s_CT_VMAIL_DEPOSIT ;







Session.g_oCallLegs[1].lTimeAnswered = Server.getUTCTime() ;







/* set signaling address and port */



var uri = new SipRequestUri( Session.g_oCallLegs[1].strRemoteUri.toString() ) ;



Session.g_oCallLegs[1].strRemoteSignalingAddress = uri.url.host ;



if( null != uri.url.port ) {



	Session.g_oCallLegs[1].nRemoteSignalingPort = uri.url.port ;



}











Session.g_oCallLegs[1].bConnected = true ;



Session.g_oCallLegs[0].bConnected = true ;







Session.g_STATE = Session.s_STATE_CONNECTED_TO_CALLED ;











Server.enableEvents(true) ;



]]></script>
          </scripts>
        </action>
        <action id="5" plug-in="Pactolus.MGCPDelete.1" ><?xtml-editor x=293 y=250 ?>
          <dlcx xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[0].strConnectionId" endpoint="g_oMS[0].strEndPoint" callid="g_oMS[0].strCallId" timeout="5" returns="" ms-type="&quot;PCS&quot;" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </dlcx>
          <results >
            <result name="Default" link="1" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
      </actions>
    </function>
    <function name="ConnectToRejectMsg" start="9" event="ConnectToRejectMsg" returns="i4" >
      <parameters >
        <parameter name="nMsgType" type="i4"/>
      </parameters>
      <local-vars >
        <var name="nReturnCode" type="i4" >0</var>
        <var name="nAudioClip" type="i4" >0</var>
        <var name="strContact" type="string" ></var>
      </local-vars>
      <actions >
        <action id="9" plug-in="Pactolus.Branch.1" ><?xtml-editor x=20 y=20 ?>
          <results >
            <result name="Default" link="8" stubbed="0"/>
            <result name="ms connected" link="10" stubbed="0" >g_oMS[0].bCurrentlyConnected == true</result>
          </results>
        </action>
        <action id="1" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=134 y=279 ?>
          <!--DirectCallerToMS-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;DirectCallerToMS&quot;" return="nReturnCode" external-function="1" library="lib_mediaserver.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oMS</parameter>
          </function>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="success" link="4" stubbed="0" >nReturnCode == 0</result>
          </results>
        </action>
        <action id="2" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=447 y=231 ?>
          <!--503 Service Unavailable-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >g_oCallLegs[0].strCallId</call-id>
            <contact >s_strLocalUri</contact>
            <cseq >g_oCallLegs[0].strCSeq</cseq>
            <from >g_oCallLegs[0].strFrom</from>
            <status >"SIP/2.0 503 Service Unavailable"</status>
            <to >g_oCallLegs[0].strTo</to>
            <via >g_oCallLegs[0].strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="3" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="3" plug-in="Standard.EndSession.1" ><?xtml-editor x=704 y=254 ?></action>
        <action id="4" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=362 y=392 ?>
          <!--Play reject msg-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS.strConnectionId" endpoint="g_oMS.strEndPoint" callid="g_oMS.strCallId" repeat="1" timeout="s_nLongTimeout" ms-type="g_oMS.strType" returns="" start-play="1" interrupt="0" return-immediate="0" digit-map="" language="g_oAccessLine.oSub.strLanguage" digits="" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="index" >nAudioClip</audio>
            <audio type="index" >322</audio>
          </play>
          <results >
            <result name="Default" link="6" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if( 1 == Session.g_oAPI.nRejectMsgType ) {



	Session.nAudioClip = 2010 ;



}



else if( 2 == Session.g_oAPI.nRejectMsgType ) {



	Session.nAudioClip = 2011 ;



}]]></script>
          </scripts>
        </action>
        <action id="6" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=660 y=434 ?>
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="4" handle-responses="1" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >g_oCallLegs[0].strCallId</call-id>
            <cseq >g_oCallLegs[0].strCSeq</cseq>
            <from >g_oCallLegs[0].strTo</from>
            <request-uri >g_oCallLegs[0].strRemoteUri</request-uri>
            <to >g_oCallLegs[0].strFrom</to>
          </sip-bye>
          <results >
            <result name="Default" link="3" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="7" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=68 y=427 ?>
          <!--outdial from MS-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;MSOutdialParty&quot;" return="nReturnCode" external-function="1" library="lib_mediaserver.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oMS</parameter>
            <parameter >strContact</parameter>
          </function>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="success" link="4" stubbed="0" >nReturnCode == 0</result>
          </results>
        </action>
        <action id="8" plug-in="Pactolus.Branch.1" ><?xtml-editor x=35 y=166 ?>
          <results >
            <result name="Default" link="1" stubbed="0"/>
            <result name="A leg connected" link="7" stubbed="0" >g_oCallLegs[0].bConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[js_initMS( Session.g_oMS, Session.s_strMsType ) ;



Session.g_oCallLegs[0].strContent = Session.g_oCallLegs[0].strRemoteSdp; 



Session.g_oMS.strCodec = "PCMU" ;







Session.g_STATE = Session.s_STATE_REJECTING_CALL;



]]></script>
          </scripts>
        </action>
        <action id="10" plug-in="Pactolus.MGCPDelete.1" ><?xtml-editor x=240 y=21 ?>
          <dlcx xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[0].strConnectionId" endpoint="g_oMS[0].strEndPoint" callid="g_oMS[0].strCallId" timeout="5" returns="" ms-type="&quot;PCS&quot;" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </dlcx>
          <results >
            <result name="Default" link="8" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
      </actions>
    </function>
    <function name="ConnectToSubscriber" start="24" event="ConnectToSubscriber" returns="i4" >
      <parameters >
        <parameter name="bCallEstablished" type="boolean" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="idx" type="i4" >0</var>
        <var name="bFalse" type="boolean" >0</var>
        <var name="bAlegHungUp" type="boolean" >0</var>
        <var name="bFailedAllRoutes" type="boolean" >0</var>
        <var name="bConnected" type="boolean" >0</var>
        <var name="SUCCESS" type="i4" >0</var>
        <var name="FAILURE" type="i4" >-1</var>
        <var name="bTrue" type="boolean" >1</var>
        <var name="strToHeaderForInvite" type="string" ></var>
        <var name="strEventType" type="string" ></var>
        <var name="iProxyId" type="i4" >0</var>
        <var name="bTryAgain" type="boolean" >0</var>
        <var name="nSessionTimerA" type="i4" >0</var>
        <var name="nSessionTimerB" type="i4" >0</var>
        <var name="nSessionTimer" type="i4" >0</var>
        <var name="bRateDestination" type="boolean" >0</var>
        <var name="nReturnCode" type="i4" >0</var>
        <var name="strCallerIdDisplay" type="string" ></var>
        <var name="nCallingNumberLength" type="i4" >0</var>
        <var name="bLookupCallerId" type="boolean" >0</var>
        <var name="strDestReceived" type="string" ></var>
        <var name="strOutdialDest" type="string" ></var>
      </local-vars>
      <actions >
        <action id="24" plug-in="Pactolus.Branch.1" ><?xtml-editor x=4 y=23 ?>
          <results >
            <result name="Default" link="8" stubbed="0"/>
            <result name="lookup caller id " link="25" stubbed="0" >s_bCallerIdLookup == true



AND nCallingNumberLength == 10</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if( Session.s_bCallerIdLookup && 10 == Session.g_oCallLegs[0].strCallingNumber.length ) {







	var s = new String( Session.g_oCallLegs[0].strAnonymity ) ;



	if( -1 == s.indexOf("uri") && -1 == s.indexOf("full") && -1 == s.indexOf("name" ) ) {



		Session.bLookupCallerId = true ;



	}



}



Session.nCallingNumberLength = Session.g_oCallLegs[0].strCallingNumber.length;



Server.logInfo("ConnectToSubscriber: OrigOnNet = " + Session.g_oAPI.strOrigOnNet);



]]></script>
          </scripts>
        </action>
        <action id="1" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=861 y=267 ?>
          <!--ProxyCallWithoutRtpRelay-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ProxyCallWithoutRtpRelay&quot;" return="bConnected" external-function="1" library="lib_voip.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >g_oAPI.nRingNoAnswerTimeout</parameter>
            <parameter >nSessionTimerA</parameter>
            <parameter >g_oCallLegs[0].bRefresher</parameter>
            <parameter >nSessionTimerB</parameter>
            <parameter >g_oCallLegs[1].bRefresher</parameter>
            <parameter >bFalse</parameter>
            <parameter >g_nFinalStatus</parameter>
            <parameter >bAlegHungUp</parameter>
          </function>
          <results >
            <result name="Default" link="7" stubbed="0"/>
            <result name="connected" link="22" stubbed="0" >bConnected == true</result>
            <result name="Caller hung up" link="2" stubbed="0" >bAlegHungUp == true</result>
            <result name="PSX Timeout" link="16" stubbed="0" >g_nFinalStatus == 0



AND g_oAPI.oRoute[idx].strDestOnNet != "T"</result>
            <result name="302 final response" link="31" stubbed="0" >g_nFinalStatus == 302</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if ( 302 == Session.g_nFinalStatus ) {



	Session.g_oCallLegs[1].lTimeStart = Session.g_oCallLegs[1].lOrigTimeStart;



}



else {



	Session.g_oCallLegs[1].lTimeStart = Server.getUTCTime() ;



}







/* Reset value in case this is not our first attempt at the call */



Session.g_nFinalStatus = 0 ;







/* We want to receive session timer re-INVITEs from both A and B */



if( -1 != Session.g_oCallLegs[0].strSupported.toString().indexOf("timer") ) {



	Session.nSessionTimerA = Clib.atoi( Session.g_oCallLegs[0].strSessionExpires ) ;



	if( 0 == Session.nSessionTimerA ) {



	



		/* a reasonable default if A didn't specify an interval */



		Session.nSessionTimerA = Session.g_oCallLegs[0].strSessionExpires = 1800 ; 	



	}



	Session.g_oCallLegs[0].bRefresher = false ;



}



else {



	Session.nSessionTimerA = 0 ;



	Session.g_oCallLegs[0].bRefresher = false ;



}



	



/* on the B leg, we want to receive them */



Session.nSessionTimerB = Session.nSessionTimerA ;



Session.g_oCallLegs[1].bRefresher = false ;



]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Standard.EndSession.1" ><?xtml-editor x=872 y=474 ?>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[



/* set actual phone number used */



if( Session.g_oAPI.oRoute[Session.idx].strPhoneNumber.length > 0 ) {



	Session.g_oCallLegs[1].strOutdialDestNbr = Session.g_oAPI.oRoute[Session.idx].strPhoneNumber ;



	Server.logInfo("Setting g_oCallLegs[1].strOutdialDestNbr to route phone number: " + Session.g_oAPI.oRoute[Session.idx].strPhoneNumber);



}



else if ( !Session.g_bTryReceptionist ){



	Session.g_oCallLegs[1].strOutdialDestNbr =  Session.g_oAPI.strDestReceived ;



	Server.logInfo("Setting g_oCallLegs[1].strOutdialDestNbr to g_oAPI.strDestReceived: " + Session.g_oAPI.strDestReceived);



}











/* set route type */



if( "T" == Session.g_oAPI.oRoute[Session.idx].strDestOnNet ) {



	Session.g_oCallLegs[1].strDestRouteType = Session.s_RT_ON_NET ;



}



else {



	Session.g_oCallLegs[1].strDestRouteType = Session.s_RT_OFF_NET ;



}







/* set international destination flag */



if( "T" == Session.g_oAPI.oRoute[Session.idx].strDestIntl ) {



	Session.g_oAPI.strIntlDestFlag = "T" ;



}



else {



	Session.g_oAPI.strIntlDestFlag = "F" ;



}







/* set destination trunk group, if available */



if( !Session.s_bFalseAnswerDetection ) {



	var uri = new SipRequestUri( Session.g_oCallLegs[1].strRemoteUri.toString() ) ;



	if( null != uri.url.dtg ) {



		Session.g_oCallLegs[1].strDestTrunkGroup = uri.url.dtg ;



	}







	/* set signaling address and port */



	Session.g_oCallLegs[1].strRemoteSignalingAddress = uri.url.host ;



	if( null != uri.url.port ) {



		Session.g_oCallLegs[1].nRemoteSignalingPort = uri.url.port ;



	}







	Session.g_oCallLegs[1].nTerminationReason = Session.g_oAPI.nCallTerminationReason = Session.s_TR_NO_ANSWER ;



}



Server.enableEvents(true) ;







]]></script>
          </scripts>
        </action>
        <action id="3" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1892 y=355 ?>
          <!--success-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bTrue"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[1].lTimeAnswered = Server.getUTCTime() ;







Session.g_oCallLegs[1].bConnected = true ;



Session.g_oCallLegs[0].bConnected = true ;







/* set actual phone number used 



if( Session.g_oAPI.oRoute[Session.idx].strPhoneNumber.length > 0 ) {



	Session.g_oCallLegs[1].strOutdialDestNbr = Session.g_oAPI.oRoute[Session.idx].strPhoneNumber ;



}



else if ( !Session.g_bTryReceptionist ) {



	Session.g_oCallLegs[1].strOutdialDestNbr =  Session.g_oAPI.strDestReceived ;



}*/







/* set route type */



if( "T" == Session.g_oAPI.oRoute[Session.idx].strDestOnNet ) {



	Session.g_oCallLegs[1].strDestRouteType = Session.s_RT_ON_NET ;



}



else {



	Session.g_oCallLegs[1].strDestRouteType = Session.s_RT_OFF_NET ;



}







/* set international destination flag */



if( "T" == Session.g_oAPI.oRoute[Session.idx].strDestIntl ) {



	Session.g_oAPI.strIntlDestFlag = "T" ;



}



else {



	Session.g_oAPI.strIntlDestFlag = "F" ;



}







/* set destination trunk group, if available */



var uri = new SipRequestUri( Session.g_oCallLegs[1].strRemoteUri.toString() ) ;



if( null != uri.url.dtg ) {



	Session.g_oCallLegs[1].strDestTrunkGroup = uri.url.dtg ;



}







/* set signaling address and port */



Session.g_oCallLegs[1].strRemoteSignalingAddress = Session.g_oAPI.strGWIPEgress = uri.url.host ;



if( null != uri.url.port ) {



	Session.g_oCallLegs[1].nRemoteSignalingPort = Session.g_oAPI.nGWPortEgress = uri.url.port ;



}



else {



	Session.g_oCallLegs[1].nRemoteSignalingPort = Session.g_oAPI.nGWPortEgress = 5060 ;



}







Session.g_oCallLegs[1].strRequestURI = Session.g_oCallLegs[1].strRemoteUri ;







Server.enableEvents(true) ;







Session.g_STATE = Session.s_STATE_CONNECTED_TO_CALLED ;]]></script>
          </scripts>
        </action>
        <action id="5" plug-in="Pactolus.Branch.1" ><?xtml-editor x=396 y=147 ?>
          <!--set up values for outdial-->
          <results >
            <result name="Default" link="28" stubbed="0"/>
            <result name="no more routes" link="6" stubbed="0" >bFailedAllRoutes == true



AND g_oAPI.strCallType != s_CT_IVR</result>
            <result name="route to IVR" link="26" stubbed="0" >g_oAPI.strCallType == s_CT_IVR



AND g_bTryReceptionist == false</result>
            <result name="rate this call" link="21" stubbed="0" >bRateDestination == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bFailedAllRoutes = false ;



if( Session.idx >= Session.g_oAPI.oRoute.length && 302 != Session.g_nFinalStatus ) {



	



	/* check if this is a case where we want to go to the alternate PSTN number */



	if( 1 != Session.idx || 



		408 != Session.g_nFinalStatus ||



		0 == Session.g_oAccessLine.strAltPstnNumber.length ||



		!(null != Session.g_oAPI.oRoute[0].strContact && Session.g_oAPI.oRoute[0].strContact.length > 0) ) {



	



		if ( Session.g_bTryReceptionist ) {



			Session.g_bTryReceptionist = false;



			Session.bFailedAllRoutes = true;



			return;



		}



		else{



			Server.logInfo("Exhausted all routes") ;



			Session.bFailedAllRoutes = true ;



			Session.g_oCallLegs[1].lTimeAnswered = 0 ;



			return ;		



		}



	}



	



	/* append alternate PSTN number */



	Session.g_oAPI.oRoute[1].strDestOnNet = "F" ;



	Session.g_oAPI.oRoute[1].strPhoneNumber = Session.g_oAccessLine.strAltPstnNumber ;



	Server.logInfo("Sending call to alternate PSTN Number: " + Session.g_oAPI.oRoute[1].strPhoneNumber ) ;



}



Session.g_oCallLegs[1].bAttemptedToOutdial = true; 



Session.g_oCallLegs[1].bCurrentlyDialing = true ;	







/* let library create a unique callid and cseq for us */



Session.g_oCallLegs[1].strCallId = "" ;	



Session.g_oCallLegs[1].strCSeq = "" ;







//in prep for constructing PAI, if necessary.

var sTo = new String( Session.g_oCallLegs[1].strTo ) ;
var sPAI = new String( Session.g_oCallLegs[0].strTo) ;
var sFrom = new String( Session.g_oCallLegs[1].strFrom ) ;

var to = new SipTo(sTo);
var PAI = new SipTo(sPAI);
var from = new SipFrom(sFrom);

if ( null != Session.g_oAPI.strAniToSend && Session.g_oAPI.strAniToSend.length > 0 ) {
	Server.logInfo("Found preferred ANI to send. May be using it for PAI:" + Session.g_oAPI.strAniToSend);
	from.url.user = Session.g_oAPI.strAniToSend;
} 





if( !Session.g_bOffNet302 &&



	(null != Session.g_oAPI.oRoute[Session.idx].strContact && Session.g_oAPI.oRoute[Session.idx].strContact.length > 0)  ) {







	/* route is specified in terms of a Contact and, optionally, Record-Route header */



	js_calculate_uri_and_route( true, "SIP/2.0", Session.g_oCallLegs[0].strFrom.toString(), 



		Session.g_oAPI.oRoute[Session.idx].strContact.toString(), 



		Session.g_oAPI.oRoute[Session.idx].strRecordRoute.toString(), 



		Session.g_oCallLegs[1].strRemoteUri, 



		Session.g_oCallLegs[1].strRoute ) ;



		



	if( !Session.g_oAPI.bRelayMedia ) {



		Session.g_oCallLegs[1].strRemoteUri += ";route_sip_only" ;



	}



	



	/* if this is a hunt group call, set the subscriber id and phone number id equal to that of the target phone */



	if ( Session.s_CT_HUNT_GROUP == Session.g_oAPI.strCallType ){



		Session.g_oSub.lSubscriberId = Session.g_oAPI.oRoute[Session.nIdx].lSubscriberId;



		Session.g_oAPI.lPhoneNumberId = Session.g_oAPI.oRoute[Session.nIdx].lPhoneNumberId;



	}

		



	Server.logInfo("Attempting route #" + (Session.idx+1) + " Request-URI: " + Session.g_oCallLegs[1].strRemoteUri ) ;



	Server.logInfo("Attempting route #" + (Session.idx+1) + "      Route: " + Session.g_oCallLegs[1].strRoute ) ;



	



}



else {







	/* perform number translations for dialing */



	var bOnNet = ("T" == Session.g_oAPI.oRoute[Session.idx].strDestOnNet ? true : false );



	if ( 302 == Session.g_nFinalStatus ) {



		bOnNet = (Session.s_RT_ON_NET == Session.g_oCallLegs[1].strDestRouteType ? true : false );



		Session.g_oCallLegs[1].strOutdialDestNbr = js_translate_destination_broadband( Session.s_strCarrierName, 



			Session.g_oCallLegs[1].strOutdialDestNbr, Session.g_oAPI.nOrigCountryId, bOnNet, Session.g_oAPI.strAniReceived ) ;



	}



	else{



		Session.g_oCallLegs[1].strOutdialDestNbr = js_translate_destination_broadband( Session.s_strCarrierName, 



			Session.g_oAPI.oRoute[Session.idx].strPhoneNumber, Session.g_oAPI.nOrigCountryId, bOnNet, Session.g_oAPI.strAniReceived ) ;



	}











	Server.logInfo("Primary Route Code: " + Session.g_oAPI.strPrimaryRouteCode) ;



	



	Session.g_oCallLegs[1].strOutdialDestNbrNoRouteCode = Session.g_oCallLegs[1].strOutdialDestNbr;



			



	if(Session.g_oAPI.strPrimaryRouteCode != "" && Session.g_oAPI.strPrimaryRouteCode != undefined) {



	



		Session.g_oCallLegs[1].strOutdialDestNbr = Session.g_oAPI.strPrimaryRouteCode + "" + Session.g_oCallLegs[1].strOutdialDestNbr;



	}			







	Session.g_oCallLegs[1].strRemoteUri = "sip:" + Session.g_oCallLegs[1].strOutdialDestNbr ;



	Session.g_oCallLegs[1].strRemoteUri += "@" ;



	Session.g_oCallLegs[1].strRemoteUri += Session.g_oProxyList[Session.iProxyId] ;



	Session.g_oCallLegs[1].strRoute = "" ;



	Server.logInfo("Attempting route #" + (Session.idx+1) + " Request-URI: " + Session.g_oCallLegs[1].strRemoteUri ) ;



	Server.logInfo("Attempting route #" + (Session.idx+1) + " To: " + Session.g_oCallLegs[1].strTo ) ;



			



	/* lib functions require this */



	Session.g_oCallLegs[1].strContent = Session.g_oCallLegs[0].strRemoteSdp; 



	Session.g_oCallLegs[1].strRequestUri = Session.g_oCallLegs[1].strRemoteUri ;







}







//If the call is being delivered to a target other than the sub's registered device,



// insert a P-Asserted-Identity header to identify the call route as being iniated by the



// subscriber.



if ( "F" == Session.g_oAPI.oRoute[Session.idx].strDestOnNet  )

{
	if ( PAI.url.user.length >= 7 ) {
	// then use the original PSTN To[0] value since it will be authenticated on the Nextone
		var pai = js_translate_calling_number_broadband( Session.s_strCarrierName, js_getLeadingDigits(PAI.url.user) ) ;
	} else {
	// from will have been set to the strANIToSend already so use it for corp dept extension calls.
		var pai = js_translate_calling_number_broadband( Session.s_strCarrierName, js_getLeadingDigits(from.url.user) ) ;
	}

	var diversion = js_translate_destination_broadband( Session.s_strCarrierName,

 			js_getLeadingDigits(to.url.user), 

 			Session.g_oAPI.nOrigCountryId,

 			bOnNet, 

 		 	Session.g_oAPI.strAniReceived ) ;


 	Session.g_oCallLegs[1].strPAssertedIdentity = "<sip:" + pai + "@" + to.url.host + ">";

 	Session.g_oCallLegs[1].strDiversion = "<sip:" + diversion + "@" + from.url.host + ">";

 	Server.logInfo("PAI: " + Session.g_oCallLegs[1].strPAssertedIdentity);

	Server.logInfo("Diversion: " + Session.g_oCallLegs[1].strDiversion);

}



else { //clear out any previous value



	Session.g_oCallLegs[1].strPAssertedIdentity = "";



}











Session.g_oCallLegs[1].strAnonymity = Session.g_oCallLegs[0].strAnonymity ;



//Session.g_oCallLegs[0].strTo = Session.g_oCallLegs[1].strTo = Session.strToHeaderForInvite ;







/* set otg header to the dtg we received on the INVITE */



if( Session.g_oAPI.dtg.length > 0 ) {



	var newFrom = new SipFrom( Session.g_oCallLegs[1].strFrom ) ;



	newFrom.url.otg = Session.g_oAPI.dtg ;



	Session.g_oCallLegs[1].strFrom = newFrom.encode() ;



}







/* rate this call ?*/



Session.bRateDestination = false ;







if( "F" == Session.g_oAPI.oRoute[Session.idx].strDestOnNet && Session.g_oAPI.bRateCalls ) {



	Session.bRateDestination = true ;



}







if( Session.g_oAPI.bRemindMeCall ) {



	Session.g_oSub.nSecondsAvailable = 0 ;



}







/* update the application state */



Session.g_STATE = Session.s_STATE_CONNECTING_TO_CALLED ;















Session.g_oCallLegs[0].strContact = Session.g_oCallLegs[1].strContact = "<sip:" + Server.sipAddress + ":" + Server.sipPort + ">" ;







]]></script>
          </scripts>
        </action>
        <action id="6" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=455 y=642 ?>
          <!--failure-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bFalse"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if ( 486 == Session.g_nFinalStatus || 600 == Session.g_nFinalStatus ) {



	Session.g_oCallLegs[1].bTerminationReason = Session.g_oAPI.nCallTerminationReason = Session.s_TR_BUSY ;



}











/* set actual phone number used */



if( Session.g_oAPI.oRoute[Session.idx].strPhoneNumber.length > 0 ) {



	Session.g_oCallLegs[1].strOutdialDestNbr = Session.g_oAPI.oRoute[Session.idx].strPhoneNumber ;



}



else if ( !Session.g_bTryReceptionist ){



	Session.g_oCallLegs[1].strOutdialDestNbr =  Session.g_oAPI.strDestReceived ;



}







/* set route type */



if( "T" == Session.g_oAPI.oRoute[Session.idx].strDestOnNet ) {



	Session.g_oCallLegs[1].strDestRouteType = Session.s_RT_ON_NET ;



}



else {



	Session.g_oCallLegs[1].strDestRouteType = Session.s_RT_OFF_NET ;



}







/* set international destination flag */



if( "T" == Session.g_oAPI.oRoute[Session.idx].strDestIntl ) {



	Session.g_oAPI.strIntlDestFlag = "T" ;



}



else {



	Session.g_oAPI.strIntlDestFlag = "F" ;



}











if ( 0 < Session.g_oCallLegs[1].strRemoteUri.length ) {



	/* set destination trunk group, if available */



	var uri = new SipRequestUri( Session.g_oCallLegs[1].strRemoteUri.toString() ) ;



	if( null != uri.url.dtg ) {



		Session.g_oCallLegs[1].strDestTrunkGroup = uri.url.dtg ;



	}







	/* set signaling address and port */



	Session.g_oCallLegs[1].strRemoteSignalingAddress = uri.url.host ;



	if( null != uri.url.port ) {



		Session.g_oCallLegs[1].nRemoteSignalingPort = uri.url.port ;



	}



}



	



]]></script>
          </scripts>
        </action>
        <action id="7" plug-in="Pactolus.Branch.1" ><?xtml-editor x=840 y=46 ?>
          <!--increment route-->
          <results >
            <result name="Default" link="5" stubbed="0"/>
            <result name="rollback reservation" link="34" stubbed="0" >bRateDestination == true



AND g_oSub.lBillingSessionId != 0



AND g_oSub.lReservationId != 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.idx++ ;







]]></script>
          </scripts>
        </action>
        <action id="8" plug-in="Pactolus.Branch.1" ><?xtml-editor x=99 y=313 ?>
          <results >
            <result name="Default" link="5" stubbed="0"/>
            <result name="sim ring, false answer detect" link="35" stubbed="0" >g_oAPI.nHuntType == s_HT_SIMULTANEOUS_RING



AND g_oAPI.strScreenCallFlag == "F"



AND g_oCallLegs[0].bConnected == false



AND s_bFalseAnswerDetection == true</result>
            <result name="simultaneous ring" link="15" stubbed="0" >g_oAPI.nHuntType == s_HT_SIMULTANEOUS_RING



AND g_oAPI.strScreenCallFlag == "F"



AND g_oCallLegs[0].bConnected == false</result>
            <result name="sim ring, screen call" link="9" stubbed="0" >g_oAPI.nHuntType == s_HT_SIMULTANEOUS_RING



AND (g_oAPI.strScreenCallFlag == "T"



OR g_oCallLegs[0].bConnected == true)</result>
          </results>
        </action>
        <action id="9" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=92 y=910 ?>
          <!--SimultaneousRing-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;SimultaneousRing&quot;" return="bConnected" external-function="1" library="lib_voip.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >g_oSimRingCallLegs</parameter>
            <parameter >g_oAPI.nRingNoAnswerTimeout</parameter>
            <parameter >nSessionTimerA</parameter>
            <parameter >g_oCallLegs[0].bRefresher</parameter>
            <parameter >nSessionTimerB</parameter>
            <parameter >g_oCallLegs[1].bRefresher</parameter>
            <parameter >bAlegHungUp</parameter>
            <parameter >g_nFinalStatus</parameter>
            <parameter >g_oAPI.strAniReceived</parameter>
          </function>
          <results >
            <result name="Default" link="13" stubbed="0"/>
            <result name="connected" link="33" stubbed="0" >bConnected == true</result>
            <result name="Proxy timeout" link="17" stubbed="0" >g_nFinalStatus == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* initialize the outbound call leg.  Most of the info will be filled in once a specific destination answers */







//set the to var before we reinialize the b-leg.


var sTo = new String( Session.g_oCallLegs[1].strTo ) ;
var sPAI = new String( Session.g_oCallLegs[0].strTo) ;
var sFrom = new String( Session.g_oCallLegs[1].strFrom ) ;

var to = new SipTo(sTo);
var PAI = new SipTo(sPAI);
var from = new SipFrom(sFrom);

if ( null != Session.g_oAPI.strAniToSend && Session.g_oAPI.strAniToSend.length > 0 ) {
	Server.logInfo("Found preferred ANI to send. May be using it for PAI:" + Session.g_oAPI.strAniToSend);
	from.url.user = Session.g_oAPI.strAniToSend;
} 


js_initVoipCallLeg( Session.g_oCallLegs[1] ) ;

Session.g_oCallLegs[1].bAttemptedToOutdial = true; 

Session.g_oCallLegs[1].bCurrentlyDialing = true ;	

Session.g_oCallLegs[1].bUac = true ;

Session.g_oCallLegs[1].strScreenCallFlag = Session.g_oAPI.strScreenCallFlag ;



for( var i = 0; i < Session.g_oAPI.oRoute.length; i++ ) {







	if( null != Session.g_oAPI.oRoute[i].strContact && 0 < Session.g_oAPI.oRoute[i].strContact.length ) {	







		// route is specified in terms of a Contact and, optionally, Record-Route header 



		js_calculate_uri_and_route( true, "SIP/2.0", Session.g_oCallLegs[0].strFrom.toString(), 



			Session.g_oAPI.oRoute[i].strContact.toString(), 



			Session.g_oAPI.oRoute[i].strRecordRoute.toString(), 



			Session.g_oSimRingCallLegs[i].strRemoteUri,



			Session.g_oSimRingCallLegs[i].strRoute) ;



		Session.g_oSimRingCallLegs[i].strRequestUri = Session.g_oSimRingCallLegs[i].strRemoteUri ;



		



		/* SimultaneousRing will only rate PSTN numbers, based on strCalledNumber being non-empty */



		Session.g_oSimRingCallLegs[i].strOutdialDestNbrNoRouteCode = "" ; 







		/* check if wiretap (calea) is required for this destination number */



		if( 'T' == Session.g_oAccessLine.strWiretapFlag && 



			null != Session.g_oAccessLine.strWiretapDest &&



			Session.g_oAccessLine.strWiretapDest.length > 0 ) {







			/*  Put the information about this in the Subject header for the pcs_nat_inbound_proxy app.



			Don't worry, it will be removed before delivery to the subscriber */	



			//Session.g_oSimRingCallLegs[i].strSubject = "calea;destination=\"" + Session.g_oAccessLine.strWiretapDest + "\"";



		}		



		Server.logInfo("Simring route #" + (i+1) + " Request-URI: " + Session.g_oSimRingCallLegs[i].strRequestUri ) ;

		Server.logInfo("Simring route #" + (i+1) + "      Route: " + Session.g_oSimRingCallLegs[i].strRoute ) ;

	}



	else {







		// perform number translations for dialing */

		var bOnNet = ("T" == Session.g_oAPI.oRoute[i].strDestOnNet ? true : false );

		Session.g_oSimRingCallLegs[i].strOutdialDestNbr = js_translate_destination_broadband( Session.s_strCarrierName, 

			Session.g_oAPI.oRoute[i].strPhoneNumber, Session.g_oAPI.nOrigCountryId, bOnNet, Session.g_oAPI.strAniReceived ) ;



		/* SimultaneousRing will only rate this number, if necessary */

		Session.g_oSimRingCallLegs[i].strOutdialDestNbrNoRouteCode = Session.g_oSimRingCallLegs[i].strOutdialDestNbr ;

		Server.logInfo("Primary Route Code: " + Session.g_oAPI.strPrimaryRouteCode) ;

		if(Session.g_oAPI.strPrimaryRouteCode != "" && Session.g_oAPI.strPrimaryRouteCode != undefined) {

			Session.g_oSimRingCallLegs[i].strOutdialDestNbr = Session.g_oAPI.strPrimaryRouteCode + "" + Session.g_oSimRingCallLegs[i].strOutdialDestNbr;

		}			



		Session.g_oSimRingCallLegs[i].strRemoteUri = "sip:" + Session.g_oSimRingCallLegs[i].strOutdialDestNbr ;

		Session.g_oSimRingCallLegs[i].strRemoteUri += "@" ;

		Session.g_oSimRingCallLegs[i].strRemoteUri += Session.g_oProxyList[Session.iProxyId] ;

		Session.g_oSimRingCallLegs[i].strRequestUri = Session.g_oSimRingCallLegs[i].strRemoteUri ;

		Session.g_oSimRingCallLegs[i].strRoute = "" ;

		Server.logInfo("Simring route #" + (Session.idx+1) + " Request-URI: " + Session.g_oSimRingCallLegs[i].strRemoteUri ) ;

	}



	if ( "F" == Session.g_oAPI.oRoute[i].strDestOnNet ) {

		if ( PAI.url.user.length >= 7 ) {
		// then use the original PSTN To[0] value since it will be authenticated on the Nextone
			var pai = js_translate_calling_number_broadband( Session.s_strCarrierName, js_getLeadingDigits(PAI.url.user) ) ;
		} else {
		// from[1] will have been set to the strANIToSend already so use it for corp dept extension calls.
			var pai = js_translate_calling_number_broadband( Session.s_strCarrierName, js_getLeadingDigits(from.url.user) ) ;
		}

		var diversion = js_translate_destination_broadband( Session.s_strCarrierName,

 			js_getLeadingDigits(to.url.user), 

			Session.g_oAPI.nOrigCountryId,

			bOnNet, 

		 	Session.g_oAPI.strAniReceived ) ;

		Session.g_oSimRingCallLegs[i].strPAssertedIdentity = "<sip:" + pai + "@" + to.url.host + ">";

		Session.g_oSimRingCallLegs[i].strDiversion = "<sip:" + diversion + "@" + from.url.host + ">";

		Server.logInfo("PAI: " + Session.g_oSimRingCallLegs[i].strPAssertedIdentity);

		Server.logInfo("Diversion: " + Session.g_oSimRingCallLegs[i].strDiversion);

	}

	else { 

		Session.g_oSimRingCallLegs[i].strPAssertedIdentity = "";

	}

}







// set flag to write CDR at Session end 



Session.g_oAPI.bWriteCDR = true ;







// update the application state 



Session.g_STATE = Session.s_STATE_CONNECTING_TO_CALLED ;



	 



// if a specific codec was selected, try that 



if( Session.g_oAccessLine.strCodec.length > 0 ) {



		



	if( 0 == Clib.strcmpi( "PCMU", Session.g_oAccessLine.strCodec ) ) {



		Server.logInfo("Modifying SDP so PCMU is the preferred codec") ;



		js_modifySdpForCodec( Session.g_oCallLegs[0].strRemoteSdp, 0 ) ;



	}



	else if( 0 == Clib.strcmpi( "G729", Session.g_oAccessLine.strCodec ) ) {



		Server.logInfo("Modifying SDP so G729 is the preferred codec") ;



		js_modifySdpForCodec( Session.g_oCallLegs[0].strRemoteSdp, 18 ) ;



	}



}



Session.g_oCallLegs[1].strCallType = Session.g_oAPI.strCallType ;



Session.g_oCallLegs[1].strEnteredDestNbr = Session.g_oAPI.strDestReceived ;







// save payload type 



var sdpUsed = new Sdp( Session.g_oCallLegs[0].strRemoteSdp.toString() ) ;



if( sdpUsed.media.length > 0 && sdpUsed.media[0].rtpMaps.length > 0 ) {



	Session.g_oCallLegs[1].nPayloadType = sdpUsed.media[0].rtpMaps[0].type ;



	if( null != Session.g_oCallLegs[1].nRtpClockRate ) {



		Session.g_oCallLegs[1].nRtpClockRate = sdpUsed.media[0].rtpMaps[0].clockRate ;



	}



	else {



		Session.g_oCallLegs[1].nRtpClockRate = 8000 ;



	}



}







Session.g_oCallLegs[1].strCallType = Session.g_oAPI.strCallType ;



Session.g_oCallLegs[1].strWiretapFlag = Session.g_oAccessLine.strWiretapFlag ;



Session.g_oCallLegs[1].strWiretapDest = Session.g_oAccessLine.strWiretapDest ;



Session.g_oCallLegs[1].strIntlDestFlag = Session.g_oAPI.strIntlDestFlag ;



Session.g_oCallLegs[1].nDestCountryId = Session.g_oAPI.nDestCountryId ;



Session.g_oCallLegs[1].strDestCallingCode = Session.g_oAPI.strDestCallingCode ;



Session.g_oCallLegs[1].strDestAreaCode = Session.g_oAPI.strDestAreaCode ;



Session.g_oCallLegs[1].strDestRouteType = Session.g_oAPI.strDestOnNet ;







/* set otg header to the dtg we received on the INVITE */



if( Session.g_oAPI.dtg.length > 0 ) {



	var newFrom = new SipFrom( Session.g_oCallLegs[1].strFrom ) ;



	newFrom.url.otg = Session.g_oAPI.dtg ;



	Session.g_oCallLegs[1].strFrom = newFrom.encode() ;



}







Session.g_oCallLegs[1].lTimeStart = Server.getUTCTime() ;







/* we do not want to be the refresher on the A leg */



Session.nSessionTimerA = Clib.atoi( Session.g_oCallLegs[0].strSessionExpires ) ;



Session.g_oCallLegs[0].bRefresher = false ;]]></script>
            <script language="javascript" timing="last" ><![CDATA[/* if this is a hunt group call, set the subscriber id and phone number id equal to the target */



if ( Session.s_CT_HUNT_GROUP == Session.g_oAPI.strCallType && Session.bConnected ) {



	Session.idx = Session.g_oCallLegs[1].nHuntGroupRouteId;



	Session.g_oSub.lSubscriberId = Session.g_oAPI.oRoute[Session.idx].lSubscriberId;



	Session.g_oAPI.lPhoneNumberId = Session.g_oAPI.oRoute[Session.idx].lPhoneNumberId;



	Server.logInfo("B-leg Subscriber ID: " + Session.g_oSub.lSubscriberId);



	Server.logInfo("B-leg Phone Number ID: " + Session.g_oAPI.lPhoneNumberId);



} else if ( Session.bConnected ) {

	Session.idx = Session.g_oCallLegs[1].nHuntGroupRouteId;

}]]></script>
          </scripts>
        </action>
        <action id="13" plug-in="Pactolus.Sleep.1" ><?xtml-editor x=494 y=1030 ?>
          <!--2 secs, to allow late-arriving 487 responses from Cancel requests to be processed-->
          <sleep xmlns="urn:www.pactolus.com:xtml:application" duration="2"/>
          <results >
            <result name="Default" link="6" stubbed="0"/>
            <result name="caller hung up" link="2" stubbed="0" >bAlegHungUp == true</result>
          </results>
        </action>
        <action id="15" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=63 y=741 ?>
          <!--SIP/2.0 180 Ringing-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >g_oCallLegs[0].strCallId</call-id>
            <cseq >g_oCallLegs[0].strCSeq</cseq>
            <from >g_oCallLegs[0].strFrom</from>
            <status >"SIP/2.0 180 Ringing"</status>
            <to >g_oCallLegs[0].strTo</to>
            <via >g_oCallLegs[0].strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="9" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="16" plug-in="Pactolus.Branch.1" ><?xtml-editor x=601 y=62 ?>
          <!--determine if there is another PSX to try-->
          <results >
            <result name="Default" link="7" stubbed="0"/>
            <result name="try next PSX" link="5" stubbed="0" >bTryAgain == true</result>
            <result name="route to IVR" link="26" stubbed="0" >g_oAPI.strCallType == s_CT_IVR



AND g_bTryReceptionist == false</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bTryAgain = false ;







if (!Session.bAlegHungUp && ++Session.iProxyId < Session.g_oProxyList.length ) {



	Session.bTryAgain = true ;



	Server.logInfo("PSX timed out on provisional response. Trying next PSX " + Session.iProxyId + ": " + Session.g_oProxyList[Session.iProxyId]) ;



}



else if (!Session.bAlegHungUp && Session.g_bTryReceptionist ) {



	Session.g_bTryReceptionist = false;



}



else {



	Server.logInfo("PSX timed out on provisional response. No more proxies in list.") ;



}











]]></script>
          </scripts>
        </action>
        <action id="17" plug-in="Pactolus.Branch.1" ><?xtml-editor x=187 y=1076 ?>
          <!--determine if there is another PSX to try-->
          <results >
            <result name="Default" link="6" stubbed="0"/>
            <result name="try next PSX" link="15" stubbed="0" >bTryAgain == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bTryAgain = false ;







if (!Session.bAlegHungUp && ++Session.iProxyId < Session.g_oProxyList.length && 0 == Session.g_nFinalStatus ) {



	Session.bTryAgain = true ;



	Server.logInfo("PSX timed out on provisional response. Trying next PSX " + Session.iProxyId + ": " + Session.g_oProxyList[Session.iProxyId]) ;



}



else {



	Server.logInfo("PSX timed out on provisional response. No more proxies in list.") ;



}











]]></script>
          </scripts>
        </action>
        <action id="19" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1412 y=354 ?>
          <results >
            <result name="Default" link="3" stubbed="1"/>
            <result name="we must refresh B leg" link="20" stubbed="0" >g_oCallLegs[1].bRefresher == true



AND nSessionTimerB &gt; 0</result>
          </results>
        </action>
        <action id="20" plug-in="Standard.Timer.1" ><?xtml-editor x=1667 y=344 ?>
          <!--Set timer for B leg-->
          <timer xmlns="urn:www.pactolus.com:xtml:application" start="1" id="g_oCallLegs[1].nSessionTimerId" duration="nSessionTimer"/>
          <results >
            <result name="Default" link="3" stubbed="1"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[1].nSessionTimer = Session.nSessionTimerB ;



Session.g_oCallLegs[1].strSessionExpires = Session.nSessionTimerB.toString() + "; refresher=uac" ;



Session.nSessionTimer = Session.nSessionTimerB / 2 + 5 ;



Server.logInfo("Sending refreshing reINVITEs to B leg each " + Session.nSessionTimer + " seconds") ;



]]></script>
          </scripts>
        </action>
        <action id="21" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=501 y=325 ?>
          <!--psAPIAuthorizeDestination-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;psAPIAuthorizeDestination&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >g_oAPI</parameter>
            <parameter >g_oRate</parameter>
            <parameter >g_oSub</parameter>
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >g_oCallLegs[0]</parameter>
          </function>
          <results >
            <result name="Default" link="1" stubbed="0"/>
            <result name="destination restricted" link="7" stubbed="1" >nReturnCode == -3</result>
            <result name="insufficient digits" link="7" stubbed="1" >nReturnCode == -4</result>
            <result name="no destination given" link="7" stubbed="1" >nReturnCode == -5</result>
            <result name="time avail &lt; min threshold" link="7" stubbed="1" >nReturnCode == -6</result>
            <result name="no subrate - block call" link="7" stubbed="1" >nReturnCode == -7</result>
            <result name="dest not in phone list" link="7" stubbed="1" >nReturnCode == -8</result>
            <result name="success - unlimited time" >nReturnCode == 1</result>
            <result name="no rates" link="7" stubbed="1" >nReturnCode == -9</result>
            <result name="curr balance &lt; min balance" link="7" stubbed="1" >g_oAPI.fAccountBalance &lt; g_oAPI.fMinPrepaidBalance



AND nReturnCode == 0</result>
            <result name="-10 - rate &gt; balance" link="7" stubbed="1" >nReturnCode == -10</result>
            <result name="out of calling plan" link="7" stubbed="1" >nReturnCode == -11</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oAPI.strDestinationNumber = Session.g_oCallLegs[1].strOutdialDestNbrNoRouteCode;



]]></script>
            <script language="javascript" timing="last" ><![CDATA[//set the single max call timer, we'll use for both prepaid and postpaid



Server.logInfo("Result: " + Result.name + "(" + Result.id + ")" ) ;



Server.logInfo("nSecondsAvailable: " + Session.g_oSub.nSecondsAvailable);



Server.logInfo("Service Max Call Duration: " + Session.g_oVoipService.nMaxCallDuration );







if( Session.g_oSub.nSecondsAvailable > 0 &&  



	(Session.g_oVoipService.nMaxCallDuration > 0 && 



	Session.g_oSub.nSecondsAvailable > Session.g_oVoipService.nMaxCallDuration) ||



	(0 == Session.g_oSub.nSecondsAvailable && Session.g_oVoipService.nMaxCallDuration > 0 ) ) {



	



	Session.g_oSub.nSecondsAvailable = Session.g_oVoipService.nMaxCallDuration ;



}



Server.logInfo("There are " + Session.g_oSub.nSecondsAvailable + " seconds for this call."); 







Server.logInfo("AuthDest - reservation id: " + Session.g_oSub.lReservationId + " billing id: " + Session.g_oSub.lBillingSessionId ) ;







]]></script>
          </scripts>
        </action>
        <action id="22" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1151 y=369 ?>
          <results >
            <result name="Default" link="19" stubbed="0"/>
            <result name="set call timers" link="23" stubbed="0" >g_oSub.nSecondsAvailable &gt; 0</result>
          </results>
        </action>
        <action id="23" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=1179 y=528 ?>
          <!--bbtelSetTimers-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;bbtelSetTimers&quot;" return="" external-function="1" library="lib_voip.xml" >
            <parameter >g_oTimer</parameter>
            <parameter >g_oSub.nSecondsAvailable</parameter>
            <parameter >g_oAPI.nWarningThreshold1</parameter>
            <parameter >g_oAPI.nWarningThreshold2</parameter>
            <parameter >g_oAPI.nWarningThreshold3</parameter>
            <parameter >g_oSub.nReservedSeconds</parameter>
          </function>
          <results >
            <result name="Default" link="19" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Setting max call duration timer: " + Session.g_oSub.nSecondsAvailable ) ;



Server.logInfo("Setting warning threshold 1 timer: " + Session.g_oAPI.nWarningThreshold1 ) ;



Server.logInfo("Setting warning threshold 2 timer: " + Session.g_oAPI.nWarningThreshold2 ) ;



Server.logInfo("Setting warning threshold 3 timer: " + Session.g_oAPI.nWarningThreshold3 ) ;



if( Session.g_oSub.nReservedSeconds > 0 ) {



	Server.logInfo("Setting commit-and-reserve timer: " + Session.g_oSub.nReservedSeconds ) ;



}



]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.logInfo("max call duration timer id: " + Session.g_oTimer.lMaxCallDuration ) ;



Server.logInfo("warning threshold 1 timer id: " + Session.g_oTimer.lThresholdTimer1 ) ;



Server.logInfo("warning threshold 2 timer id: " + Session.g_oTimer.lThresholdTimer2 ) ;



Server.logInfo("warning threshold 3 timer id: " + Session.g_oTimer.lThresholdTimer3 ) ;



if( Session.g_oSub.nReservedSeconds > 0 ) {



	Server.logInfo("commit-and-reserve timer id: " + Session.g_oTimer.lReservationTimer) ;



}



]]></script>
          </scripts>
        </action>
        <action id="25" plug-in="Pactolus.UserFunction.1" ><?xtml-editor x=164 y=132 ?>
          <user-function xmlns="urn:www.pactolus.com:xtml:application" process="&quot;PACTOLUS_ps_targus&quot;" function="&quot;targus&quot;" timeout="1.5" return="" async="0" >
            <parameter >g_oCallLegs[0].strCallingNumber</parameter>
            <parameter >strCallerIdDisplay</parameter>
          </user-function>
          <results >
            <result name="Default" link="8" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("ConnectToSubscriber: doing TARGUS lookup for number = " + Session.g_oCallLegs[0].strCallingNumber);



]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.logInfo ("Caller Id display = " + Session.strCallerIdDisplay);







if( Session.strCallerIdDisplay.length > 0 ) {



	Session.g_oCallLegs[0].strSvcProviderCallerId = Session.strCallerIdDisplay ;



	



	if( !Session.g_oAPI.bCallerIdBlocked ) {



		Session.g_oCallLegs[0].strSubscriberCallerId = Session.strCallerIdDisplay ;	



		



		var from = new SipFrom( Session.g_oCallLegs[0].strFrom.toString() );



		from.displayName = Session.strCallerIdDisplay ;



		Session.g_oCallLegs[0].strFrom = from.encode() ;



	}



}]]></script>
          </scripts>
        </action>
        <action id="26" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1109 y=119 ?>
          <!--route to IVR-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Failed to connect to Receptionist; routing call to IVR");]]></script>
          </scripts>
        </action>
        <action id="28" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=645 y=208 ?>
          <!--VoipGetDestCallingInfo-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;VoipGetDestCallingInfo&quot;" return="" external-function="1" library="lib_APISce.xml" >
            <parameter >g_oAPI</parameter>
            <parameter >g_oAccessLine</parameter>
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >g_oVoipService.nSvcId</parameter>
            <parameter >g_oAPI.nDialingPlanId</parameter>
          </function>
          <results >
            <result name="Default" link="1" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[//if this call is not rated, then we will not at this point have the dest calling code, area code,



// or country id. This method is necessary for a complete CDR.







Session.strDestReceived = Session.g_oAPI.strDestReceived;



Session.strOutdialDest = Session.g_oAPI.strOutdialDestNbr;







if ( 0 < Session.g_oAPI.strOutdialDestNbr.length ) {



	Session.g_oAPI.strDestReceived = Session.g_oAPI.strOutdialDestNbr;



}



else {



//get the dest to translate number from the remote uri



	var dest = new SipRequestUri(Session.g_oCallLegs[1].strRemoteUri.toString());



	Session.g_oAPI.strDestReceived = dest.url.phoneNumber;



}]]></script>
            <script language="javascript" timing="last" ><![CDATA[Session.g_oAPI.strOutdialDestNbr = Session.strOutdialDest;



Session.g_oAPI.strDestReceived = Session.strDestReceived;]]></script>
          </scripts>
        </action>
        <action id="30" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1320 y=206 ?>
          <!--handle 302 response-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[//save the original dest entered number



Session.g_oAPI.strOrigDestReceived = Session.g_oAPI.strDestReceived;



Session.g_oCallLegs[1].lOrigTimeStart = Session.g_oCallLegs[1].lTimeStart;











var forwardPhone = new SipRequestUri(Session.g_oCallLegs[1].strRemoteUri.toString());;



Session.g_oAPI.strDestReceived = forwardPhone.url.phoneNumber;



Server.logInfo("Attempting to forward call to phone number: " + Session.g_oAPI.strDestReceived);







Server.logInfo("g_oCallLeg[0].strTo: " + Session.g_oCallLegs[0].strTo);



]]></script>
          </scripts>
        </action>
        <action id="31" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=1125 y=185 ?>
          <!--SIP/2.0 180 Ringing-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >g_oCallLegs[0].strCallId</call-id>
            <cseq >g_oCallLegs[0].strCSeq</cseq>
            <from >g_oCallLegs[0].strFrom</from>
            <status >"SIP/2.0 180 Ringing"</status>
            <to >g_oCallLegs[0].strTo</to>
            <via >g_oCallLegs[0].strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="30" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="32" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=1011 y=662 ?>
          <!--psAPIAuthorizeDestination-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;psAPIAuthorizeDestination&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >g_oAPI</parameter>
            <parameter >g_oRate</parameter>
            <parameter >g_oSub</parameter>
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >g_oCallLegs[0]</parameter>
          </function>
          <results >
            <result name="Default" link="23" stubbed="0"/>
            <result name="destination restricted" link="6" stubbed="1" >nReturnCode == -3</result>
            <result name="insufficient digits" link="6" stubbed="1" >nReturnCode == -4</result>
            <result name="no destination given" link="6" stubbed="1" >nReturnCode == -5</result>
            <result name="time avail &lt; min threshold" link="6" stubbed="1" >nReturnCode == -6</result>
            <result name="no subrate - block call" link="6" stubbed="1" >nReturnCode == -7</result>
            <result name="dest not in phone list" >nReturnCode == -8</result>
            <result name="success - unlimited time" >nReturnCode == 1</result>
            <result name="no rates" link="6" stubbed="1" >nReturnCode == -9</result>
            <result name="curr balance &lt; min balance" link="6" stubbed="1" >g_oAPI.fAccountBalance &lt; g_oAPI.fMinPrepaidBalance



AND nReturnCode == 0</result>
            <result name="-10 - rate &gt; balance" link="6" stubbed="1" >nReturnCode == -10</result>
            <result name="out of calling plan" link="6" stubbed="1" >nReturnCode == -11</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oAPI.strDestinationNumber = Session.g_oCallLegs[1].strOutdialDestNbrNoRouteCode;







]]></script>
            <script language="javascript" timing="last" ><![CDATA[//set the single max call timer, we'll use for both prepaid and postpaid



Server.logInfo("nSecondsAvailable: " + Session.g_oSub.nSecondsAvailable);



Server.logInfo("Service Max Call Duration: " + Session.g_oVoipService.nMaxCallDuration );







if( Session.g_oSub.nSecondsAvailable > 0 &&  



	(Session.g_oVoipService.nMaxCallDuration > 0 && 



	Session.g_oSub.nSecondsAvailable > Session.g_oVoipService.nMaxCallDuration) ||



	(0 == Session.g_oSub.nSecondsAvailable && Session.g_oVoipService.nMaxCallDuration > 0 ) ) {



	



	Session.g_oSub.nSecondsAvailable = Session.g_oVoipService.nMaxCallDuration ;



}



Server.logInfo("There are " + Session.g_oSub.nSecondsAvailable + " seconds for this call."); 







]]></script>
          </scripts>
        </action>
        <action id="33" plug-in="Pactolus.Branch.1" ><?xtml-editor x=854 y=974 ?>
          <results >
            <result name="Default" link="19" stubbed="0"/>
            <result name="rate call?" link="32" stubbed="0" >bRateDestination == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bRateDestination = false ;







/* only rate PSTN destinations, if this product offering is doing rating */



Server.logInfo("Simultaneous ring connected to: " + Session.g_oCallLegs[1].strOutdialDestNbrNoRouteCode ) ;



if( Session.g_oAPI.bRateCalls && Session.g_oCallLegs[1].strOutdialDestNbrNoRouteCode.length > 0 ) {



	



	Server.logInfo("Simultaneous ring call was completed to a PSTN destination, we need to rate this call") ;



	Session.bRateDestination = true ;



}]]></script>
          </scripts>
        </action>
        <action id="34" plug-in="Pactolus.JavaStaticMethod.1" ><?xtml-editor x=1267 y=4 ?>
          <!--rollbackReservation-->
          <java xmlns="urn:www.pactolus.com:xtml:application" class="&quot;com.pactolus.psAPISceBalanceReservation&quot;" method="&quot;rollbackReservation&quot;" timeout="s_nShortTimeout" return="" method-return-var="" method-return-type="0" >
            <parameter type="in" var-type="string" >g_oAPI.strPlatformSessionId</parameter>
            <parameter type="in" var-type="string" >g_oAPI.strProcDBName</parameter>
            <parameter type="in" var-type="i8" >g_oSub.lReservationId</parameter>
            <parameter type="in" var-type="i8" >g_oSub.lBillingSessionId</parameter>
            <parameter type="in" var-type="string" >"rated termination was not connected"</parameter>
          </java>
          <results >
            <result name="Default" link="5" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="35" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=153 y=490 ?>
          <!--SIP/2.0 180 Ringing-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >g_oCallLegs[0].strCallId</call-id>
            <cseq >g_oCallLegs[0].strCSeq</cseq>
            <from >g_oCallLegs[0].strFrom</from>
            <status >"SIP/2.0 180 Ringing"</status>
            <to >g_oCallLegs[0].strTo</to>
            <via >g_oCallLegs[0].strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="36" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="36" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=234 y=676 ?>
          <!--doSimRingWith



FalseAnswerDetection-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;doSimRingWithFalseAnswerDetection&quot;" return="nReturnCode" external-function="0" library="" >
            <parameter >bAlegHungUp</parameter>
          </function>
          <results >
            <result name="Default" link="6" stubbed="0"/>
            <result name="caller hung up" link="2" stubbed="0" >bAlegHungUp == true</result>
            <result name="connected" link="33" stubbed="0" >nReturnCode == 0</result>
            <result name="send to voicemail" link="6" stubbed="1" >nReturnCode == 1</result>
            <result name="no answer" link="6" stubbed="1" >nReturnCode &lt; 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Performing simring with false answer supervision") ;]]></script>
          </scripts>
        </action>
      </actions>
    </function>
    <function name="OnResponse" start="1" event="OnResponse" returns="void" >
      <parameters >
        <parameter name="strAccept" type="string" pass="byref"/>
        <parameter name="strAcceptEncoding" type="string" pass="byref"/>
        <parameter name="strAcceptLanguage" type="string" pass="byref"/>
        <parameter name="strAlertInfo" type="string" pass="byref"/>
        <parameter name="strAllow" type="string" pass="byref"/>
        <parameter name="strAllowEvents" type="string" pass="byref"/>
        <parameter name="strCallId" type="string" pass="byref"/>
        <parameter name="strCallInfo" type="string" pass="byref"/>
        <parameter name="strContact" type="string" pass="byref"/>
        <parameter name="strContent" type="string" pass="byref"/>
        <parameter name="strContentDisposition" type="string" pass="byref"/>
        <parameter name="strContentEncoding" type="string" pass="byref"/>
        <parameter name="strContentLanguage" type="string" pass="byref"/>
        <parameter name="strContentType" type="string" pass="byref"/>
        <parameter name="strCSeq" type="string" pass="byref"/>
        <parameter name="strDate" type="string" pass="byref"/>
        <parameter name="strEncryption" type="string" pass="byref"/>
        <parameter name="strErrorInfo" type="string" pass="byref"/>
        <parameter name="strFrom" type="string" pass="byref"/>
        <parameter name="strInReplyTo" type="string" pass="byref"/>
        <parameter name="strMIMEVersion" type="string" pass="byref"/>
        <parameter name="strMinSE" type="string" pass="byref"/>
        <parameter name="strOrganization" type="string" pass="byref"/>
        <parameter name="strPriority" type="string" pass="byref"/>
        <parameter name="strProxyAuthenticate" type="string" pass="byref"/>
        <parameter name="strRecordRoute" type="string" pass="byref"/>
        <parameter name="strRemotePartyID" type="string" pass="byref"/>
        <parameter name="strRequire" type="string" pass="byref"/>
        <parameter name="strRetryAfter" type="string" pass="byref"/>
        <parameter name="strRSeq" type="string" pass="byref"/>
        <parameter name="strServer" type="string" pass="byref"/>
        <parameter name="strSessionExpires" type="string" pass="byref"/>
        <parameter name="strStatus" type="string" pass="byref"/>
        <parameter name="strSubscriptionState" type="string" pass="byref"/>
        <parameter name="strSupported" type="string" pass="byref"/>
        <parameter name="strTimestamp" type="string" pass="byref"/>
        <parameter name="strTo" type="string" pass="byref"/>
        <parameter name="strUnsupported" type="string" pass="byref"/>
        <parameter name="strUserAgent" type="string" pass="byref"/>
        <parameter name="strVia" type="string" pass="byref"/>
        <parameter name="strWarning" type="string" pass="byref"/>
        <parameter name="strWWWAuthenticate" type="string" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="b487" type="boolean" >0</var>
        <var name="idx" type="i4" >0</var>
      </local-vars>
      <actions >
        <action id="1" plug-in="Pactolus.Branch.1" ><?xtml-editor x=35 y=53 ?>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="487 Request Terminated" link="3" stubbed="0" >b487 == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.b487 = false ;



var status = new SipStatus( Session.strStatus ) ;



if( 487 != status.code ) {



	Server.logInfo("Discarding non-487 response" + status.code ) ;



	return ;



}







Session.idx = js_search_callid(Session.g_oSimRingCallLegs, Session.strCallId) ;



if( -1 == Session.idx ) {



	Server.logError("Received 487 response but call leg not found for callId: " + Session.strCallId ) ;



	return ;



}







Session.b487 = true ;]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=295 y=28 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
        </action>
        <action id="3" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=289 y=133 ?>
          <!--to canceled outbound in simultaneous ring scenario-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >g_oSimRingCallLegs[idx].strCallId</call-id>
            <cseq >g_oSimRingCallLegs[idx].strCSeq</cseq>
            <from >g_oSimRingCallLegs[idx].strFrom</from>
            <request-uri >g_oSimRingCallLegs[idx].strRequestUri</request-uri>
            <to >g_oSimRingCallLegs[idx].strTo</to>
            <via >g_oSimRingCallLegs[idx].strOriginalVia</via>
          </sip-ack>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
        </action>
      </actions>
    </function>
    <function name="OnRefer" start="1" event="OnRefer" returns="void" >
      <parameters >
        <parameter name="strAccept" type="string" pass="byref"/>
        <parameter name="strAcceptEncoding" type="string" pass="byref"/>
        <parameter name="strAcceptLanguage" type="string" pass="byref"/>
        <parameter name="strAllow" type="string" pass="byref"/>
        <parameter name="strAuthorization" type="string" pass="byref"/>
        <parameter name="strCallId" type="string" pass="byref"/>
        <parameter name="strContact" type="string" pass="byref"/>
        <parameter name="strContent" type="string" pass="byref"/>
        <parameter name="strContentDisposition" type="string" pass="byref"/>
        <parameter name="strContentType" type="string" pass="byref"/>
        <parameter name="strCSeq" type="string" pass="byref"/>
        <parameter name="strDate" type="string" pass="byref"/>
        <parameter name="strEncryption" type="string" pass="byref"/>
        <parameter name="strErrorInfo" type="string" pass="byref"/>
        <parameter name="strFrom" type="string" pass="byref"/>
        <parameter name="strMaxForwards" type="string" pass="byref"/>
        <parameter name="strMIMEVersion" type="string" pass="byref"/>
        <parameter name="strOrganization" type="string" pass="byref"/>
        <parameter name="strProxyAuthorization" type="string" pass="byref"/>
        <parameter name="strProxyRequire" type="string" pass="byref"/>
        <parameter name="strRecordRoute" type="string" pass="byref"/>
        <parameter name="strRequestURI" type="string" pass="byref"/>
        <parameter name="strReferTo" type="string" pass="byref"/>
        <parameter name="strReferredBy" type="string" pass="byref"/>
        <parameter name="strRequire" type="string" pass="byref"/>
        <parameter name="strResponseKey" type="string" pass="byref"/>
        <parameter name="strRoute" type="string" pass="byref"/>
        <parameter name="strSupported" type="string" pass="byref"/>
        <parameter name="strTimestamp" type="string" pass="byref"/>
        <parameter name="strTo" type="string" pass="byref"/>
        <parameter name="strUserAgent" type="string" pass="byref"/>
        <parameter name="strVia" type="string" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="nIdxReferrer" type="i4" >0</var>
        <var name="bReverseToFromOnReferrer" type="boolean" >0</var>
        <var name="nIdxReferred" type="i4" >0</var>
        <var name="oSipRequest" type="object" ></var>
        <var name="bConnected" type="boolean" >0</var>
        <var name="nReturnCode" type="i4" >0</var>
        <var name="oDummy" type="object" ></var>
        <var name="bUnknownCallId" type="boolean" >0</var>
        <var name="strResponseStatus" type="string" ></var>
        <var name="nExistingSecondsAvailable" type="i4" >0</var>
        <var name="oAPI_orig" type="object" ></var>
        <var name="bReferrerConnected" type="boolean" >0</var>
        <var name="oRate_orig" type="object" ></var>
        <var name="oSub_orig" type="object" ></var>
      </local-vars>
      <actions >
        <action id="1" plug-in="Pactolus.Branch.1" ><?xtml-editor x=25 y=39 ?>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="valid state for transfer?" link="20" stubbed="0" >g_STATE == s_STATE_CONNECTED_TO_CALLED



AND bUnknownCallId == false</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.strResponseStatus = "SIP/2.0 488 Not Acceptable";







if ( 0 == Session.strReferTo.length ) {



	Session.strResponseStatus = "SIP/2.0 400 Bad Request";



	return;



}







if ( Session.g_oCallLegs[0].strCallId == Session.strCallId ) {



	Session.nIdxReferrer = 0;



	Session.nIdxReferred = 1;



	/* if the REFER was forwarded to us from the originate app, then we need to keep that 



	  dialog information around and send them a BYE when this session ends. That way 



	  originate can write a CDR for the length of the call as A--B + B--C. */



	  Session.g_bHangUpAttendingLeg = true;

	Session.g_oCallLegs[Session.nIdxReferred].strReferredBy = Session.strReferredBy ;

}



else if ( Session.g_oCallLegs[1].strCallId == Session.strCallId ) {



	Session.nIdxReferrer = 1;

	Session.nIdxReferred = 0;

	

	/* the phone number in the To header of the original INVITE that came in to us is

		what we will put in the Diversion header of the C-leg INVITE.

		That is because the carrier network may use it as the bill-to number, 

		and will require it to be a number that it knows it can bill the service provider on.

	*/

	Session.g_oCallLegs[Session.nIdxReferred].strReferredBy = Session.g_oCallLegs[0].strTo ;

}

else {



	Session.bUnknownCallId = true;



	Server.logError("Received REFER from unknown call id <" + Session.strCallId + ">");

	

}









Session.g_bAttendedTransfer = false;



Session.g_bTransfer = false;



Session.g_oCallLegs[1].bReferredTo = false;











]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=464 y=67 ?>
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >strResponseStatus</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="3" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="3" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=714 y=45 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
        </action>
        <action id="5" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1007 y=256 ?>
          <!--Connected to Called Party-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[var referrer = new SipFrom(Session.strReferredBy);



Session.g_oAPI.strStrippedOrigNumber = referrer.url.phoneNumber;







//if this is a Replaces REFER, then the Referring phone has already initiated a session



// to the C-leg and the CDR for Referrer --> C-leg will be written from there. 



// At this point we are just proxying messages between Referred and Referred-To.



if ( Session.g_bAttendedTransfer ) {



	Session.g_oAPI.bWriteCDR = false;



}







/* save the remote Sdp of both A and B which we will need for a call transfer */



Session.g_oCallLegs[0].strRemoteSdpForRefer = Session.g_oCallLegs[0].strRemoteSdp ;



Session.g_oCallLegs[1].strRemoteSdpForRefer = Session.g_oCallLegs[1].strRemoteSdp ;







]]></script>
          </scripts>
        </action>
        <action id="6" plug-in="Standard.EndSession.1" ><?xtml-editor x=660 y=289 ?>
          <!--Not connected to Called Party-->
        </action>
        <action id="8" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=337 y=401 ?>
          <!--psAPIProcCallCompletion-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;psAPIProcCallCompletion&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >g_oCallLegs[2].oAPI</parameter>
            <parameter >g_oCallLegs[2].oSub</parameter>
            <parameter >g_oCallLegs[nIdxReferred]</parameter>
            <parameter >g_oCallLegs[2]</parameter>
            <parameter >g_oCallLegs[2].oRate</parameter>
            <parameter >oDummy</parameter>
            <parameter >oDummy</parameter>
          </function>
          <results >
            <result name="Default" link="6" stubbed="0"/>
            <result name="bConnected" link="18" stubbed="0" >bConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oAPI_orig.intOrigCountryId = Session.oAPI_orig.nOrigCountryId;







Server.logInfo("Writing CDR for initial leg of call.");















]]></script>
            <script language="javascript" timing="last" ><![CDATA[if ( 0 != Session.nReturnCode ) {



	Server.logError("Failed to write CDR for Referring Party");



}







]]></script>
          </scripts>
        </action>
        <action id="9" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=43 y=365 ?>
          <!--Transfer Call-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;TransferCall&quot;" return="bConnected" external-function="1" library="lib_voip.xml" >
            <parameter >g_oCallLegs[nIdxReferrer]</parameter>
            <parameter >g_oCallLegs[nIdxReferred]</parameter>
            <parameter >oSipRequest</parameter>
            <parameter >s_strLocalUri</parameter>
            <parameter >g_oAPI</parameter>
            <parameter >g_oAccessLine</parameter>
            <parameter >s_strNiuAddress</parameter>
            <parameter >s_strPrimaryPSX</parameter>
            <parameter >s_strBackupPSX</parameter>
            <parameter >s_strCarrierName</parameter>
            <parameter >s_nCaleaDelay</parameter>
            <parameter >g_oRate</parameter>
            <parameter >g_oSub</parameter>
            <parameter >bReferrerConnected</parameter>
            <parameter >g_oCLegAPI</parameter>
          </function>
          <results >
            <result name="Default" link="8" stubbed="0"/>
            <result name="Connected" link="13" stubbed="0" >bConnected == true</result>
            <result name="Transfer rejected" link="2" stubbed="0" >bConnected == false



AND g_oCallLegs[0].bConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oAPI.strCarrierName = Session.s_strCarrierName ;







/* Save SIP Request Info */



Session.oSipRequest.strTo = Session.strTo ;



Session.oSipRequest.strFrom = Session.strFrom ;



Session.oSipRequest.strContact = Session.strContact ;



Session.oSipRequest.strRoute = Session.strRoute ;



Session.oSipRequest.strRequestUri = Session.strRequestURI ;



Session.oSipRequest.strCallId = Session.strCallId ;



Session.oSipRequest.strCSeq = Session.strCSeq ;



Session.oSipRequest.strVia = Session.strVia ;



Session.oSipRequest.strMaxForwards = Session.strMaxForwards ;



Session.oSipRequest.strRecordRoute = Session.strRecordRoute ;



Session.oSipRequest.strReferredBy = Session.strReferredBy ;



Session.oSipRequest.strReferTo = Session.strReferTo ;







Session.g_oCallLegs[Session.nIdxReferred].strRemoteSdp = Session.g_oCallLegs[Session.nIdxReferred].strRemoteSdpForRefer; 







Session.g_STATE = Session.s_STATE_TRANSFERRING_CALL ;



Session.g_bTransfer = true;











/* Save subscriber's info for CDRs */



Session.g_oCallLegs[2] = Session.g_oCallLegs[Session.nIdxReferrer] ;



Session.g_oCallLegs[2].strCSeq = Session.strCSeq;



Session.g_oCallLegs[2].oAPI = Session.g_oAPI;



Session.g_oCallLegs[2].oRate = Session.g_oRate;



Session.g_oCallLegs[2].oSub = Session.g_oSub;







Session.oAPI_orig = Session.g_oAPI;







if (-1 != Session.strReferTo.indexOf("Replaces") || -1 != Session.strReferTo.indexOf("replaces")) {



	Session.g_bAttendedTransfer = true;



}



Server.logInfo("From on A leg: " + Session.g_oCallLegs[0].strFrom ) ;

Server.logInfo("To on A leg: " + Session.g_oCallLegs[0].strTo ) ;

Server.logInfo("From on B leg: " + Session.g_oCallLegs[1].strFrom ) ;

Server.logInfo("To on B leg: " + Session.g_oCallLegs[1].strTo ) ;







]]></script>
            <script language="javascript" timing="last" ><![CDATA[if ( Session.bConnected ) {



	Session.g_STATE = Session.s_STATE_CONNECTED_TO_CALLED ;



	Session.g_oCallLegs[1].lTimeAnswered = Server.getUTCTime();



	Server.logInfo("Returning from Transfer Call function with Connection status: " + Session.bConnected) ;



	Server.logInfo("Call ID for Call leg[0]: " + Session.g_oCallLegs[Session.nIdxReferred].strCallId) ;



	Server.logInfo("Call ID for Call leg[1]: " + Session.g_oCallLegs[Session.nIdxReferrer].strCallId) ;



	Server.logInfo("Call ID for Call leg[2]: " + Session.g_oCallLegs[2].strCallId);







	if ( 1 == Session.nIdxReferrer )  {



		Session.g_oCallLegs[Session.nIdxReferrer].nTerminationReason = Session.g_oAPI.nCallTerminationReason = Session.s_TR_CALLED_PARTY_HANGUP ;



	}



	else {



		Session.g_oCallLegs[Session.nIdxReferrer].nTerminationReason = Session.g_oAPI.nCallTerminationReason = Session.s_TR_CALLING_PARTY_HANGUP ;	



	}



	Session.g_oCallLegs[Session.nIdxReferrer].lTimeEnded = Server.getUTCTime() ;



	



	if ( Session.s_RT_ON_NET == Session.g_oCallLegs[Session.nIdxReferrer].strDestRouteType &&



		!Session.g_bAttendedTransfer) {



		Session.g_bWriteCLegCDR = true;



	}



	







		



}



else {



	Session.strResponseStatus = "SIP/2.0 503 Service Unavailable";



	Session.g_bAttendedTransfer = false;



	Session.g_bTransfer = false;



	Session.g_oCallLegs[1].bReferredTo = false;



	Session.g_bWriteCLegCDR = false;



	Session.g_oAPI = Session.oAPI_orig;



	Session.g_STATE = Session.s_STATE_RECONNECTING_TO_REFERRED;



}



















Server.enableEvents(true);



]]></script>
          </scripts>
        </action>
        <action id="13" plug-in="Pactolus.Branch.1" ><?xtml-editor x=223 y=577 ?>
          <results >
            <result name="Default" link="8" stubbed="0"/>
            <result name="g_bAttendedTransfer" link="5" stubbed="0" >g_bAttendedTransfer == true



AND bReferrerConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[//if this is an attended transfer then the Referrer can stay on the call as long as they like. 



// we need to wait for the to end the call.











]]></script>
          </scripts>
        </action>
        <action id="18" plug-in="Pactolus.Branch.1" ><?xtml-editor x=556 y=501 ?>
          <results >
            <result name="Default" link="5" stubbed="0"/>
            <result name="set call timers" link="19" stubbed="0" >g_oSub.nSecondsAvailable &gt; 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[//set the single max call timer, we'll use for both prepaid and postpaid



Server.logInfo("nSecondsAvailable: " + Session.g_oSub.nSecondsAvailable);



Server.logInfo("Service Max Call Duration: " + Session.g_oVoipService.nMaxCallDuration );







if( Session.g_oSub.nSecondsAvailable > 0 &&  



	(Session.g_oVoipService.nMaxCallDuration > 0 && 



	Session.g_oSub.nSecondsAvailable > Session.g_oVoipService.nMaxCallDuration) ||



	(0 == Session.g_oSub.nSecondsAvailable && Session.g_oVoipService.nMaxCallDuration > 0 ) ) {



	



	Session.g_oSub.nSecondsAvailable = Session.g_oVoipService.nMaxCallDuration ;



}



Server.logInfo("There are " + Session.g_oSub.nSecondsAvailable + " seconds for this call."); 



]]></script>
          </scripts>
        </action>
        <action id="19" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=771 y=441 ?>
          <!--bbtelSetTimers-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;bbtelSetTimers&quot;" return="" external-function="1" library="lib_voip.xml" >
            <parameter >g_oTimer</parameter>
            <parameter >g_oSub.nSecondsAvailable</parameter>
            <parameter >g_oAPI.nWarningThreshold1</parameter>
            <parameter >g_oAPI.nWarningThreshold2</parameter>
            <parameter >g_oAPI.nWarningThreshold3</parameter>
            <parameter >g_oSub.nReservedSeconds</parameter>
          </function>
          <results >
            <result name="Default" link="5" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Setting max call duration timer: " + Session.g_oSub.nSecondsAvailable ) ;



Server.logInfo("Setting warning threshold 1 timer: " + Session.g_oAPI.nWarningThreshold1 ) ;



Server.logInfo("Setting warning threshold 2 timer: " + Session.g_oAPI.nWarningThreshold2 ) ;



Server.logInfo("Setting warning threshold 3 timer: " + Session.g_oAPI.nWarningThreshold3 ) ;



]]></script>
          </scripts>
        </action>
        <action id="20" plug-in="Pactolus.Branch.1" ><?xtml-editor x=75 y=141 ?>
          <results >
            <result name="Default" link="9" stubbed="0"/>
            <result name="g_bPlayingMOH" link="21" stubbed="0" >g_bPlayingMOH == true</result>
          </results>
        </action>
        <action id="21" plug-in="Pactolus.MGCPDelete.1" ><?xtml-editor x=180 y=255 ?>
          <dlcx xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS.strConnectionId" endpoint="g_oMS.strEndPoint" callid="g_oMS.strCallId" timeout="5" returns="" ms-type="g_oMS.strType" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </dlcx>
          <results >
            <result name="Default" link="9" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Deleting MOH media server connection");



Session.g_bPlayingMOH = false;]]></script>
          </scripts>
        </action>
      </actions>
    </function>
    <function name="OnTimer" start="1" event="OnTimer" returns="void" >
      <parameters >
        <parameter name="nTimerId" type="i4" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="nStatus" type="i4" >0</var>
        <var name="nSessionTimer" type="i4" >0</var>
        <var name="nSecondsToPlay" type="i4" >0</var>
        <var name="nReturn" type="i4" >0</var>
        <var name="strTo" type="string" ></var>
        <var name="strFrom" type="string" ></var>
      </local-vars>
      <actions >
        <action id="1" plug-in="Pactolus.Branch.1" ><?xtml-editor x=34 y=75 ?>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="refresh A" link="4" stubbed="0" >g_oCallLegs[0].nSessionTimerId == nTimerId</result>
            <result name="refresh B" link="3" stubbed="0" >g_oCallLegs[1].nSessionTimerId == nTimerId</result>
            <result name="threshold 1" link="19" stubbed="0" >g_oTimer.lThresholdTimer1 == nTimerId</result>
            <result name="threshold 2" link="19" stubbed="0" >g_oTimer.lThresholdTimer2 == nTimerId</result>
            <result name="threshold 3" link="19" stubbed="0" >g_oTimer.lThresholdTimer3 == nTimerId</result>
            <result name="max duration" link="16" stubbed="0" >g_oTimer.lMaxCallDuration == nTimerId</result>
            <result name="moh interrupt timer" link="21" stubbed="0" >g_nInterruptTimer == nTimerId</result>
            <result name="reservation timer" link="24" stubbed="1" >g_oTimer.lReservationTimer == nTimerId</result>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[switch( Result.id ) {



	case 4:



		Session.nSecondsToPlay = Session.g_oAPI.nWarningThreshold1 ;



		break ;



		



	case 5:



		Session.nSecondsToPlay = Session.g_oAPI.nWarningThreshold2 ;



		break ;



		



	case 6:



		Session.nSecondsToPlay = Session.g_oAPI.nWarningThreshold3 ;



		break ;



		



	default:



		break ;



}



		



		]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=308 y=10 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logError("Unknown call timer went off: " + Session.nTimerId ) ;]]></script>
          </scripts>
        </action>
        <action id="3" plug-in="Pactolus.SipInvite.1" ><?xtml-editor x=316 y=290 ?>
          <!--Send reINVITE on B leg-->
          <sip-invite xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" handle-responses="1" follow-redirection="0" final-response-status="nStatus" response-content="" response-content-type="" final-request-uri="" timeout-for-final-response="s_nLongTimeout" timeout-for-provisional-response="s_nMediumTimeout" record-route="" contact="" response-to="" use-session-timer="0" session-expires="" min-supported-session-timer="" refresher="" remote-party-id="" increment-cseq-first="0" increment-cseq-last="0" >
            <authorization >g_oCallLegs[0].strAuthorization</authorization>
            <call-id >g_oCallLegs[1].strCallId</call-id>
            <contact >s_strLocalUri</contact>
            <content >g_oCallLegs[0].strRemoteSdp</content>
            <content-disposition >g_oCallLegs[0].strContentDisposition</content-disposition>
            <content-type >g_oCallLegs[0].strContentType</content-type>
            <cseq >g_oCallLegs[1].strCSeq</cseq>
            <encryption >g_oCallLegs[0].strEncryption</encryption>
            <from >g_oCallLegs[1].strFrom</from>
            <proxy-authorization >g_oCallLegs[0].strProxyAuthorization</proxy-authorization>
            <proxy-require >g_oCallLegs[0].strProxyRequire</proxy-require>
            <request-uri >g_oCallLegs[1].strRemoteUri</request-uri>
            <require >g_oCallLegs[0].strRequire</require>
            <response-key >g_oCallLegs[0].strResponseKey</response-key>
            <route >g_oCallLegs[1].strRoute</route>
            <session-expires >g_oCallLegs[1].strSessionExpires</session-expires>
            <supported >"timer"</supported>
            <to >g_oCallLegs[1].strTo</to>
          </sip-invite>
          <results >
            <result name="Default" link="7" stubbed="1"/>
            <result name="Success" link="6" stubbed="0"/>
            <result name="Redirect (3xx)"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Provisional Timeout"/>
            <result name="Final Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Time to send session timer refresh to B leg");



Server.enableEvents(false) ;]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.enableEvents(true) ;]]></script>
          </scripts>
        </action>
        <action id="4" plug-in="Pactolus.SipInvite.1" ><?xtml-editor x=312 y=76 ?>
          <!--Send reINVITE on A leg-->
          <sip-invite xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" handle-responses="1" follow-redirection="0" final-response-status="nStatus" response-content="" response-content-type="" final-request-uri="" timeout-for-final-response="s_nLongTimeout" timeout-for-provisional-response="s_nMediumTimeout" record-route="" contact="" response-to="" use-session-timer="0" session-expires="" min-supported-session-timer="" refresher="" remote-party-id="" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >g_oCallLegs[0].strCallId</call-id>
            <contact >s_strLocalUri</contact>
            <content >g_oCallLegs[1].strRemoteSdp</content>
            <content-disposition >g_oCallLegs[0].strContentDisposition</content-disposition>
            <content-type >g_oCallLegs[0].strContentType</content-type>
            <cseq >g_oCallLegs[0].strCSeq</cseq>
            <from >g_oCallLegs[0].strTo</from>
            <request-uri >g_oCallLegs[0].strRemoteUri</request-uri>
            <route >g_oCallLegs[0].strRoute</route>
            <session-expires >g_oCallLegs[0].strSessionExpires</session-expires>
            <supported >"timer"</supported>
            <to >g_oCallLegs[0].strFrom</to>
          </sip-invite>
          <results >
            <result name="Default" link="7" stubbed="1"/>
            <result name="Success" link="5" stubbed="0"/>
            <result name="Redirect (3xx)"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Provisional Timeout"/>
            <result name="Final Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Time to send session timer refresh to A leg");



Server.enableEvents(false) ;]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.enableEvents(true)]]></script>
          </scripts>
        </action>
        <action id="5" plug-in="Standard.Timer.1" ><?xtml-editor x=588 y=234 ?>
          <!--reset A leg session timer-->
          <timer xmlns="urn:www.pactolus.com:xtml:application" start="1" id="g_oCallLegs[0].nSessionTimerId" duration="nSessionTimer"/>
          <results >
            <result name="Default" link="8" stubbed="1"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nSessionTimer = Session.g_oCallLegs[0].nSessionTimer / 2 ;



Server.logInfo("Next refreshing reINVITE on A leg in: " + Session.nSessionTimer + " seconds ") ;]]></script>
          </scripts>
        </action>
        <action id="6" plug-in="Standard.Timer.1" ><?xtml-editor x=594 y=410 ?>
          <!--reset B leg session timer-->
          <timer xmlns="urn:www.pactolus.com:xtml:application" start="1" id="g_oCallLegs[1].nSessionTimerId" duration="nSessionTimer"/>
          <results >
            <result name="Default" link="8" stubbed="1"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nSessionTimer = Session.g_oCallLegs[1].nSessionTimer / 2 ;



Server.logInfo("Next refreshing reINVITE on B leg in: " + Session.nSessionTimer + " seconds ") ;]]></script>
          </scripts>
        </action>
        <action id="7" plug-in="Standard.EndSession.1" ><?xtml-editor x=707 y=88 ?></action>
        <action id="8" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=669 y=13 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
        </action>
        <action id="11" plug-in="Pactolus.Hold.1" ><?xtml-editor x=294 y=680 ?>
          <!--Put B on hold-->
          <cc-hold xmlns="urn:www.pactolus.com:xtml:sip-cc" to="strFrom" from="strTo" ingress-gateway="g_oCallLegs[1].strRemoteUri" cseq="g_oCallLegs[1].strCSeq" call-id="g_oCallLegs[1].strCallId" sdp="g_oCallLegs[0].strRemoteSdp" status="nStatus" route="g_oCallLegs[1].strRoute" record-route="" contact="g_oCallLegs[1].strContact"/>
          <results >
            <result name="Default" link="17" stubbed="1"/>
            <result name="Success" link="12" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if( Session.g_oCallLegs[1].bUac ) {



	Session.strTo = Session.g_oCallLegs[1].strTo ;



	Session.strFrom = Session.g_oCallLegs[1].strFrom ;



}



else {



	Session.strTo = Session.g_oCallLegs[1].strFrom ;



	Session.strFrom = Session.g_oCallLegs[1].strTo ;



}]]></script>
          </scripts>
        </action>
        <action id="12" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=536 y=695 ?>
          <!--outdial from MS-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;MSOutdialParty&quot;" return="nReturn" external-function="1" library="lib_mediaserver.xml" >
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >g_oMS</parameter>
            <parameter >g_oCallLegs[1].strContact</parameter>
          </function>
          <results >
            <result name="Default" link="17" stubbed="1"/>
            <result name="success" link="13" stubbed="0" >nReturn == s_RET_SUCCESS</result>
            <result name="caller hung up" >nReturn == s_RET_CALLER_HUNGUP</result>
          </results>
        </action>
        <action id="13" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=772 y=701 ?>
          <!--Goodbye-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS.strConnectionId" endpoint="g_oMS.strEndPoint" callid="g_oMS.strCallId" repeat="1" timeout="s_nLongTimeout" ms-type="g_oMS.strType" returns="" start-play="1" interrupt="0" return-immediate="0" digit-map="" language="g_oAccessLine.oSub.strLanguage" digits="" retry-count="" clear-digits="0" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="index" >322</audio>
          </play>
          <results >
            <result name="Default" link="14" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="14" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=1040 y=790 ?>
          <!--delete MS connection-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;DeleteMSConnection&quot;" return="" external-function="1" library="lib_mediaserver.xml" >
            <parameter >g_oMS</parameter>
          </function>
          <results >
            <result name="Default" link="17" stubbed="0"/>
          </results>
        </action>
        <action id="15" plug-in="Standard.EndSession.1" ><?xtml-editor x=395 y=1011 ?></action>
        <action id="16" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=67 y=642 ?>
          <!--Hang up A-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="3" handle-responses="1" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >g_oCallLegs[0].strCallId</call-id>
            <contact >g_oCallLegs[0].strContact</contact>
            <cseq >g_oCallLegs[0].strCSeq</cseq>
            <from >strFrom</from>
            <request-uri >g_oCallLegs[0].strRemoteUri</request-uri>
            <route >g_oCallLegs[0].strRoute</route>
            <to >strTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="11" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[1].nTerminationReason = Session.g_oAPI.nCallTerminationReason = Session.s_TR_NO_MONEY;



Server.logInfo("Caller ran out of money (and time)") ;







if( Session.g_oCallLegs[0].bUac ) {



	Session.strTo = Session.g_oCallLegs[0].strTo ;



	Session.strFrom = Session.g_oCallLegs[0].strFrom ;



}



else {



	Session.strTo = Session.g_oCallLegs[0].strFrom ;



	Session.strFrom = Session.g_oCallLegs[0].strTo ;



}]]></script>
          </scripts>
        </action>
        <action id="17" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=53 y=911 ?>
          <!--Hang up B-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="3" handle-responses="1" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >g_oCallLegs[1].strCallId</call-id>
            <contact >g_oCallLegs[1].strContact</contact>
            <cseq >g_oCallLegs[1].strCSeq</cseq>
            <from >strFrom</from>
            <request-uri >g_oCallLegs[1].strRemoteUri</request-uri>
            <route >g_oCallLegs[1].strRoute</route>
            <to >strTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="15" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="19" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=317 y=548 ?>
          <!--PlayThresholdsPrompt-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;bbtelPlayThresholdsPrompt&quot;" return="" external-function="1" library="lib_voip.xml" >
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oMS</parameter>
            <parameter >g_oAPI</parameter>
            <parameter >nSecondsToPlay</parameter>
          </function>
          <results >
            <result name="Default" link="20" stubbed="0"/>
          </results>
        </action>
        <action id="20" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=556 y=574 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
        </action>
        <action id="21" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=182 y=1191 ?>
          <!--bbtel_moh-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;bbtel_moh&quot;" return="" external-function="1" library="lib_voip.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oMS</parameter>
            <parameter >g_oAPI</parameter>
            <parameter >g_oAccessLine.oSub.strLanguage</parameter>
            <parameter >g_nInterruptTimer</parameter>
            <parameter >g_nInterruptPlays</parameter>
            <parameter >bPlayInterrupt</parameter>
          </function>
          <results >
            <result name="Default" link="20" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_nInterruptPlays++;



Session.bPlayInterrupt = true;



Server.logInfo("Playing Interrupt Message");]]></script>
          </scripts>
        </action>
        <action id="22" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=856 y=422 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
        </action>
        <action id="23" plug-in="Standard.Timer.1" ><?xtml-editor x=835 y=281 ?>
          <!--Set reservation timer for shared use billing-->
          <timer xmlns="urn:www.pactolus.com:xtml:application" start="1" id="g_oTimer.lReservationTimer" duration="g_oSub.nReservedSeconds"/>
          <results >
            <result name="Default" link="22" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Setting reservation timer for " + Session.g_oSub.nReservedSeconds + " seconds") ;



]]></script>
          </scripts>
        </action>
        <action id="24" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=782 y=149 ?>
          <!--commitAndReserve-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;psAPICommitAndReserve&quot;" return="nReturn" external-function="1" library="lib_APISce.xml" >
            <parameter >g_oAPI</parameter>
            <parameter >g_oRate</parameter>
            <parameter >g_oSub</parameter>
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >g_oCallLegs[0]</parameter>
          </function>
          <results >
            <result name="Default" link="23" stubbed="0"/>
            <result name="no time remaining" link="16" stubbed="0" >nReturn == -6</result>
            <result name="error" link="16" stubbed="0" >nReturn != 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Reserve-and-commit timer went off") ;



Session.nReturn = -99 ;]]></script>
            <script language="javascript" timing="last" ><![CDATA[if( 0 != Session.nReturn ) {



	Server.logError("Reserve-and-commit returned an error: " + Session.nReturn) ;



}



]]></script>
          </scripts>
        </action>
      </actions>
    </function>
    <function name="OnInfo" start="6" event="Info" returns="void" >
      <parameters >
        <parameter name="strAccept" type="string" pass="byref"/>
        <parameter name="strAcceptEncoding" type="string" pass="byref"/>
        <parameter name="strAcceptLanguage" type="string" pass="byref"/>
        <parameter name="strAuthorization" type="string" pass="byref"/>
        <parameter name="strCallId" type="string" pass="byref"/>
        <parameter name="strContact" type="string" pass="byref"/>
        <parameter name="strContent" type="string" pass="byref"/>
        <parameter name="strContentDisposition" type="string" pass="byref"/>
        <parameter name="strContentType" type="string" pass="byref"/>
        <parameter name="strCSeq" type="string" pass="byref"/>
        <parameter name="strDate" type="string" pass="byref"/>
        <parameter name="strEncryption" type="string" pass="byref"/>
        <parameter name="strFrom" type="string" pass="byref"/>
        <parameter name="strMaxForwards" type="string" pass="byref"/>
        <parameter name="strMIMEVersion" type="string" pass="byref"/>
        <parameter name="strOrganization" type="string" pass="byref"/>
        <parameter name="strPriority" type="string" pass="byref"/>
        <parameter name="strProxyAuthorization" type="string" pass="byref"/>
        <parameter name="strProxyRequire" type="string" pass="byref"/>
        <parameter name="strRecordRoute" type="string" pass="byref"/>
        <parameter name="strRequestURI" type="string" pass="byref"/>
        <parameter name="strRequire" type="string" pass="byref"/>
        <parameter name="strResponseKey" type="string" pass="byref"/>
        <parameter name="strRoute" type="string" pass="byref"/>
        <parameter name="strSupported" type="string" pass="byref"/>
        <parameter name="strTimestamp" type="string" pass="byref"/>
        <parameter name="strTo" type="string" pass="byref"/>
        <parameter name="strUserAgent" type="string" pass="byref"/>
        <parameter name="strVia" type="string" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="bConnected" type="boolean" >0</var>
        <var name="nFinalStatus" type="i4" >0</var>
        <var name="bALegHungUp" type="boolean" >0</var>
        <var name="strResponse" type="string" ></var>
        <var name="nReturnCode" type="i4" >0</var>
        <var name="bConnectToVoicemail" type="boolean" >0</var>
        <var name="bCallEstablished" type="boolean" >0</var>
        <var name="bINFOAccepted" type="boolean" >0</var>
        <var name="oDummy" type="object" ></var>
        <var name="bInternalTransfer" type="boolean" >0</var>
        <var name="nMsgNumber" type="i4" >0</var>
        <var name="strResponseStatus" type="string" ></var>
        <var name="oAccessLine_orig" type="object" ></var>
        <var name="oAPI_orig" type="object" ></var>
        <var name="oVoipService_orig" type="object" ></var>
        <var name="nErrorPrompt" type="i4" >0</var>
        <var name="strNewRequestUri" type="string" ></var>
        <var name="bHandoff" type="boolean" >0</var>
        <var name="strReceivingSession" type="string" ></var>
        <var name="oCallLeg" type="object" ></var>
      </local-vars>
      <actions >
        <action id="6" plug-in="Pactolus.Branch.1" ><?xtml-editor x=87 y=223 ?>
          <results >
            <result name="Default" link="7" stubbed="0"/>
            <result name="bINFOAccepted" link="13" stubbed="0" >bINFOAccepted == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("MESSAGEOUT Session.g_oCallLegs[0].strRemoteUri: " + Session.g_oCallLegs[0].strRemoteUri);



//CDRs are associated with a subscriber, no CDR is written for the call to an IVR; 



//  only for the transfer leg that terminates at a subscriber phone.



Session.g_oAPI.bWriteCDR = false ;







//if we do not recognize the Content in the INFO message we *should* respond with a 



// 415 Unsupported Media Type, but for now we are simply returning a 200 OK and taking



// no action. Some Nextones are sending digit INFO messages that need no action, but 



// not accespting these results in the call being torn down by the Nextone.



Session.strResponseStatus = "SIP/2.0 200 OK";







if ( Session.strCallId != Session.g_oCallLegs[0].strCallId && Session.strCallId != Session.g_oCallLegs[1].strCallId ) {



	Session.bUknownCallId = true;



	Session.strResponseStatus = "SIP/2.0 481 Call/Transaction Does Not Exist";



	Server.logError("Received INFO message from unknown call id: " + Session.strCallId);



	return;



}







//save the original call leg information in case we need to reconnect to the IVR upon a failed transfer



Session.g_oCallLegs[2] = Session.g_oCallLegs[1];



Session.oAccessLine_orig = Session.g_oAccessLine;



Session.oAPI_orig = Session.g_oAPI;



Session.oVoipService_orig = Session.g_oVoipService;











//get transfer type and value from the Content



//IVR_Extension_501;DeptId=10540;IVRId=304



if ( -1 != Session.strContent.indexOf("Extension")) {



	var i = Session.strContent.lastIndexOf("_");



	var j = Session.strContent.indexOf(";DeptId=");



	var k = Session.strContent.indexOf(";IVRId=");



	Session.g_oAPI.strDestReceived = Session.strContent.substring((i + 1), j);



	    i = Session.g_oAPI.strDestReceived.toString().lastIndexOf(";");



        if (i > 0)



        {



                Session.g_oAPI.strDestReceived = Session.g_oAPI.strDestReceived.toString().substr(0, i);



        }



	if( 0 < Session.g_oAPI.strDestReceived.length ) {



		Session.g_oAPI.nDeptId = Session.strContent.substring((j + 8), k);



		Session.g_oAPI.nActionValueId = Session.strContent.substr((i + 1));



		Session.g_oAPI.nActionValueId = Session.g_oAPI.nActionValueId.toString().slice(0, -2);



		Session.g_oCallLegs[1].strDestRouteType = Session.s_RT_ON_NET;



		Session.bInternalTransfer = true;



		Session.bINFOAccepted = true;



		Server.logInfo("Transferring call from IVR to phone number: " + Session.g_oAPI.strDestReceived + " in dept id: " + Session.g_oAPI.nDeptId);



		Session.g_oAPI.bWriteCDR = true ;



		Session.bHandoff = true ;



		



		//TODO: format new request uri with extension and dept id



		Server.logInfo("Modifying existing request uri; initial value was: " + Session.g_oCallLegs[0].strRequestURI ) ;



		Session.strNewRequestUri = "sip:" + Session.g_oAPI.strDestReceived + "@" + Server.sipAddress + ":" + Server.sipPort + ";target=pcs_voip_terminate"  ;



		Session.strNewRequestUri += ";dept_id=" ;



		Session.strNewRequestUri += Session.g_oAPI.nDeptId ;



		Session.strNewRequestUri += " SIP/2.0" ;



		Server.logInfo("New request-uri will be: " + Session.strNewRequestUri ) ;



	}



	else {



		Server.logError("No target extension was provided in the INFO Content");



		Session.strResponseStatus = "SIP/2.0 415 Unsupported Media Type";



	}



}	



//Content: IVR_External_xxxxxxxxxx;SvcId=xxx;DpId=xxx;IVRId=304^M



else if ( -1 != Session.strContent.indexOf("External")) {



	var i = Session.strContent.lastIndexOf("_");



	var j = Session.strContent.indexOf(";Svc");



	Session.g_oAPI.strDestReceived = Session.strContent.substring((i + 1), j);



	if ( 0 < Session.g_oAPI.strDestReceived.length ) {



		Session.g_oCallLegs[1].strDestRouteType = Session.s_RT_OFF_NET;



		Session.bINFOAccepted = true;



		Server.logInfo("Transferring call from IVR to external number: " + Session.g_oAPI.strDestReceived);



	}



	else {



		Server.logError("No target phone number was provided in the INFO Content");



		Session.strResponseStatus = "SIP/2.0 415 Unsupported Media Type";



		return;



	}



	var i = Session.strContent.indexOf("=");



	var j = Session.strContent.indexOf(";Dp");



	Session.g_oVoipService.nSvcId = Session.strContent.substring((i + 1), j);



	Server.logInfo("Voip Service ID: " + Session.g_oVoipService.nSvcId);



	



	i = Session.strContent.lastIndexOf("=");



	var k = Session.strContent.indexOf(";IVR");



	Session.g_oAPI.nDialingPlanId = Session.strContent.substring((j + 6), k);	



	Server.logInfo("Dialing Plan ID: " + Session.g_oAPI.nDialingPlanId);



	



	Session.g_oAPI.nActionValueId = Session.strContent.substr((i + 1));



	Session.g_oAPI.nActionValueId = Session.g_oAPI.nActionValueId.toString().slice(0, -2);



	Server.logInfo("IVR ID: " + Session.g_oAPI.nActionValueId);



	



	Server.logInfo("Dept id: " + Session.g_oAPI.nDeptId ) ;



	



	Server.logInfo("Setting flag to write CDR for external call transfer") ;



	Session.g_oAPI.bWriteCDR = true ;



	



	



}



//VM_deposit_1333;IVRId=121



else if ( -1 != Session.strContent.indexOf("VM_deposit")) {



	var i = Session.strContent.lastIndexOf("_");



	var j = Session.strContent.indexOf(";IVRId=");



	Session.g_oAPI.lVoiceMailId = Session.strContent.substring((i + 1), j);



		if ( 0 != Session.g_oAPI.lVoiceMailId ) {



		Server.logInfo("Transferring call from IVR to voice mail deposit for voice mail account id: " + Session.g_oAPI.lVoiceMailId);



		Session.bConnectToVoicemail = true;



		Session.bINFOAccepted = true;



		



		Session.g_oAPI.nActionValueId = Session.strContent.substr((j + 6));



		Session.g_oAPI.nActionValueId = Session.g_oAPI.nActionValueId.slice(0, -2);



		Server.logInfo("This call was directed from IVR ID: " + Session.g_oAPI.nActionValueId);



		



	}



	else {



		Server.logError("No target voicemail account was provided in the INFO Content");



		Session.strResponseStatus = "SIP/2.0 415 Unsupported Media Type";



	}



}



else {



	Server.logError("Unrecognized Content in the INFO message: " + Session.strContent);



}







]]></script>
          </scripts>
        </action>
        <action id="3" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=644 y=90 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
        </action>
        <action id="4" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=790 y=530 ?>
          <!--TransferFromIVR-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;TransferFromIVR&quot;" return="bConnected" external-function="1" library="lib_voip.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >s_strLocalUri</parameter>
            <parameter >g_oAPI</parameter>
            <parameter >g_oAccessLine</parameter>
            <parameter >s_strCarrierName</parameter>
            <parameter >s_strPrimaryPSX</parameter>
            <parameter >s_strBackupPSX</parameter>
            <parameter >s_strNiuAddress</parameter>
            <parameter >bInternalTransfer</parameter>
            <parameter >bConnectToVoicemail</parameter>
            <parameter >g_oVoipService</parameter>
            <parameter >g_oMS</parameter>
            <parameter >g_oSimRingCallLegs</parameter>
            <parameter >g_oSub</parameter>
            <parameter >g_oRate</parameter>
          </function>
          <results >
            <result name="Default" link="21" stubbed="0"/>
            <result name="success" link="25" stubbed="0" >bConnected == true



AND g_oCallLegs[0].bConnected == true</result>
            <result name="play error and reconnect to IVR" link="20" stubbed="0" >bConnected == false



AND g_oCallLegs[0].bConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[0].strContact = Session.g_oCallLegs[1].strContact = Session.s_strLocalUri ;



Session.g_oCallLegs[1].strFrom = Session.g_oCallLegs[0].strFrom ;



Session.g_oCallLegs[1].strTo = Session.g_oCallLegs[0].strOriginalTo ;



Session.g_oCallLegs[1].bUac = true ;



Session.g_oCallLegs[1].strOutdialDestNbr =  Session.g_oAPI.strDestReceived ;







Session.g_STATE = Session.s_STATE_CONNECTING_TO_CALLED;







if ( Session.bConnectToVoicemail ) {



	Session.g_oAPI.strCallType = Session.g_oCallLegs[1].strCallType = Session.s_CT_VMAIL_DEPOSIT;



	Session.g_oCallLegs[1].strRoute = "" ;



	Session.g_oCallLegs[1].strDestRouteType = Session.s_RT_ON_NET ;



	Session.g_oAPI.strIntlDestFlag = "F" ;



	Session.g_oAPI.bWriteCDR = false ;



}



else {



	Session.g_oAPI.strCallType = Session.g_oCallLegs[1].strCallType = Session.s_CT_IVR_TRANSFER;



}	







//remove the target= info from the RequestUri



// url: sip:2133331005@10.10.100.93;target=pcs_voip_ivr;ivr_id=304



var uri = new SipRequestUri(Session.g_oCallLegs[1].strRequestUri.toString());



var i = uri.url.toString().indexOf(";target=");



uri.url = uri.url.toString().substring(0, i);



Session.g_oCallLegs[1].strRequestUri = uri.encode();



Server.logInfo("Entering TransferFromIVR with B-leg RequestUri: " + Session.g_oCallLegs[1].strRequestUri);







Session.g_oSub.strLanguage = Session.g_oAccessLine.oSub.strLanguage ;



Server.logInfo("Setting language to: " + Session.g_oSub.strLanguage ) ;







Server.enableEvents(false);]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.logInfo("CallLeg[0].bConnected: " + Session.g_oCallLegs[0].bConnected);



Server.logInfo("CallLeg[1].bConnected: " + Session.g_oCallLegs[1].bConnected);







if ( Session.bConnected ) {



	/* DH: something of a hack -- because the outdial from MS in transferFromIVr sets this to the Contact

		header received in the 200 OK response from the far end on the A leg, which causes problems later

	*/

	Session.g_oCallLegs[0].strContact = Session.g_oCallLegs[1].strContact = Session.s_strLocalUri ;





	/* save the remote Sdp of the new B leg which we will need for a call transfer */



	Session.g_oCallLegs[1].strRemoteSdpForRefer = Session.g_oCallLegs[1].strRemoteSdp ;







	/* save some information in the API global object that we will need dest auth and cdr */



	



	/* DH: now done for us in TransferFromIVR */



	/*



	Session.g_oAPI.lServiceProviderId = Session.g_oAccessLine.oSub.lSPId ;



	Session.g_oSub.nServiceId = Session.g_oVoipService.nSvcId ;



	Session.g_oSub.lSubscriberId = Session.g_oAccessLine.oSub.lSubscriberId ;



	Session.g_oSub.fPrepaidBalance = Session.g_oAPI.fAccountBalance ;



	Session.g_oAPI.strStrippedOrigNumber = Session.g_oAPI.strAniReceived; 



	Session.g_oAPI.lPhoneNumberId = Session.g_oAccessLine.lPhoneNumberId ;



	Session.g_oAPI.lWiretapOrderId = Session.g_oAccessLine.lWiretapOrderId ;



	Session.g_oAPI.strDestinationNumber = Session.g_oAPI.strDestReceived ;







	Session.g_oSub.nExpirationType = Session.g_oAccessLine.oSub.nExpirationType ;



	Session.g_oSub.nCurrencyId = Session.g_oAccessLine.oSub.nCurrencyId ;



	Session.g_oSub.strFirstCallFlag = Session.g_oAccessLine.oSub.strFirstCallFlag ;



	Session.g_oAPI.nRoundingSeconds = Session.g_oAPI.nRoundingSeconds ;



	Session.g_oSub.nRoundingThreshold =  Session.g_oAccessLine.oSub.nRoundingThresholdSeconds ;



	Session.g_oSub.nNumExpDays = Session.g_oAccessLine.oSub.nNumExpDays ;



	Session.g_oSub.fCallMarkupPercent = Session.g_oAccessLine.oSub.fCallMarkupPercent ;



	Session.g_oSub.nSecondsRemaining = Session.g_oVoipService.nMaxCallDuration ;



	*/



}



else {



	//revert back to our original dialog values



	Session.g_oCallLegs[1] = Session.g_oCallLegs[2];



	Session.g_oAccessLine = Session.oAccessLine_orig;



	Session.g_oAPI = Session.oAPI_orig;



	Session.g_oVoipService = Session.oVoipService_orig;



}







]]></script>
          </scripts>
        </action>
        <action id="5" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1344 y=486 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.enableEvents(true);







]]></script>
          </scripts>
        </action>
        <action id="7" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=385 y=55 ?>
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >strResponseStatus</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="3" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="13" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=305 y=491 ?>
          <!--200 OK-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >"SIP/2.0 200 OK"</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="26" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="20" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=926 y=758 ?>
          <!--Play error message-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS.strConnectionId" endpoint="g_oMS.strEndPoint" callid="g_oMS.strCallId" repeat="1" timeout="s_nLongTimeout" ms-type="g_oMS.strType" returns="" start-play="1" interrupt="0" return-immediate="0" digit-map="" language="g_oAccessLine.oSub.strLanguage" digits="" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="index" >nErrorPrompt</audio>
          </play>
          <results >
            <result name="Default" link="21" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if ( "486" == Session.g_oCallLegs[1].strSIPStatus ){



	Session.nErrorPrompt = 1015;



}



else {



	Session.nErrorPrompt = 375;



}]]></script>
          </scripts>
        </action>
        <action id="21" plug-in="Standard.EndSession.1" ><?xtml-editor x=1441 y=665 ?></action>
        <action id="23" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1445 y=816 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
        </action>
        <action id="24" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=1176 y=862 ?>
          <!--TransferFromIVR - route call back to IVR-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;TransferFromIVR&quot;" return="bConnected" external-function="1" library="lib_voip.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >s_strLocalUri</parameter>
            <parameter >g_oAPI</parameter>
            <parameter >g_oAccessLine</parameter>
            <parameter >s_strCarrierName</parameter>
            <parameter >s_strPrimarySoftswitch</parameter>
            <parameter >s_strBackupSoftswitch</parameter>
            <parameter >s_strNiuAddress</parameter>
            <parameter >0</parameter>
            <parameter >0</parameter>
            <parameter >g_oVoipService</parameter>
            <parameter >g_oMS</parameter>
            <parameter >g_oSimRingCallLegs</parameter>
            <parameter >g_oSub</parameter>
            <parameter >g_oRate</parameter>
          </function>
          <results >
            <result name="Default" link="21" stubbed="0"/>
            <result name="success" link="23" stubbed="0" >bConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[1] = Session.g_oCallLegs[2];







Session.g_oCallLegs.length = 2;







Session.g_oAccessLine = Session.oAccessLine_orig;



Session.g_oAPI = Session.oAPI_orig;



Session.g_oVoipService = Session.oVoipService_orig;







var toHeader = new SipTo(Session.g_oCallLegs[1].strTo.toString());



var toHeader.tag = "";



Session.g_oCallLegs[1].strTo = toHeader.encode();







Session.g_oCallLegs[1].strRequestUri = toHeader.url.user + "@";



Session.g_oCallLegs[1].strRequestUri += Session.s_strNiuAddress + ";target=pcs_voip_ivr" ;



Session.g_oCallLegs[1].strRequestUri += ";ivr_id=" ;



Session.g_oCallLegs[1].strRequestUri += Session.g_oAPI.nActionValueId ;







Session.g_oCallLegs[1].strRemoteUri = Session.g_oCallLegs[1].strRequestUri;







Server.logInfo("g_oCallLegs[1].strRequestUri = " + Session.g_oCallLegs[1].strRequestUri);



Server.logInfo("g_oCallLegs[1].strFrom = " + Session.g_oCallLegs[1].strFrom);



Server.logInfo("g_oCallLegs[1].strTo = " + Session.g_oCallLegs[1].strTo);























]]></script>
          </scripts>
        </action>
        <action id="25" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=1027 y=471 ?>
          <!--bbtelSetTimers-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;bbtelSetTimers&quot;" return="" external-function="1" library="lib_voip.xml" >
            <parameter >g_oTimer</parameter>
            <parameter >g_oSub.nSecondsAvailable</parameter>
            <parameter >g_oAPI.nWarningThreshold1</parameter>
            <parameter >g_oAPI.nWarningThreshold2</parameter>
            <parameter >g_oAPI.nWarningThreshold3</parameter>
            <parameter >g_oSub.nReservedSeconds</parameter>
          </function>
          <results >
            <result name="Default" link="5" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Setting max call duration timer: " + Session.g_oSub.nSecondsAvailable ) ;



Server.logInfo("Setting warning threshold 1 timer: " + Session.g_oAPI.nWarningThreshold1 ) ;



Server.logInfo("Setting warning threshold 2 timer: " + Session.g_oAPI.nWarningThreshold2 ) ;



Server.logInfo("Setting warning threshold 3 timer: " + Session.g_oAPI.nWarningThreshold3 ) ;



if( Session.g_oSub.nReservedSeconds > 0 ) {



	Server.logInfo("Setting commit-and-reserve timer: " + Session.g_oSub.nReservedSeconds ) ;



}



]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.logInfo("max call duration timer id: " + Session.g_oTimer.lMaxCallDuration ) ;



Server.logInfo("warning threshold 1 timer id: " + Session.g_oTimer.lThresholdTimer1 ) ;



Server.logInfo("warning threshold 2 timer id: " + Session.g_oTimer.lThresholdTimer2 ) ;



Server.logInfo("warning threshold 3 timer id: " + Session.g_oTimer.lThresholdTimer3 ) ;



if( Session.g_oSub.nReservedSeconds > 0 ) {



	Server.logInfo("commit-and-reserve timer id: " + Session.g_oTimer.lReservationTimer) ;



}



]]></script>
          </scripts>
        </action>
        <action id="26" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=557 y=507 ?>
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" handle-responses="0" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >g_oCallLegs[1].strCallId</call-id>
            <cseq >g_oCallLegs[1].strCSeq</cseq>
            <from >g_oCallLegs[1].strFrom</from>
            <request-uri >g_oCallLegs[1].strRemoteUri</request-uri>
            <to >g_oCallLegs[1].strTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="4" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
            <result name="handoff" link="34" stubbed="0" >bHandoff == true</result>
          </results>
        </action>
        <action id="32" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=88 y=983 ?>
          <!--OnInvite-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;OnInvite&quot;" return="" external-function="0" library="" >
            <parameter >oCallLeg.strAccept</parameter>
            <parameter >oCallLeg.strAcceptEncoding</parameter>
            <parameter >oCallLeg.strAcceptLanguage</parameter>
            <parameter >oCallLeg.strAlertInfo</parameter>
            <parameter >oCallLeg.strAllow</parameter>
            <parameter >oCallLeg.strAllowEvents</parameter>
            <parameter >oCallLeg.strAnonymity</parameter>
            <parameter >oCallLeg.strAuthorization</parameter>
            <parameter >oCallLeg.strCallId</parameter>
            <parameter >oCallLeg.strCallInfo</parameter>
            <parameter >oCallLeg.strRemoteUri</parameter>
            <parameter >oCallLeg.strRemoteSdp</parameter>
            <parameter >oCallLeg.strContentDisposition</parameter>
            <parameter >oCallLeg.strContentEncoding</parameter>
            <parameter >oCallLeg.strContentLanguage</parameter>
            <parameter >oCallLeg.strContentType</parameter>
            <parameter >oCallLeg.strCSeq</parameter>
            <parameter >oCallLeg.strDate</parameter>
            <parameter >oCallLeg.strEncryption</parameter>
            <parameter >oCallLeg.strErrorInfo</parameter>
            <parameter >oCallLeg.strExpires</parameter>
            <parameter >oCallLeg.strFrom</parameter>
            <parameter >oCallLeg.strInReplyTo</parameter>
            <parameter >oCallLeg.strMaxForwards</parameter>
            <parameter >oCallLeg.strMIMEVersion</parameter>
            <parameter >oCallLeg.strMinSE</parameter>
            <parameter >oCallLeg.strOrganization</parameter>
            <parameter >oCallLeg.strPriority</parameter>
            <parameter >oCallLeg.strProxyAuthorization</parameter>
            <parameter >oCallLeg.strProxyRequire</parameter>
            <parameter >oCallLeg.strRecordRoute</parameter>
            <parameter >oCallLeg.strReferredBy</parameter>
            <parameter >oCallLeg.strRemotePartyID</parameter>
            <parameter >oCallLeg.strReplaces</parameter>
            <parameter >strNewRequestUri</parameter>
            <parameter >oCallLeg.strRequire</parameter>
            <parameter >oCallLeg.strResponseKey</parameter>
            <parameter >oCallLeg.strRoute</parameter>
            <parameter >oCallLeg.strSessionExpires</parameter>
            <parameter >oCallLeg.strSubject</parameter>
            <parameter >oCallLeg.strSupported</parameter>
            <parameter >oCallLeg.strTimestamp</parameter>
            <parameter >oCallLeg.strTo</parameter>
            <parameter >oCallLeg.strUserAgent</parameter>
            <parameter >oCallLeg.strVia</parameter>
          </function>
          <results >
            <result name="Default" link="33" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_STATE = Session.s_STATE_AWAITING_CALL ;







Session.oCallLeg = Session.g_oCallLegs[0] ;



]]></script>
          </scripts>
        </action>
        <action id="33" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=445 y=985 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
        </action>
        <action id="34" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=34 y=754 ?>
          <!--outdial from MS-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;MSOutdialParty&quot;" return="nReturnCode" external-function="1" library="lib_mediaserver.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oMS[0]</parameter>
            <parameter >g_oCallLegs[0].strRemoteUri</parameter>
          </function>
          <results >
            <result name="Default" link="32" stubbed="0"/>
            <result name="success" link="35" stubbed="0" >nReturnCode == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[js_initMS(Session.g_oMS[0],Session.s_strMsType);



Session.g_oCallLegs[0].strRequestUri = Session.g_oCallLegs[0].strRemoteUri;]]></script>
          </scripts>
        </action>
        <action id="35" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=259 y=772 ?>
          <!--Play ringback-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[0].strConnectionId" endpoint="g_oMS[0].strEndPoint" callid="g_oMS[0].strCallId" repeat="-1" timeout="s_nLongTimeout" ms-type="g_oMS.strType" returns="nReturnCode" start-play="1" interrupt="0" return-immediate="1" digit-map="" language="g_oAccessLine.oSub.strLanguage" digits="" retry-count="" clear-digits="0" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="index" >341</audio>
          </play>
          <results >
            <result name="Default" link="32" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
      </actions>
    </function>
    <function name="ConnectToIVR" start="5" event="" returns="i4" >
      <parameters >
        <parameter name="bCallEstablished" type="boolean"/>
      </parameters>
      <local-vars >
        <var name="bConnected" type="boolean" >0</var>
        <var name="bALegHungUp" type="boolean" >0</var>
        <var name="nFinalStatus" type="i4" >0</var>
        <var name="bTrue" type="boolean" >0</var>
      </local-vars>
      <actions >
        <action id="5" plug-in="Pactolus.Branch.1" ><?xtml-editor x=52 y=319 ?>
          <results >
            <result name="Default" link="4" stubbed="0"/>
            <result name="ms connected" link="6" stubbed="0" >g_oMS[0].bCurrentlyConnected == true</result>
          </results>
        </action>
        <action id="2" plug-in="Standard.EndSession.1" ><?xtml-editor x=381 y=76 ?></action>
        <action id="3" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=384 y=224 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[1].bConnected = true ;



Session.g_oCallLegs[0].bConnected = true ;



Session.g_STATE = Session.s_STATE_CONNECTED_TO_CALLED;



Session.g_oCallLegs[1].lTimeAnswered = Server.getUTCTime() ;]]></script>
          </scripts>
        </action>
        <action id="4" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=102 y=113 ?>
          <!--Connect to IVR-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ProxyCallWithoutRtpRelay&quot;" return="bConnected" external-function="1" library="lib_voip.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >300</parameter>
            <parameter >0</parameter>
            <parameter >0</parameter>
            <parameter >0</parameter>
            <parameter >0</parameter>
            <parameter >bTrue</parameter>
            <parameter >nFinalStatus</parameter>
            <parameter >bALegHungUp</parameter>
          </function>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="connected" link="3" stubbed="0" >bConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* construct headers on the Called Party leg */



Session.g_oCallLegs[1].strRemoteUri = "sip:" ;



Session.g_oCallLegs[1].strRemoteUri += Session.g_oAPI.strDestReceived  ;



Session.g_oCallLegs[1].strRemoteUri += "@" ;



Session.g_oCallLegs[1].strRemoteUri += Session.s_strNiuAddress ;



Session.g_oCallLegs[1].strRemoteUri += ";target=pcs_voip_ivr" ;  



Session.g_oCallLegs[1].strRemoteUri += ";ivr_id=" ;



Session.g_oCallLegs[1].strRemoteUri += Session.g_oAPI.nActionValueId ;







Session.g_oCallLegs[1].strRequestUri = Session.g_oCallLegs[1].strRemoteUri ;







//if we first tried a receptionist number, reset the route variables to reflect the current



// route to IVR.



Session.g_oAPI.oRoute[0].strContact = Session.s_strNiuAddress + ";target=pcs_voip_ivr" ;



Session.g_oAPI.oRoute[0].strRecordRoute = "";







/* let the library assign a callid and cseq */



Session.g_oCallLegs[1].strCallId = "" ;



Session.g_oCallLegs[1].strCSeq = "" ;



// Now use the variable as set in psAuthTerminate since it may have used preferred ANI instead
//Session.g_oCallLegs[1].strFrom = Session.g_oCallLegs[0].strFrom ;



Session.g_oCallLegs[1].strTo = Session.g_oCallLegs[0].strOriginalTo ;



Session.g_oCallLegs[1].strRoute = "" ;



Session.g_oCallLegs[1].bUac = true ;



Session.g_oCallLegs[1].bReverseFromTo = false ;







Session.g_oCallLegs[1].strOutdialDestNbr =  Session.g_oAPI.strDestReceived ;



Session.g_oCallLegs[1].strDestRouteType = Session.s_RT_ON_NET ;



Session.g_oAPI.strIntlDestFlag = "F" ;







Session.g_oCallLegs[0].strContact = Session.g_oCallLegs[1].strContact = Session.s_strLocalUri ;



Server.logInfo("MESSAGEOUT Setting g_oCallLegs[0].strRequestURI.");



Session.g_oCallLegs[0].strRequestUri = Session.g_oCallLegs[0].strRemoteUri;







Session.g_oCallLegs[1].lTimeStart = Server.getUTCTime() ;







Session.g_oAPI.bWriteCDR = false;











Session.g_STATE = Session.s_STATE_CONNECTING_TO_CALLED;



]]></script>
          </scripts>
        </action>
        <action id="6" plug-in="Pactolus.MGCPDelete.1" ><?xtml-editor x=272 y=320 ?>
          <dlcx xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[0].strConnectionId" endpoint="g_oMS[0].strEndPoint" callid="g_oMS[0].strCallId" timeout="5" returns="" ms-type="&quot;PCS&quot;" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </dlcx>
          <results >
            <result name="Default" link="4" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
      </actions>
    </function>
    <function name="OnOptions" start="1" event="Options" returns="void" >
      <parameters >
        <parameter name="strAccept" type="string" pass="byref"/>
        <parameter name="strAcceptEncoding" type="string" pass="byref"/>
        <parameter name="strAcceptLanguage" type="string" pass="byref"/>
        <parameter name="strAllow" type="string" pass="byref"/>
        <parameter name="strAllowEvents" type="string" pass="byref"/>
        <parameter name="strAuthorization" type="string" pass="byref"/>
        <parameter name="strCallId" type="string" pass="byref"/>
        <parameter name="strCallInfo" type="string" pass="byref"/>
        <parameter name="strContact" type="string" pass="byref"/>
        <parameter name="strContent" type="string" pass="byref"/>
        <parameter name="strContentDisposition" type="string" pass="byref"/>
        <parameter name="strContentEncoding" type="string" pass="byref"/>
        <parameter name="strContentLanguage" type="string" pass="byref"/>
        <parameter name="strContentType" type="string" pass="byref"/>
        <parameter name="strCSeq" type="string" pass="byref"/>
        <parameter name="strDate" type="string" pass="byref"/>
        <parameter name="strEncryption" type="string" pass="byref"/>
        <parameter name="strErrorInfo" type="string" pass="byref"/>
        <parameter name="strFrom" type="string" pass="byref"/>
        <parameter name="strMaxForwards" type="string" pass="byref"/>
        <parameter name="strMIMEVersion" type="string" pass="byref"/>
        <parameter name="strOrganization" type="string" pass="byref"/>
        <parameter name="strProxyAuthorization" type="string" pass="byref"/>
        <parameter name="strProxyRequire" type="string" pass="byref"/>
        <parameter name="strRecordRoute" type="string" pass="byref"/>
        <parameter name="strRemotePartyID" type="string" pass="byref"/>
        <parameter name="strReferredBy" type="string" pass="byref"/>
        <parameter name="strRequestURI" type="string" pass="byref"/>
        <parameter name="strRequire" type="string" pass="byref"/>
        <parameter name="strResponseKey" type="string" pass="byref"/>
        <parameter name="strRoute" type="string" pass="byref"/>
        <parameter name="strSupported" type="string" pass="byref"/>
        <parameter name="strTimestamp" type="string" pass="byref"/>
        <parameter name="strTo" type="string" pass="byref"/>
        <parameter name="strUserAgent" type="string" pass="byref"/>
        <parameter name="strVia" type="string" pass="byref"/>
      </parameters>
      <actions >
        <action id="1" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=160 y=216 ?>
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >"SIP/2.0 200 OK"</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="2" plug-in="Standard.EndSession.1" ><?xtml-editor x=401 y=232 ?></action>
      </actions>
    </function>
    <function name="ScreenCall" start="48" event="" returns="i4" >
      <local-vars >
        <var name="nReturnValue" type="i4" >0</var>
        <var name="nReasonCode" type="i4" >0</var>
        <var name="nRetryCount" type="i4" >0</var>
        <var name="bCallEstablished" type="boolean" >0</var>
        <var name="bConnected" type="boolean" >0</var>
        <var name="strDigits" type="string" ></var>
        <var name="oIVRLeg" type="object" ></var>
        <var name="strTermDigit" type="string" >#</var>
        <var name="bPlayRecording" type="boolean" >0</var>
        <var name="bDirectToVM" type="boolean" >0</var>
        <var name="bRejectCall" type="boolean" >0</var>
        <var name="strContact" type="string" ></var>
      </local-vars>
      <actions >
        <action id="48" plug-in="Pactolus.Branch.1" ><?xtml-editor x=17 y=22 ?>
          <results >
            <result name="Default" link="47" stubbed="0"/>
            <result name="ms connected" link="50" stubbed="0" >g_oMS[0].bCurrentlyConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("MESSAGEOUT - SCREEN CALL - g_oMS[0].bCurrentlyConnected: " + Session.g_oMS[0].bCurrentlyConnected);]]></script>
          </scripts>
        </action>
        <action id="1" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=233 y=126 ?>
          <!--DirectCallerToMS-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;DirectCallerToMS&quot;" return="nReturnValue" external-function="1" library="lib_mediaserver.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oMS[0]</parameter>
          </function>
          <results >
            <result name="Default" link="6" stubbed="0"/>
            <result name="success" link="2" stubbed="0" >nReturnValue == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[if( 0 == Session.nReturnValue ) {



	Session.g_oCallLegs[0].bConnected = true ;



}]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=432 y=221 ?>
          <!--Collect name-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[0].strConnectionId" endpoint="g_oMS[0].strEndPoint" callid="g_oMS[0].strCallId" repeat="1" timeout="s_nLongTimeout" ms-type="g_oMS.strType" returns="nReturnValue" start-play="1" interrupt="1" return-immediate="0" digit-map="" language="g_oAccessLine.oSub.strLanguage" digits="" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="index" >1820</audio>
          </play>
          <results >
            <result name="Default" link="8" stubbed="0"/>
            <result name="Success" link="5" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="5" plug-in="Pactolus.MGCPRecord.1" ><?xtml-editor x=634 y=287 ?>
          <record xmlns="urn:www.pactolus.com:xtml:media" op-mode="0" connection-id="g_oMS[0].strConnectionId" endpoint="g_oMS[0].strEndPoint" callid="g_oMS[0].strCallId" timeout="70" returns="nReturnValue" return-immediate="0" ms-type="g_oMS.strType" rid="g_strRecording" eik="strTermDigit" rlt="600" prt="50" pst="30" rl="g_nRecordingLength" dc="" rc="nReasonCode" id-cleanup="1" play-beep="1" ef="&quot;PCM8M16&quot;" agc="0" agcta="" ga="" sla="" bpf="1400" bpa="" bpd="10"/>
          <results >
            <result name="Default" link="7" stubbed="0"/>
            <result name="Success" link="8" stubbed="1"/>
            <result name="Error"/>
            <result name="Timeout"/>
            <result name="No Speech Detected"/>
            <result name="g_nRecordingLength == 0" link="7" stubbed="0" >g_nRecordingLength == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_strRecording = "" ;



Server.logInfo("***BEGIN RECORD NAME***");]]></script>
            <script language="javascript" timing="middle" ><![CDATA[Server.logInfo("Exiting on: " + Result.name);



Server.logInfo("Reason Code: " + Session.nReasonCode);]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.logInfo("Recording length: " + Session.g_nRecordingLength ) ;



]]></script>
          </scripts>
        </action>
        <action id="6" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=553 y=37 ?>
          <!--call screen failed-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="-1"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Failure attempting to screen the call.");]]></script>
          </scripts>
        </action>
        <action id="7" plug-in="Pactolus.Branch.1" ><?xtml-editor x=837 y=240 ?>
          <results >
            <result name="Default" link="8" stubbed="0"/>
            <result name="nRetryCount &lt; 2" link="2" stubbed="0" >nRetryCount &lt; 2</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nRetryCount++;]]></script>
          </scripts>
        </action>
        <action id="8" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=76 y=384 ?>
          <!--Please hold-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[0].strConnectionId" endpoint="g_oMS[0].strEndPoint" callid="g_oMS[0].strCallId" repeat="1" timeout="s_nLongTimeout" ms-type="g_oMS.strType" returns="nReturnValue" start-play="1" interrupt="1" return-immediate="0" digit-map="" language="g_oAccessLine.oSub.strLanguage" digits="" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="index" >517</audio>
            <audio type="silence" >.2</audio>
            <audio type="index" >225</audio>
          </play>
          <results >
            <result name="Default" link="33" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="10" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=287 y=607 ?>
          <!--ConnectToSubscriber-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ConnectToSubscriber&quot;" return="bConnected" external-function="0" library="" >
            <parameter >bCallEstablished</parameter>
          </function>
          <results >
            <result name="Default" link="15" stubbed="1"/>
            <result name="bConnected" link="32" stubbed="1" >bConnected == true</result>
            <result name="failed, has voice mail" link="42" stubbed="0" >bConnected == false



AND g_oAPI.bForwardToVoicemail  == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[1].strIVRSdp = Session.g_oMS[1].strContent;







Server.logInfo("Remote SDP on A leg is now: " + Session.g_oCallLegs[0].strContent ) ;



Session.g_oCallLegs[0].strRemoteSdp = Session.g_oCallLegs[0].strContent ;]]></script>
          </scripts>
        </action>
        <action id="11" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=506 y=1006 ?>
          <!--prompt for action-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[1].strConnectionId" endpoint="g_oMS[1].strEndPoint" callid="g_oMS[1].strCallId" repeat="1" timeout="s_nLongTimeout" ms-type="g_oMS.strType" returns="nReturnValue" start-play="1" interrupt="1" return-immediate="0" digit-map="&quot;([1-3])&quot;" language="g_oAccessLine.oSub.strLanguage" digits="strDigits" retry-count="1" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="silence" >.2</audio>
            <audio type="index" >1294</audio>
            <audio type="index" >311</audio>
            <audio type="index" >1852</audio>
            <audio type="index" >312</audio>
            <audio type="index" >1295</audio>
            <audio type="index" >313</audio>
          </play>
          <results >
            <result name="Default" link="39" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
            <result name="1 - accept" link="22" stubbed="1" >strDigits match "1"</result>
            <result name="2 - direct to voice mail" link="39" stubbed="0" >strDigits match "2"</result>
            <result name="3 - reject call" link="41" stubbed="1" >strDigits match "3"</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.strDigits = "";]]></script>
          </scripts>
        </action>
        <action id="13" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=1383 y=1100 ?>
          <!--ConnectToVoiceMail-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ConnectToVoicemail&quot;" return="" external-function="0" library="" >
            <parameter >bCallEstablished</parameter>
          </function>
          <results >
            <result name="Default" link="43" stubbed="0"/>
          </results>
        </action>
        <action id="15" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=1177 y=822 ?>
          <!--Unable to connect-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[0].strConnectionId" endpoint="g_oMS[0].strEndPoint" callid="g_oMS[0].strCallId" repeat="1" timeout="s_nLongTimeout" ms-type="g_oMS.strType" returns="nReturnValue" start-play="1" interrupt="1" return-immediate="0" digit-map="" language="g_oAccessLine.oSub.strLanguage" digits="" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="index" >1292</audio>
            <audio type="index" >322</audio>
          </play>
          <results >
            <result name="Default" link="17" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="17" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=1386 y=837 ?>
          <!--HangUpParty-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;HangUpParty&quot;" return="" external-function="1" library="lib_callcontrol.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >s_strLocalUri</parameter>
          </function>
          <results >
            <result name="Default" link="18" stubbed="0"/>
          </results>
        </action>
        <action id="18" plug-in="Standard.EndSession.1" ><?xtml-editor x=1612 y=900 ?></action>
        <action id="19" plug-in="Pactolus.Branch.1" ><?xtml-editor x=273 y=944 ?>
          <results >
            <result name="Default" link="20" stubbed="0"/>
            <result name="has voice mail" link="11" stubbed="0" >g_oAPI.bForwardToVoicemail == true</result>
          </results>
        </action>
        <action id="20" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=502 y=819 ?>
          <!--prompt for action-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[1].strConnectionId" endpoint="g_oMS[1].strEndPoint" callid="g_oMS[1].strCallId" repeat="1" timeout="s_nLongTimeout" ms-type="g_oMS.strType" returns="nReturnValue" start-play="1" interrupt="1" return-immediate="0" digit-map="&quot;([1-3])&quot;" language="g_oAccessLine.oSub.strLanguage" digits="strDigits" retry-count="1" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="silence" >.2</audio>
            <audio type="index" >1294</audio>
            <audio type="index" >311</audio>
            <audio type="index" >1295</audio>
            <audio type="index" >312</audio>
          </play>
          <results >
            <result name="Default" link="34" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
            <result name="1 - accept" link="22" stubbed="0" >strDigits match "1"</result>
            <result name="2 - reject call" link="41" stubbed="1" >strDigits match "2"</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.strDigits = "";]]></script>
          </scripts>
        </action>
        <action id="21" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=453 y=1330 ?>
          <!--Invite A to B-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ReInviteParty&quot;" return="nReturnValue" external-function="1" library="lib_callcontrol.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oCallLegs[1].strRemoteSdp</parameter>
            <parameter >g_oCallLegs[1].strContentType</parameter>
            <parameter >s_strLocalUri</parameter>
          </function>
          <results >
            <result name="Default" link="24" stubbed="0"/>
            <result name="success" link="23" stubbed="0" >nReturnValue == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nReturnValue = -99;



]]></script>
          </scripts>
        </action>
        <action id="22" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=37 y=1333 ?>
          <!--Put B on hold-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;PutPartyOnHold&quot;" return="" external-function="1" library="lib_callcontrol.xml" >
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >s_strLocalUri</parameter>
          </function>
          <results >
            <result name="Default" link="35" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[1].strContent = Session.g_oCallLegs[1].strRemoteSdp;]]></script>
          </scripts>
        </action>
        <action id="23" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=667 y=1289 ?>
          <!--Invite B to A-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ReInviteParty&quot;" return="nReturnValue" external-function="1" library="lib_callcontrol.xml" >
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >g_oCallLegs[0].strRemoteSdp</parameter>
            <parameter >g_oCallLegs[0].strContentType</parameter>
            <parameter >s_strLocalUri</parameter>
          </function>
          <results >
            <result name="Default" link="25" stubbed="0"/>
            <result name="success" link="25" stubbed="0" >nReturnValue == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nReturnValue = -99;



Session.g_oCallLegs[1].strScreenCallFlag = "F";



var tempSdp = new Sdp( Session.g_oCallLegs[1].strRemoteSdp.toString() ) ;



js_modifySdpForCodec(Session.g_oCallLegs[0].strRemoteSdp,tempSdp.media[0].rtpMaps[0].type);]]></script>
          </scripts>
        </action>
        <action id="24" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=669 y=1470 ?>
          <!--reInvite to B MS-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ReInviteParty&quot;" return="nReturnValue" external-function="1" library="lib_callcontrol.xml" >
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >g_oMS[1].strContent</parameter>
            <parameter >g_oCallLegs[1].strContentType</parameter>
            <parameter >s_strLocalUri</parameter>
          </function>
          <results >
            <result name="Default" link="27" stubbed="0"/>
          </results>
        </action>
        <action id="25" plug-in="Pactolus.MGCPDelete.1" ><?xtml-editor x=880 y=1268 ?>
          <!--delete ms connection for A-->
          <dlcx xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[0].strConnectionId" endpoint="g_oMS[0].strEndPoint" callid="g_oMS[0].strCallId" timeout="s_nShortTimeout" returns="" ms-type="g_oMS.strType" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </dlcx>
          <results >
            <result name="Default" link="26" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="26" plug-in="Pactolus.MGCPDelete.1" ><?xtml-editor x=1098 y=1273 ?>
          <!--delete MS connection for B-->
          <dlcx xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[1].strConnectionId" endpoint="g_oMS[1].strEndPoint" callid="g_oMS[1].strCallId" timeout="s_nShortTimeout" returns="" ms-type="g_oMS.strType" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </dlcx>
          <results >
            <result name="Default" link="30" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="27" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=882 y=1464 ?>
          <!--Unable to connect-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[1].strConnectionId" endpoint="g_oMS[1].strEndPoint" callid="g_oMS[1].strCallId" repeat="1" timeout="s_nLongTimeout" ms-type="g_oMS.strType" returns="nReturnValue" start-play="1" interrupt="1" return-immediate="0" digit-map="" language="g_oAccessLine.oSub.strLanguage" digits="" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="index" >561</audio>
            <audio type="index" >322</audio>
          </play>
          <results >
            <result name="Default" link="28" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="28" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=1113 y=1477 ?>
          <!--HangUpParty-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;HangUpParty&quot;" return="" external-function="1" library="lib_callcontrol.xml" >
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >s_strLocalUri</parameter>
          </function>
          <results >
            <result name="Default" link="25" stubbed="1"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nReturnValue = -99;]]></script>
          </scripts>
        </action>
        <action id="30" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1315 y=1281 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value="nReturnValue"/>
        </action>
        <action id="31" plug-in="Pactolus.MGCPCreate.1" ><?xtml-editor x=67 y=605 ?>
          <crcx xmlns="urn:www.pactolus.com:xtml:media" callid="g_oMS[1].strCallId" remote-sdp="" mode="send" capability="1" returns="nReturnValue" endpoint="g_oMS[1].strEndPoint" connection-id="g_oMS[1].strConnectionId" local-sdp="g_oMS[1].strContent" packetization-period="s_nPacketizationPeriod" codec="0" timeout="s_nLongTimeout" local-connection-options="" second-endpoint-id="" telephone-events="0" ms-type="g_oMS.strType" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </crcx>
          <results >
            <result name="Default" link="42" stubbed="0"/>
            <result name="Success" link="10" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[Server.logInfo("Returning from CRCX with MS.strContent: " + Session.g_oMS[1].strContent);]]></script>
          </scripts>
        </action>
        <action id="32" plug-in="Pactolus.MGCPModify.1" ><?xtml-editor x=537 y=611 ?>
          <mdcx xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[1].strConnectionId" endpoint="g_oMS[1].strEndPoint" callid="g_oMS[1].strCallId" returns="nReturnValue" remote-sdp="g_oCallLegs[1].strRemoteSdp" mode="send/receive" packetization-period="g_oMS[1].nPacketizationPeriod" codec="-1" timeout="s_nShortTimeout" local-connection-options="" second-endpoint-id="" ms-type="g_oMS[1].strType" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </mdcx>
          <results >
            <result name="Default" link="15" stubbed="1"/>
            <result name="Success" link="44" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[1].strRequestUri = Session.g_oCallLegs[1].strRemoteUri;]]></script>
          </scripts>
        </action>
        <action id="33" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=309 y=387 ?>
          <!--on hold tone-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[0].strConnectionId" endpoint="g_oMS[0].strEndPoint" callid="g_oMS[0].strCallId" repeat="-1" timeout="s_nLongTimeout" ms-type="g_oMS.strType" returns="nReturnValue" start-play="1" interrupt="0" return-immediate="1" digit-map="" language="g_oAccessLine.oSub.strLanguage" digits="" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="silence" >15</audio>
            <audio type="index" >225</audio>
          </play>
          <results >
            <result name="Default" link="31" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="34" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=933 y=824 ?>
          <!--Stop on hold tone-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[0].strConnectionId" endpoint="g_oMS[0].strEndPoint" callid="g_oMS[0].strCallId" repeat="1" timeout="s_nLongTimeout" ms-type="g_oMS.strType" returns="nReturnValue" start-play="0" interrupt="1" return-immediate="0" digit-map="" language="g_oAccessLine.oSub.strLanguage" digits="" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer=""/>
          <results >
            <result name="Default" link="15" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[Server.logInfo("Stopping play of on hold tone returned: " + Result.name);]]></script>
          </scripts>
        </action>
        <action id="35" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=236 y=1295 ?>
          <!--Stop on hold tone-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[0].strConnectionId" endpoint="g_oMS[0].strEndPoint" callid="g_oMS[0].strCallId" repeat="1" timeout="s_nLongTimeout" ms-type="g_oMS.strType" returns="nReturnValue" start-play="0" interrupt="1" return-immediate="0" digit-map="" language="g_oAccessLine.oSub.strLanguage" digits="" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer=""/>
          <results >
            <result name="Default" link="21" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[Server.logInfo("Stopping play of on hold tone returned: " + Result.name);]]></script>
          </scripts>
        </action>
        <action id="39" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=950 y=1107 ?>
          <!--HangUpParty-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;HangUpParty&quot;" return="" external-function="1" library="lib_callcontrol.xml" >
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >s_strLocalUri</parameter>
          </function>
          <results >
            <result name="Default" link="42" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nReturnValue = -99;]]></script>
          </scripts>
        </action>
        <action id="41" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=950 y=991 ?>
          <!--HangUpParty-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;HangUpParty&quot;" return="" external-function="1" library="lib_callcontrol.xml" >
            <parameter >g_oCallLegs[1]</parameter>
            <parameter >s_strLocalUri</parameter>
          </function>
          <results >
            <result name="Default" link="34" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nReturnValue = -99;]]></script>
          </scripts>
        </action>
        <action id="42" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=1162 y=1067 ?>
          <!--Stop on hold tone-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[0].strConnectionId" endpoint="g_oMS[0].strEndPoint" callid="g_oMS[0].strCallId" repeat="1" timeout="s_nLongTimeout" ms-type="g_oMS.strType" returns="nReturnValue" start-play="0" interrupt="1" return-immediate="0" digit-map="" language="g_oAccessLine.oSub.strLanguage" digits="" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer=""/>
          <results >
            <result name="Default" link="13" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="43" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=1614 y=1090 ?>
          <!--Invite A to B-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ReInviteParty&quot;" return="nReturnValue" external-function="1" library="lib_callcontrol.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oCallLegs[1].strRemoteSdp</parameter>
            <parameter >g_oCallLegs[1].strContentType</parameter>
            <parameter >s_strLocalUri</parameter>
          </function>
          <results >
            <result name="Default" link="18" stubbed="0"/>
            <result name="success" link="25" stubbed="0" >nReturnValue == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nReturnValue = -99;



Session.g_oCallLegs[0].strRequestUri = Session.g_oCallLegs[0].strRemoteUri;]]></script>
          </scripts>
        </action>
        <action id="44" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=49 y=917 ?>
          <!--AnnounceCaller-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;AnnounceCaller&quot;" return="strDigits" external-function="0" library=""/>
          <results >
            <result name="Default" link="19" stubbed="1"/>
            <result name="1 - accept call" link="22" stubbed="1" >strDigits match "1"</result>
            <result name="send to vm" link="39" stubbed="1" >bDirectToVM == true</result>
            <result name="reject call" link="41" stubbed="1" >bRejectCall == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.strDigits = "";]]></script>
            <script language="javascript" timing="middle" ><![CDATA[if ( "2" == Session.strDigits && Session.g_oAPI.bForwardToVoicemail ) {



	Session.bDirectToVM = true;



}



else if ( "2" == Session.strDigits ) {



	Session.bRejectCall = true;



}



else if ( "3" == Session.strDigits && Session.g_oAPI.bForwardToVoicemail ) {



	Session.bRejectCall = true;



}]]></script>
          </scripts>
        </action>
        <action id="46" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=169 y=216 ?>
          <!--outdial from MS-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;MSOutdialParty&quot;" return="nReturnValue" external-function="1" library="lib_mediaserver.xml" >
            <parameter >g_oCallLegs[0]</parameter>
            <parameter >g_oMS[0]</parameter>
            <parameter >strContact</parameter>
          </function>
          <results >
            <result name="Default" link="6" stubbed="0"/>
            <result name="success" link="2" stubbed="0" >nReturnValue == 0</result>
          </results>
        </action>
        <action id="47" plug-in="Pactolus.Branch.1" ><?xtml-editor x=9 y=176 ?>
          <results >
            <result name="Default" link="1" stubbed="0"/>
            <result name="A leg connected" link="46" stubbed="0" >g_oCallLegs[0].bConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[0].strContent = Session.g_oCallLegs[0].strRemoteSdp;



Session.g_oCallLegs[0].strRequestUri = Session.g_oCallLegs[0].strRemoteUri;



Session.g_oCallLegs[1].strScreenCallFlag = "T";



js_initMS(Session.g_oMS[0], Session.s_strMsType);



js_initMS(Session.g_oMS[1], Session.s_strMsType);]]></script>
          </scripts>
        </action>
        <action id="50" plug-in="Pactolus.MGCPDelete.1" ><?xtml-editor x=237 y=23 ?>
          <dlcx xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[0].strConnectionId" endpoint="g_oMS[0].strEndPoint" callid="g_oMS[0].strCallId" timeout="5" returns="" ms-type="&quot;PCS&quot;" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </dlcx>
          <results >
            <result name="Default" link="47" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
      </actions>
      <text-objects >
        <text-object x-coord="788" y-coord="992" width="181" height="68" text="add prompt to confirm sub selection was received." font-name="Times New Roman" size="-16" red="0" green="0" blue="0" weight="0" underline="0" strikeout="0" point-size="12" italic="0"/>
      </text-objects>
    </function>
    <function name="AnnounceCaller" start="1" event="" returns="string" >
      <local-vars >
        <var name="bPlayAni" type="boolean" >0</var>
        <var name="strCallerAnncmt" type="string" ></var>
        <var name="strDigits" type="string" ></var>
        <var name="nTimeout" type="i4" >0</var>
      </local-vars>
      <actions >
        <action id="1" plug-in="Pactolus.Branch.1" ><?xtml-editor x=99 y=204 ?>
          <results >
            <result name="Default" link="6" stubbed="0"/>
            <result name="g_nRecordingLength &gt; 0" link="4" stubbed="0" >g_nRecordingLength &gt; 0</result>
            <result name="Play ani" link="2" stubbed="0" >bPlayAni == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if (0 == Session.g_nRecordingLength) {



	if ( 0 < Session.g_oAPI.strAniReceived && !Session.g_oAPI.bCallerIdBlocked ) {



		Session.bPlayAni = true;



	}



}]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=385 y=508 ?>
          <!--Announce caller's ani-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[1].strConnectionId" endpoint="g_oMS[1].strEndPoint" callid="g_oMS[1].strCallId" repeat="1" timeout="8" ms-type="g_oMS.strType" returns="" start-play="1" interrupt="1" return-immediate="0" digit-map="&quot;(x)&quot;" language="g_oAccessLine.oSub.strLanguage" digits="strDigits" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="silence" >.2</audio>
            <audio type="index" >1751</audio>
            <audio type="digits" >g_oAPI.strAniReceived</audio>
            <audio type="index" >1293</audio>
          </play>
          <results >
            <result name="Default" link="5" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="4" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=376 y=289 ?>
          <!--Announce caller's name-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[1].strConnectionId" endpoint="g_oMS[1].strEndPoint" callid="g_oMS[1].strCallId" repeat="1" timeout="nTimeout" ms-type="g_oMS.strType" returns="" start-play="1" interrupt="1" return-immediate="0" digit-map="" language="g_oAccessLine.oSub.strLanguage" digits="" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="silence" >.2</audio>
            <audio type="url" >g_strRecording</audio>
            <audio type="index" >1293</audio>
          </play>
          <results >
            <result name="Default" link="5" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nTimeout = Session.g_nRecordingLength + 3;]]></script>
          </scripts>
        </action>
        <action id="5" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=717 y=281 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value="strDigits"/>
        </action>
        <action id="6" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=371 y=81 ?>
          <!--unknown caller-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="g_oMS[1].strConnectionId" endpoint="g_oMS[1].strEndPoint" callid="g_oMS[1].strCallId" repeat="1" timeout="5" ms-type="g_oMS.strType" returns="" start-play="1" interrupt="1" return-immediate="0" digit-map="" language="g_oAccessLine.oSub.strLanguage" digits="" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="silence" >.2</audio>
            <audio type="index" >227</audio>
            <audio type="index" >1293</audio>
          </play>
          <results >
            <result name="Default" link="5" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
      </actions>
    </function>
    <function name="doSimRingWithFalseAnswerDetection" start="1" event="" returns="i4" >
      <parameters >
        <parameter name="bAlegHungUp" type="boolean" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="idx" type="i4" >0</var>
        <var name="nSent" type="i4" >0</var>
        <var name="strSession" type="string" ></var>
        <var name="strOutdialDestNbr" type="string" ></var>
        <var name="bTrue" type="boolean" >1</var>
        <var name="nRoutes" type="i4" >0</var>
        <var name="strCallId" type="string" ></var>
        <var name="sResponse" type="i2" >0</var>
        <var name="oCallLeg" type="object" ></var>
        <var name="strEvent" type="string" ></var>
        <var name="strCSeq" type="string" ></var>
        <var name="strFrom" type="string" ></var>
        <var name="strTo" type="string" ></var>
        <var name="strVia" type="string" ></var>
        <var name="nReturn" type="i4" >0</var>
        <var name="strRemoteSdp" type="string" ></var>
        <var name="strRoute" type="string" ></var>
        <var name="strRemoteUri" type="string" ></var>
        <var name="strContact" type="string" ></var>
        <var name="strMySessionId" type="string" ></var>
        <var name="strNewContent" type="string" ></var>
      </local-vars>
      <actions >
        <action id="1" plug-in="Pactolus.Branch.1" ><?xtml-editor x=12 y=31 ?>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="none to send" link="5" stubbed="0" >nRoutes == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.enableEvents(false) ;







for( var i = 0; i < Session.g_oAPI.oRoute.length; i++ ) {







	Session.g_oSimRingCallLegs[i].bActiveScreenRequest = false ;







	if( Session.g_oAPI.oRoute[i].strPhoneNumber.length > 0  && "T" != Session.g_oAPI.oRoute[i].strDestOnNet ) {







		/* we only attempt off-net numbers (for Voyport, all numbers should be offnet) */







		Session.g_oSimRingCallLegs[i].strOutdialDestNbr = js_translate_destination_broadband( Session.s_strCarrierName, 



			Session.g_oAPI.oRoute[i].strPhoneNumber, Session.g_oAPI.nOrigCountryId, false, Session.g_oAPI.strAniReceived ) ;







		/* SimultaneousRing will only rate this number, if necessary */



		Session.g_oSimRingCallLegs[i].strOutdialDestNbrNoRouteCode = Session.g_oSimRingCallLegs[i].strOutdialDestNbr ;



	



		if(Session.g_oAPI.strPrimaryRouteCode != "" && Session.g_oAPI.strPrimaryRouteCode != undefined) {



	



			Session.g_oSimRingCallLegs[i].strOutdialDestNbr = Session.g_oAPI.strPrimaryRouteCode + "" + Session.g_oSimRingCallLegs[i].strOutdialDestNbr;



		}			



		Session.nRoutes++ ;



		



		Session.g_oSimRingCallLegs[i].bActiveScreenRequest = true ;



	}



}







// set flag to write CDR at Session end 



Session.g_oAPI.bWriteCDR = true ;







// update the application state 



Session.g_STATE = Session.s_STATE_CONNECTING_TO_CALLED ;



	 



Session.strMySessionId = Session._sessionId ;



Server.logInfo("my session id sent in message is: " + Session.strMySessionId ) ;]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Pactolus.SOAPMessage.1" ><?xtml-editor x=100 y=182 ?>
          <SOAP xmlns="urn:www.pactolus.com:xtml:communication" destination-ip="" transaction="" message-name="&quot;ScreenRequest&quot;" destination-port="" destination-type="1" destination-session="" waiting-session-selected="g_oSimRingCallLegs[idx].strSession" xml-namespace="" >
            <parameter tag="" value="strMySessionId"/>
            <parameter tag="" value="g_oAPI.strAniReceived"/>
            <parameter tag="" value="g_oSimRingCallLegs[idx].strOutdialDestNbr"/>
            <parameter tag="" value="g_oAPI.strAniReceived"/>
            <parameter tag="" value="g_oAPI.strLanguage"/>
            <parameter tag="" value="&quot;no preference&quot;"/>
            <parameter tag="" value="&quot;PCS&quot;"/>
            <parameter tag="" value="s_strPrimaryPSX"/>
            <parameter tag="" value="s_strBackupPSX"/>
            <parameter tag="" value="g_oAPI.nRingNoAnswerTimeout"/>
            <parameter tag="" value="bTrue"/>
          </SOAP>
          <results >
            <result name="Default" link="3" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="more to send" link="2" stubbed="0" >idx &lt; nRoutes</result>
          </results>
          <scripts >
            <script language="javascript" timing="middle" ><![CDATA[Session.idx++ ;



Session.nSent++ ;]]></script>
          </scripts>
        </action>
        <action id="3" plug-in="Standard.WaitEvent.1" ><?xtml-editor x=357 y=238 ?>
          <wait xmlns="urn:www.pactolus.com:xtml:communication" timeout="90" recv-name="strEvent" >
            <msg name="Pactolus.EveSipCancel.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCallId</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCSeq</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strFrom</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strTo</parameter>
              <parameter ></parameter>
              <parameter >strVia</parameter>
            </msg>
            <msg name="ScreenResponse" >
              <parameter >sResponse</parameter>
              <parameter >strSession</parameter>
              <parameter >strFrom</parameter>
              <parameter >strTo</parameter>
              <parameter >strCallId</parameter>
              <parameter >strCSeq</parameter>
              <parameter >strRemoteUri</parameter>
              <parameter >strRoute</parameter>
              <parameter >strRemoteSdp</parameter>
            </msg>
          </wait>
          <results >
            <result name="Default" link="3" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout" link="11" stubbed="0"/>
            <result name="caller hung up" link="7" stubbed="0" >strEvent match "SipCancel"</result>
            <result name="got true answer" link="11" stubbed="0" >strEvent match "ScreenResponse"



AND sResponse &gt;= 0</result>
            <result name="no call legs left" link="5" stubbed="0" >nSent == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.idx = 0 ;



Session.strEvent = "" ;]]></script>
            <script language="javascript" timing="middle" ><![CDATA[if( -1 != Session.strEvent.indexOf("ScreenResponse" ) ) {







	for( var i = 0; i < Session.g_oSimRingCallLegs.length; i++ ) {



	



		/* find the call leg that responded */



		if( 0 == Clib.strcmp(Session.strSession, Session.g_oSimRingCallLegs[i].strSession) ) {



			Session.g_oSimRingCallLegs[i].bActiveScreenRequest = false ;



			Server.logInfo("Session id no longer has an active screen request: " + Session.g_oSimRingCallLegs[i].strSession ) ;



			



			if( 0 == Session.sResponse ) {



				Session.g_oCallLegs[1] = Session.g_oSimRingCallLegs[i] ;



				Server.logInfo("dest " + Session.g_oCallLegs[1].strOutdialDestNbrNoRouteCode ) ;



			}



			break ;



		}



	}



	Session.nSent-- ;



	Server.logInfo("got ScreenResponse " + Session.sResponse + "; there are " + Session.nSent + " call legs still trying") ;



}]]></script>
          </scripts>
        </action>
        <action id="5" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=323 y=44 ?>
          <!--not connected-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="-1"/>
        </action>
        <action id="7" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=605 y=257 ?>
          <!--200 OK to Cancel-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >"SIP/2.0 200 OK"</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="8" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bAlegHungUp = true ;







Server.logInfo("Received CANCEL from A, terminate all out bound legs") ;



Session.sResponse = -1 ;]]></script>
          </scripts>
        </action>
        <action id="8" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=807 y=243 ?>
          <!--487 Request Terminated-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >g_oCallLegs[0].strCallId</call-id>
            <cseq >g_oCallLegs[0].strCSeq</cseq>
            <from >g_oCallLegs[0].strFrom</from>
            <status >"SIP/2.0 487 Request Terminated"</status>
            <to >g_oCallLegs[0].strTo</to>
            <via >g_oCallLegs[0].strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="11" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="9" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=605 y=621 ?>
          <!---1 decline, 0 accept, 1 - send to voicemail-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="nReturn"/>
        </action>
        <action id="10" plug-in="Pactolus.SOAPMessage.1" ><?xtml-editor x=335 y=518 ?>
          <SOAP xmlns="urn:www.pactolus.com:xtml:communication" destination-ip="" transaction="" message-name="&quot;ScreenCancel&quot;" destination-port="" destination-type="3" destination-session="g_oSimRingCallLegs[idx].strSession" waiting-session-selected="" xml-namespace=""/>
          <results >
            <result name="Default" link="11" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="middle" ><![CDATA[Session.idx++ ;]]></script>
          </scripts>
        </action>
        <action id="11" plug-in="Pactolus.Branch.1" ><?xtml-editor x=52 y=469 ?>
          <results >
            <result name="Default" link="10" stubbed="0"/>
            <result name="no remaining legs" link="12" stubbed="0" >idx &lt; 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("idx: " + Session.idx + " number of call legs attempted: " + Session.g_oSimRingCallLegs.length ) ;



var found = false ;



for( var i = Session.idx; !found && i < Session.g_oSimRingCallLegs.length; i++ ) {



	if( Session.g_oSimRingCallLegs[i].bActiveScreenRequest ) {



		Session.idx = i ;



		found = true ;



		Session.g_oSimRingCallLegs[i].bActiveScreenRequest = false ;



		Server.logInfo("Sending cancel to: " + Session.g_oSimRingCallLegs[i].strSession );



	}	



}







if( !found ) {



	Session.idx = -1 ;



}]]></script>
          </scripts>
        </action>
        <action id="12" plug-in="Pactolus.Branch.1" ><?xtml-editor x=52 y=607 ?>
          <results >
            <result name="Default" link="9" stubbed="0"/>
            <result name="wants to connect" link="13" stubbed="0" >sResponse == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if( 0 == Session.sResponse ) {



	Session.nReturn = 0 ;



	Server.logInfo("Connecting caller to called party; dtmf response indicated a desire to connect the call") ;



}



else if( Session.sResponse > 0 ) {



	Session.nReturn = 1 ;



	Server.logInfo("Connecting caller to voicemail; dtmf response indicated subscriber does not want to take the call") ;



}



else {



	Server.logInfo("Terminating call legs because caller hung up") ;



	Session.nReturn = Session.sResponse ;



}]]></script>
          </scripts>
        </action>
        <action id="13" plug-in="Pactolus.SipInvite.1" ><?xtml-editor x=25 y=879 ?>
          <!--INVITE B to A-->
          <sip-invite xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" handle-responses="1" follow-redirection="0" final-response-status="" response-content="strNewContent" response-content-type="" final-request-uri="" timeout-for-final-response="" timeout-for-provisional-response="" record-route="" contact="" response-to="" use-session-timer="0" session-expires="" min-supported-session-timer="" refresher="" remote-party-id="" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >g_oCallLegs[1].strCallId</call-id>
            <contact >strContact</contact>
            <content >g_oCallLegs[0].strRemoteSdp</content>
            <content-type >"application/sdp"</content-type>
            <cseq >g_oCallLegs[1].strCSeq</cseq>
            <from >g_oCallLegs[1].strFrom</from>
            <request-uri >g_oCallLegs[1].strRemoteUri</request-uri>
            <route >g_oCallLegs[1].strRoute</route>
            <to >g_oCallLegs[1].strTo</to>
          </sip-invite>
          <results >
            <result name="Default" link="15" stubbed="0"/>
            <result name="Success" link="14" stubbed="0"/>
            <result name="Redirect (3xx)"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Provisional Timeout"/>
            <result name="Final Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[1].strFrom = Session.strFrom ;



Session.g_oCallLegs[1].strTo = Session.strTo ;



Session.g_oCallLegs[1].strCallId = Session.strCallId ;



Session.g_oCallLegs[1].strCSeq = Session.strCSeq ;



Session.g_oCallLegs[1].strRemoteUri = Session.g_oCallLegs[1].strRequestUri = Session.strRemoteUri ;



Session.g_oCallLegs[1].strRoute = Session.strRoute ;



Session.g_oCallLegs[1].strRemoteSdp = Session.strRemoteSdp ;



Session.g_oCallLegs[1].lTimeStart = Server.getUTCTime() ;







/* establish our local contact address */



var localHost = Server.sipAddress ;



if( 5060 != Server.sipPort ) {



	localHost += ":" ;



	localHost += Server.sipPort ;



}



Session.strContact = "<sip:" ;



Session.strContact += Session.g_oAPI.strAniReceived ;



Session.strContact += "@" ;



Session.strContact += localHost ;



Session.strContact += ">" ;







]]></script>
          </scripts>
        </action>
        <action id="14" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=431 y=1011 ?>
          <!--200 OK to A-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >g_oCallLegs[0].strCallId</call-id>
            <contact >g_oCallLegs[0].strContact</contact>
            <content >strNewContent</content>
            <content-type >"application/sdp"</content-type>
            <cseq >g_oCallLegs[0].strCSeq</cseq>
            <from >g_oCallLegs[0].strFrom</from>
            <record-route >g_oCallLegs[0].strRecordRoute</record-route>
            <status >"SIP/2.0 200 OK"</status>
            <to >g_oCallLegs[0].strTo</to>
            <via >g_oCallLegs[0].strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="9" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="15" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=214 y=751 ?>
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" handle-responses="0" increment-cseq-first="1" increment-cseq-last="0" >
            <call-id >g_oCallLegs[1].strCallId</call-id>
            <cseq >g_oCallLegs[1].strCSeq</cseq>
            <from >g_oCallLegs[1].strFrom</from>
            <request-uri >g_oCallLegs[1].strRemoteUri</request-uri>
            <route >g_oCallLegs[1].strRoute</route>
            <to >g_oCallLegs[1].strTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="16" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Terminating B leg because there was an error connecting him or her to the caller") ;



Session.nReturn = -1 ;]]></script>
          </scripts>
        </action>
        <action id="16" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=430 y=817 ?>
          <!--480 Temporarily Unavailable-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >g_oCallLegs[0].strCallId</call-id>
            <content >g_oCallLegs[1].strRemoteSdp</content>
            <content-type >"application/sdp"</content-type>
            <cseq >g_oCallLegs[0].strCSeq</cseq>
            <from >g_oCallLegs[0].strFrom</from>
            <record-route >g_oCallLegs[0].strRecordRoute</record-route>
            <status >"SIP/2.0 480 Temporarily Unavailable"</status>
            <to >g_oCallLegs[0].strTo</to>
            <via >g_oCallLegs[0].strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="9" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
      </actions>
    </function>
  </functions>
  <script language="javascript" ><![CDATA[#include <javascript_utils.jsh>



#include <dialing_plan_utils.jsh>







function InitTimers()



{



	Session.g_oTimer.lMaxCallDuration = Session.g_oTimer.lThresholdTimer1 = Session.g_oTimer.lThresholdTimer2 = Session.g_oTimer.lThresholdTimer3 = 0 ;



}







function InitVars()



{



	InitTimers() ;



	js_initVoipCallLeg( Session.g_oCallLegs[0] ); 



	js_initVoipCallLeg( Session.g_oCallLegs[1] ); 



	js_initAPI( Session.g_oAPI ) ;



	js_initMS( Session.g_oMS, Session.s_strMsType ) ;



	js_initVoipAccessLine( Session.g_oAccessLine ) ;



	js_initVoipService( Session.g_oVoipService ) ;



	js_initRATE( Session.g_oRate ) ;







	Session.g_oMS.strCodec = "PCMU" ;



	Session.g_oAPI.strBroadbandCallingFlag = "T" ;



	



	Session.g_oCallLegs[0].nState = Session.s_LEG_STATE_NONE ;



	Session.g_oCallLegs[1].nState = Session.s_LEG_STATE_NONE ;



	Session.g_oCallLegs[0].bUac = false ;



	Session.g_oCallLegs[1].bUac = true ;



	Session.g_strSessionId = Session._sessionId ;



}







function isPrivacyRequested( sip_call ) 



{



	var restricted = false ;



	var s = new String( sip_call.strFrom ) ;



	if( -1 != s.indexOf("Restricted") ) {



		restricted = true ;



	}



	else if (-1 != s.indexOf("Anonymous") ) {



		restricted = true ;



	}



 	else {



 		var anon = new String( sip_call.strAnonymity ) ;



 		if( -1 != anon.indexOf("uri") || -1 != anon.indexOf("full") || -1 != anon.indexOf("name") ) {



 			restricted = true ;



 		}



 	}



	if( !restricted ) {

		var privacy = new String( sip_call.strPrivacy ) ;

		if( -1 != privacy.indexOf("id") || -1 != privacy.indexOf("full") ) {

			restricted = true ;

			Server.logInfo("This caller has blocked caller id (based on Privacy header)") ;

		}

	}



	/* anything else to check */



	return restricted ;



}



]]></script>
  <properties >
    <property key="default" value="C:/Pactolus/media/PCS_prompts_english.pmg"/>
    <property key="disable-logging" value="0"/>
    <property key="js-include-path" value="../Libs"/>
    <property key="library-modules" value="lib_mediaserver.xml;lib_callcontrol.xml;lib_APISce.xml;lib_voip.xml"/>
    <property key="library-path" value="../Libs"/>
  </properties>
  <application-version >
    <revision >$Id: pcs_voip_terminate.xml,v 1.225.2.4 2010/03/30 19:22:06 jgibson Exp $</revision>
    <label >$Name: PCS-A-4-1-1-1-4-c6 $</label>
  </application-version>
</xtml>