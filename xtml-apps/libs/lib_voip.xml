<?xml version="1.0"?>
<xtml version="1.0" xmlns="urn:www.pactolus.com:xtml" >
  <version sce-version="6021" prev-sce-version="6021" last-mod-time="Thursday, March 18, 2010 11:42:45"/>
  <global-handlers/>
  <global-vars >
    <var name="iReturnValue" type="i4" >0</var>
  </global-vars>
  <shared-vars >
    <var name="s_RET_SUCCESS" type="i2" >0</var>
    <var name="s_RET_CALLER_HUNGUP" type="i2" >-2</var>
    <var name="s_RET_FAIL" type="i2" >-1</var>
    <var name="s_strLocalHost" type="string" ></var>
    <var name="s_strCustomerCode" type="string" ></var>
    <var name="s_ON_NET" type="i2" >1</var>
    <var name="s_OFF_NET" type="i2" >2</var>
    <var name="s_CT_IVR_MENU" type="i2" >18</var>
    <var name="s_CT_VM_DEPOSIT" type="i2" >3</var>
    <var name="nTimeout" type="i4" >0</var>
    <var name="s_CT_VM_RETRIEVAL" type="i2" >2</var>
    <var name="s_CT_FORWARD" type="i2" >5</var>
  </shared-vars>
  <functions >
    <function name="GetSIPAddress" start="1" event="GetSIPAddress" returns="i4" >
      <parameters >
        <parameter name="strDBName" type="string" pass="byref"/>
        <parameter name="strPlatformSessionId" type="string" pass="byref"/>
        <parameter name="oSubscriber" type="object" pass="byref"/>
        <parameter name="strRealm" type="string" pass="byref"/>
        <parameter name="lVoiceMailAccountId" type="i8" pass="byref"/>
        <parameter name="lAccessLineId" type="i8" pass="byref"/>
        <parameter name="nTimezoneId" type="i4" pass="byref"/>
        <parameter name="strMWIOffFlag" type="string" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="iReturnCode" type="i4" >0</var>
        <var name="iTimeout" type="i4" >20</var>
      </local-vars>
      <actions >
        <action id="1" plug-in="Pactolus.JavaStaticMethod.1" ><?xtml-editor x=69 y=176 ?>
          <java xmlns="urn:www.pactolus.com:xtml:application" class="&quot;com.pactolus.broadband.psAPISceRegister&quot;" method="&quot;getSipAddress&quot;" timeout="iTimeout" return="iReturnValue" method-return-var="iReturnCode" method-return-type="0" >
            <parameter type="in" var-type="string" >strPlatformSessionId</parameter>
            <parameter type="in" var-type="string" >strDBName</parameter>
            <parameter type="in" var-type="string" >oSubscriber.strPhone</parameter>
            <parameter type="in" var-type="string" >strRealm</parameter>
            <parameter type="in" var-type="i8" >lVoiceMailAccountId</parameter>
            <parameter type="in" var-type="i8" >lAccessLineId</parameter>
            <parameter type="in" var-type="i4" >nTimezoneId</parameter>
            <parameter type="inout" var-type="string" >oSubscriber.strContact</parameter>
            <parameter type="inout" var-type="string" >oSubscriber.strRecordRoute</parameter>
            <parameter type="inout" var-type="string" >strMWIOffFlag</parameter>
          </java>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.iReturnCode = -50;



Server.logInfo("********GET SIP ADDRESS******");

Server.logInfo("Phone Number: "  + Session.oSubscriber.strPhone ) ;

Server.logInfo("SIP Realm: " + Session.strRealm ) ;

Server.logInfo("Voice Mail Account ID: " + Session.lVoiceMailAccountId ) ;

Server.logInfo("Access Line ID: " + Session.lAccessLineId ) ;

Server.logInfo("Time Zone ID: " + Session.nTimezoneId ) ;



if ( 0 == Session.strDBName.length ) {

	Session.strDBName = "pactolusdb" ;

	Server.logInfo("No DB Name provided. Setting to pactolusdb.") ;

}

]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.logInfo("RETURN Contact: " + Session.oSubscriber.strContact ) ;

Server.logInfo("RETURN RecordRoute: " + Session.oSubscriber.strRecordRoute ) ;

Server.logInfo("RETURN MWI Off Flag: " + Session.strMWIOffFlag ) ;

]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=318 y=200 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value="iReturnCode"/>
        </action>
      </actions>
      <text-objects >
        <text-object x-coord="171" y-coord="13" width="191" height="109" text="OUT:

oSubscriber.strContact

oSubscriber.strRecordRoute

strDBName" font-name="Times New Roman" size="-16" red="0" green="0" blue="0" weight="0" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="19" y-coord="13" width="153" height="92" text="IN:

strPlatformSessionId

oSubscriber.strPhone

strRealm" font-name="Times New Roman" size="-16" red="0" green="0" blue="0" weight="0" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="384" y-coord="15" width="220" height="141" text="Return Values:

0 = Success

-1 = Device Not Online

-2 = Phone Not Found

-99 = System Error" font-name="Times New Roman" size="-16" red="0" green="0" blue="0" weight="0" underline="0" strikeout="0" point-size="12" italic="0"/>
      </text-objects>
    </function>
    <function name="ProxyCall_Internal" start="20" event="ProxyCall_Internal" returns="boolean" >
      <parameters >
        <parameter name="oCallLegA" type="object" pass="byref"/>
        <parameter name="oCallLegB" type="object" pass="byref"/>
        <parameter name="nRingNoAnswerTimeout" type="i4" pass="byref"/>
        <parameter name="bRtpRelayRequested" type="boolean" pass="byref"/>
        <parameter name="oRtpRelay" type="object" pass="byref"/>
        <parameter name="nSessionTimerA" type="i4" pass="byref"/>
        <parameter name="bRefreshSessionTimerA" type="boolean" pass="byref"/>
        <parameter name="nSessionTimerB" type="i4" pass="byref"/>
        <parameter name="bRefreshSessionTimerB" type="boolean" pass="byref"/>
        <parameter name="bProxyFinalNonSuccessResponse" type="boolean" pass="byref"/>
        <parameter name="nFinalStatus" type="i4" pass="byref"/>
        <parameter name="bAlegHungUp" type="boolean" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="bCallIdMatch" type="boolean" >0</var>
        <var name="bGotAck" type="boolean" >0</var>
        <var name="bGotCancel" type="boolean" >0</var>
        <var name="bGotResponse" type="boolean" >0</var>
        <var name="bNewSdp" type="boolean" >0</var>
        <var name="nReturn" type="i4" >0</var>
        <var name="nSessionTimer" type="i4" >0</var>
        <var name="nTimeout" type="i4" >0</var>
        <var name="nValue" type="i4" >0</var>
        <var name="strAccept" type="string" ></var>
        <var name="strAcceptEncoding" type="string" ></var>
        <var name="strAcceptLanguage" type="string" ></var>
        <var name="strCallId" type="string" ></var>
        <var name="strContact" type="string" ></var>
        <var name="strContent" type="string" ></var>
        <var name="strContentDisposition" type="string" ></var>
        <var name="strContentType" type="string" ></var>
        <var name="strCSeq" type="string" ></var>
        <var name="strDate" type="string" ></var>
        <var name="strEncryption" type="string" ></var>
        <var name="strEvent" type="string" ></var>
        <var name="strFrom" type="string" ></var>
        <var name="strInReplyTo" type="string" ></var>
        <var name="strProxyAuthenticate" type="string" ></var>
        <var name="strProxyAuthorization" type="string" ></var>
        <var name="strRecordRoute" type="string" ></var>
        <var name="strRequestUri" type="string" ></var>
        <var name="strRequire" type="string" ></var>
        <var name="strSessionExpires" type="string" ></var>
        <var name="strStatus" type="string" ></var>
        <var name="strSupported" type="string" ></var>
        <var name="strTimestamp" type="string" ></var>
        <var name="strTo" type="string" ></var>
        <var name="strUnsupported" type="string" ></var>
        <var name="strUri" type="string" ></var>
        <var name="strUserName" type="string" ></var>
        <var name="strVia" type="string" ></var>
        <var name="strViaFromCancelRequest" type="string" ></var>
        <var name="strWarning" type="string" ></var>
        <var name="strWWWAuthenticate" type="string" ></var>
        <var name="bRtpRelay" type="boolean" >0</var>
        <var name="bDialogExists" type="boolean" >0</var>
        <var name="strSdpToOfferB" type="string" ></var>
        <var name="strSdpToOfferA" type="string" ></var>
        <var name="bConnected" type="boolean" >0</var>
        <var name="strMyContact" type="string" ></var>
        <var name="strMyVia" type="string" ></var>
        <var name="strRetryAfter" type="string" ></var>
        <var name="strRSeq" type="string" ></var>
        <var name="strBlegFrom" type="string" ></var>
        <var name="strBlegTo" type="string" ></var>
        <var name="strAlegFrom" type="string" ></var>
        <var name="strAlegTo" type="string" ></var>
        <var name="strRedirectUri" type="string" ></var>
        <var name="nIdx" type="i4" >0</var>
        <var name="bRedirected" type="boolean" >0</var>
        <var name="nContactLength" type="i4" >0</var>
        <var name="bAllocateNewRtp" type="boolean" >0</var>
        <var name="strRoute" type="string" ></var>
        <var name="strCANCELUri" type="string" ></var>
        <var name="strTemp" type="string" ></var>
        <var name="oRedirectUrl" type="object" ></var>
        <var name="bUseProxyIP" type="boolean" >0</var>
        <var name="bGotCaleaNotify" type="boolean" >0</var>
        <var name="strNotifyEvent" type="string" ></var>
        <var name="strSubscriptionState" type="string" ></var>
        <var name="strCaleaOriginationNumber" type="string" ></var>
        <var name="strCaleaTerminationNumber" type="string" ></var>
        <var name="strCaleaSurveiledNumber" type="string" ></var>
        <var name="bInviteOnHold" type="boolean" >0</var>
        <var name="bInviteOffHold" type="boolean" >0</var>
        <var name="bIsBNated" type="boolean" >0</var>
        <var name="strMinSE" type="string" ></var>
        <var name="bInviteOnHoldNoTimers" type="boolean" >0</var>
        <var name="strInviteSessionExpires" type="string" ></var>
        <var name="bGotBye" type="boolean" >0</var>
        <var name="lRNAStart" type="i8" >0</var>
        <var name="bAwaitingResponse" type="boolean" >0</var>
        <var name="bGotNoRtpNotify" type="boolean" >0</var>
        <var name="strBLegProxyAuthorization" type="string" ></var>
        <var name="bSBC" type="boolean" >0</var>
        <var name="strResponse" type="string" ></var>
        <var name="bFailed302" type="boolean" >0</var>
        <var name="strCIC" type="string" ></var>
        <var name="bCIC" type="boolean" >0</var>
        <var name="bOutdialBWithConnectedA" type="boolean" >0</var>
      </local-vars>
      <actions >
        <action id="20" plug-in="Pactolus.Branch.1" ><?xtml-editor x=15 y=182 ?>
          <results >
            <result name="Default" link="12" stubbed="0"/>
            <result name="rtp relay requested?" link="29" stubbed="0" >bAllocateNewRtp == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Ring no answer timeout: " + Session.nRingNoAnswerTimeout ) ;

/* If there is a tag on the To header of A call leg, then a dialog already exists */

Session.bDialogExists = false ;

if( -1 != Session.oCallLegB.strTo.toString().indexOf( "tag=" ) ) {

	Session.bDialogExists = true ;

}



Session.bOutdialBWithConnectedA = (!Session.bDialogExists && Session.oCallLegA.bConnected ) ;

if( Session.bOutdialBWithConnectedA ) {

	Server.logInfo("We are outdialing a new B leg while the A leg is already stable; probably a screened or AA call") ;

}



/* 	determine whether rtp relay is required.

	In the case of a reINVITE to the same Sdp, the caller

	will tell us he's doing RTP relay, but we don't need to destroy/create the endpoint

*/

if( Session.bRtpRelayRequested ) {

	Session.oRtpRelay.bForking = false ;

	if( Session.bDialogExists && Session.oCallLegA.strRemoteSdp == Session.oRtpRelay.ep[0].strRemoteSdp ) {

		Server.logInfo("Processing a reINVITE with same SDP; don't modify rtp relay endpoints"); 	

		Session.strSdpToOfferB = Session.oRtpRelay.ep[1].strSdp ;

	}

	else {

		Session.bAllocateNewRtp = true ;

	}

	if( Session.bDialogExists && Session.bAllocateNewRtp ) {



		/* check if this is an INVITE on hold */

		var s = new String( Session.oCallLegA.strRemoteSdp ) ;

		if( -1 != s.indexOf("c=IN IP4 0.0.0.0") ) {

			Server.logInfo("Processing an INVITE on hold" ) ;

			Session.bInviteOnHold = true ;

			Session.bAllocateNewRtp = false ;

			var newSdp = new Sdp( Session.oRtpRelay.ep[1].strSdp.toString() ) ;

			newSdp.connection.address = "0.0.0.0" ;

			Session.strSdpToOfferB = Session.oRtpRelay.ep[1].strSdp = newSdp.encode() ;

			Session.oRtpRelay.ep[0].strRemoteSdp = Session.oCallLegA.strRemoteSdp ;

					

		}

		else {

			var old = new String( Session.oRtpRelay.ep[1].strSdp ) ;

			if( -1 != old.indexOf("c=IN IP4 0.0.0.0") ) {

				Server.logInfo("Processing an INVITE off hold" ) ;

				Session.bInviteOffHold = true ;			

				Session.bAllocateNewRtp = true ;

				var newSdp = new Sdp(Session.oCallLegA.strRemoteSdp.toString());

				if( Session.oCallLegB.strPublicIpAddress.length > 0 ) {

					newSdp.connection.address = Session.oCallLegB.strPublicIpAddress ;

				}

				else {

					newSdp.connection.address = Server.ipAddress ;

				}

				Session.strSdpToOfferB = Session.oRtpRelay.ep[1].strSdp = newSdp.encode() ; 

				Session.oRtpRelay.ep[0].strRemoteSdp = Session.oCallLegA.strRemoteSdp ;

			}

			else {

				Server.logInfo("Processing a reINVITE with new SDP.  Original SDP: \n" + Session.oRtpRelay.ep[1].strRemoteSdp) ;

				Server.logInfo("New SDP: \n" + Session.oCallLegA.strRemoteSdp ); 

			}

		}

	}

}



if( !Session.bRtpRelayRequested ) {

	if ( 0 < Session.oCallLegA.strSdpToOfferB.length ) {

		Session.strSdpToOfferB = Session.oCallLegA.strSdpToOfferB;

	}

	else{

		Session.strSdpToOfferB = Session.oCallLegA.strRemoteSdp ;

	}

}



if( null != Session.oCallLegA.bUac ) {

	if( Session.oCallLegA.bUac ) {

		Session.strAlegFrom = Session.oCallLegA.strTo ;

		Session.strAlegTo = Session.oCallLegA.strFrom ;

		Session.strBlegFrom = Session.oCallLegB.strTo ;

		Session.strBlegTo = Session.oCallLegB.strFrom ;

	}

	else {

		Session.strAlegFrom = Session.oCallLegA.strFrom ;

		Session.strAlegTo = Session.oCallLegA.strTo ;

		Session.strBlegFrom = Session.oCallLegB.strFrom ;

		Session.strBlegTo = Session.oCallLegB.strTo ;

	} 

}

else if( null != Session.oCallLegB.bUac ) {

	if( Session.oCallLegB.bUac ) {

		Session.strAlegFrom = Session.oCallLegA.strFrom ;

		Session.strAlegTo = Session.oCallLegA.strTo ;

		Session.strBlegFrom = Session.oCallLegB.strFrom ;

		Session.strBlegTo = Session.oCallLegB.strTo ;

	}

	else {

		Session.strAlegFrom = Session.oCallLegA.strTo ;

		Session.strAlegTo = Session.oCallLegA.strFrom ;

		Session.strBlegFrom = Session.oCallLegB.strTo ;

		Session.strBlegTo = Session.oCallLegB.strFrom ;

	} 

}

else {

	/* assume we are UAS on A leg */

	Session.oCallLegA.bUac = false ;

	Session.oCallLegB.bUac = true ;

	Session.strAlegFrom = Session.oCallLegA.strFrom ;

	Session.strAlegTo = Session.oCallLegA.strTo ;

	Session.strBlegFrom = Session.oCallLegB.strFrom ;

	Session.strBlegTo = Session.oCallLegB.strTo ;	

}

Session.oRedirectUrl.length = 0 ;

Session.nFinalStatus = 0 ;



if ( true == Session.oCallLegB.b911 ) {

	Session.bUseProxyIP = true ;

}



//determine if call to this function is from the SBC

// need to know this in the case of handling certain call flows, such as a 302 response

if ( -1 != Session._appName.toString().indexOf("pcs_nat_") ) {

	Session.bSBC = true;

}]]></script>
          </scripts>
        </action>
        <action id="1" plug-in="Pactolus.MGCPCreate.1" ><?xtml-editor x=538 y=280 ?>
          <!--Create the UAS-facing end of the RTP Relay-->
          <crcx xmlns="urn:www.pactolus.com:xtml:media" callid="oRtpRelay.ep[1].strCallId" remote-sdp="oCallLegA.strRemoteSdp" mode="send/receive" capability="1" returns="" endpoint="oRtpRelay.ep[1].strEndpoint" connection-id="oRtpRelay.ep[1].strConnectionId" local-sdp="oRtpRelay.ep[1].strSdp" packetization-period="" codec="-1" timeout="3" local-connection-options="" second-endpoint-id="" telephone-events="0" ms-type="&quot;PCS&quot;" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </crcx>
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="Success" link="12" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oRtpRelay.ep[1].bAllocated = true ;

Session.oRtpRelay.ep[0].bAllocated = false ;



/* 	save the remote Sdp we are streaming to, 

	so that we can later detect a reINVITE to the same Sdp 

*/

Session.oRtpRelay.ep[0].strRemoteSdp = Session.oCallLegA.strRemoteSdp ;]]></script>
            <script language="javascript" timing="last" ><![CDATA[if( Session.bInviteOnHold ) {

	Session.oRtpRelay.ep[1].strSdp = js_modify_sdp_address_and_port( Session.oRtpRelay.ep[1].strSdp, 

		"0.0.0.0", 0 ) ; 

	Server.logInfo("Modifying my SDP for for an INVITE on hold: " + Session.oRtpRelay.ep[1].strSdp ) ;



}

else if( Session.oCallLegB.strPublicIpAddress.length > 0 ) {

	Session.oRtpRelay.ep[1].strSdp = js_modify_sdp_address_and_port( Session.oRtpRelay.ep[1].strSdp, 

		Session.oCallLegB.strPublicIpAddress, 0 ) ; 

	Server.logInfo("Modifying my SDP for B leg to use my public address: " + Session.oRtpRelay.ep[1].strSdp ) ;

}



Session.strSdpToOfferB = Session.oRtpRelay.ep[1].strSdp ;]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=838 y=293 ?>
          <!--480 Temporarily Unavailable-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oCallLegA.strCallId</call-id>
            <cseq >oCallLegA.strCSeq</cseq>
            <from >strAlegFrom</from>
            <status >strStatus</status>
            <to >strAlegTo</to>
            <via >oCallLegA.strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="21" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[//add a tag to the To header if there was previously none

if( !Session.bDialogExists ) {

	Session.strAlegTo = Session.strAlegTo + ";tag=" + Server.getUTCTime() ;

}



Session.strStatus = "SIP/2.0 480 Temporarily Unavailable";

var media = new Sdp(Session.oCallLegA.strRemoteSdp.toString());

if ( -1 != media.media[0].toString().indexOf("t38") ) {

	Session.strStatus = "SIP/2.0 488 Not Acceptable Here";

}



]]></script>
          </scripts>
        </action>
        <action id="4" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=316 y=1263 ?>
          <!--Send ACK to Called Party with same branch on Via as INVITE-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oCallLegB.strCallId</call-id>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >strBlegFrom</from>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <timestamp >strTimestamp</timestamp>
            <to >oCallLegB.strTo</to>
            <via >strMyVia</via>
          </sip-ack>
          <results >
            <result name="Default" link="21" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if ( true == Session.oCallLegB.b911 ) {

	Session.strTo = Session.oCallLegB.strTo ;

}]]></script>
          </scripts>
        </action>
        <action id="5" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=559 y=1512 ?>
          <!--true-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bConnected"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bConnected = true ;

Session.oCallLegB.bConnected = true;

var cseq = new SipCSeq(Session.oCallLegA.strCSeq.toString()) ;

cseq.increment() ;

Session.oCallLegA.strCSeq = cseq.encode() ;



Server.enableEvents(true) ;

Server.logInfo("successfully connected") ;]]></script>
          </scripts>
        </action>
        <action id="7" plug-in="Pactolus.SipCancel.1" ><?xtml-editor x=618 y=557 ?>
          <!--Send CANCEL to Called Party-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" handle-responses="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oCallLegB.strCallId</call-id>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >oCallLegB.strFrom</from>
            <request-uri >strCANCELUri</request-uri>
            <to >strBlegTo</to>
            <via >strMyVia</via>
          </sip-bye>
          <results >
            <result name="Default" link="11" stubbed="1"/>
            <result name="Success"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.strViaFromCancelRequest = Session.strVia ;

Session.bAlegHungUp = true ;



if ( 0 < Session.strRedirectUri.length ) {

	Session.strCANCELUri = Session.strRedirectUri ;

	var cseq = new SipCSeq(Session.strCSeq) ;

	cseq.increment() ;

	Session.strCSeq = cseq.encode() ;

}

else {

	Session.strCANCELUri = Session.oCallLegB.strRemoteUri ;

}



if ( !Session.bRedirected && !Session.oCallLegB.b911 ) {

	Session.strBlegTo = Session.oCallLegB.strOriginalTo ;

}]]></script>
          </scripts>
        </action>
        <action id="8" plug-in="Pactolus.Branch.1" ><?xtml-editor x=69 y=1314 ?>
          <results >
            <result name="Default" link="4" stubbed="0"/>
            <result name="Connected" link="9" stubbed="0" >nFinalStatus &gt;= 200

AND nFinalStatus &lt;= 299

AND bAlegHungUp == false</result>
          </results>
        </action>
        <action id="9" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=318 y=1467 ?>
          <!--Send ACK to Called Party with new branch on Via-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oCallLegB.strCallId</call-id>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >strFrom</from>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <route >oCallLegB.strRoute</route>
            <timestamp >strTimestamp</timestamp>
            <to >strTo</to>
          </sip-ack>
          <results >
            <result name="Default" link="5" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* if the ACK had a Route header, send it there */

if( !Session.bDialogExists && Session.strRoute.length > 0 ) {

	js_calculate_uri_and_route_as_proxy( Session.strRoute, Session.oCallLegB.strRemoteUri ) ;

	Session.oCallLegB.strRoute = Session.strRoute ;

	Server.logInfo("Calculating Uri from Route header on ACK: " +  Session.oCallLegB.strRemoteUri ) ;

}



if( Session.bDialogExists && !Session.oCallLegB.bUac ) {

	Server.logInfo("Sending ACK for reINVITE to original UAS") ;

	Session.strTo = Session.oCallLegB.strFrom ;

	Session.strFrom = Session.oCallLegB.strTo ;

}

else { 

	Session.strTo = Session.oCallLegB.strTo ;

	Session.strFrom = Session.oCallLegB.strFrom ;

}]]></script>
          </scripts>
        </action>
        <action id="10" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=1077 y=700 ?>
          <!--Send responses on the Caller-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <accept >strAccept</accept>
            <accept-language >strAcceptLanguage</accept-language>
            <call-id >oCallLegA.strCallId</call-id>
            <contact >strContact</contact>
            <content >strSdpToOfferA</content>
            <content-type >strContentType</content-type>
            <cseq >strCSeq</cseq>
            <date >strDate</date>
            <encryption >strEncryption</encryption>
            <from >strAlegFrom</from>
            <in-reply-to >strInReplyTo</in-reply-to>
            <proxy-authenticate >strProxyAuthenticate</proxy-authenticate>
            <proxy-authorization >strProxyAuthenticate</proxy-authorization>
            <record-route >oCallLegA.strRecordRoute</record-route>
            <retry-after >strRetryAfter</retry-after>
            <require >strRequire</require>
            <session-expires >strSessionExpires</session-expires>
            <status >strStatus</status>
            <supported >strSupported</supported>
            <timestamp >strTimestamp</timestamp>
            <to >strTo</to>
            <unsupported >strUnsupported</unsupported>
            <via >strVia</via>
            <warning >strWarning</warning>
            <www-authenticate >strWWWAuthenticate</www-authenticate>
            <additional-parameters >
              <server >oCallLegA.strServer</server>
            </additional-parameters>
          </sip-response>
          <results >
            <result name="Default" link="11" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
            <result name="New remote SDP" >bNewSdp == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[var invite_response = false ;

var cancel_response = false ;

var cseq_called = new SipCSeq( Session.strCSeq.toString() ) ;

Server.logInfo("Remote CSeq for A leg passed in was: " + Session.oCallLegA.strRemoteCSeq ) ;

var cseq_caller = new SipCSeq( Session.oCallLegA.strRemoteCSeq.toString() ) ;



if( cseq_called.method == "INVITE" ) {

	invite_response = true ;

	

	/* If we are sending a final response back to A,

		AND there is a tag on the To header, and there is as yet no tag on the A leg To header 

		THEN update the A leg To header with a tag */

	if ( -1 != Session.strTo.indexOf("tag=") && -1 == Session.oCallLegA.strTo.indexOf("tag=") &&

		Session.nFinalStatus >= 200 ) {

			

		var tag = new SipTo(Session.strTo);

		

		if ( -1 != Session.oCallLegA.strTo.toString().indexOf("dtg=")){

			Session.oCallLegA.strTo += ";tag=";

			Session.oCallLegA.strTo += tag.tag.toString();

		}

		else {

//			var ALegTo = new SipTo(Session.oCallLegA.strTo.toString());
//
//			ALegTo.tag = tag.tag ;
//
//			Session.oCallLegA.strTo = ALegTo.encode();
            Session.oCallLegA.strTo += ";tag=";
            Session.oCallLegA.strTo += tag.tag.toString();


		}

	} 

}

else if( cseq_called.method == "CANCEL" ) {

	cancel_response = true ;

}	



cseq_caller.method = cseq_called.method ;

Session.strCSeq = cseq_caller ;





if( Session.nFinalStatus == 200 && invite_response ) {



	/* if the far end doesn't support timers turn them off */

	if( -1 != Session.strUnsupported.toString().indexOf("timer") ) {

		Session.nSessionTimerB = Session.oCallLegB.nSessionTimer = 0 ;

	}

	else  { 

		/* 	otherwise, set the timer to the requested value, or if they are silent on the issue

			go with the setting we suggested */

		Session.nSessionTimerB = Clib.atoi( Session.strSessionExpires ) ;

		Server.logInfo("strSessionExpires <" + Session.strSessionExpires + ">");

		Server.logInfo("oCallLeb.strSessionExpires <" + Session.oCallLegB.strSessionExpires + ">");

		if( 0 == Session.nSessionTimerB ) {

			Session.nSessionTimerB = Clib.atoi( Session.oCallLegB.strSessionExpires ) ;

		}

		if( -1 != Session.strSessionExpires.indexOf("uas") || 0 == Session.nSessionTimerB) {

			Session.bRefreshSessionTimerB = false ;

		}

		else {

			Session.bRefreshSessionTimerB = true ;

		}

		Session.oCallLegB.nSessionTimer = Session.nSessionTimerB;

		Server.logInfo("B leg session timer value: " + Session.oCallLegB.nSessionTimer);

	}

	Session.strSessionExpires = "" ;

	if( Session.nSessionTimerA > 0 ) {

		Session.strSessionExpires = Session.nSessionTimerA.toString() ;

		Session.strRequire = "timer" ;

		if( Session.bRefreshSessionTimerA ) {

			Session.strSessionExpires += "; refresher=uas" ;

		}

		else {

			Session.strSessionExpires += "; refresher=uac" ;

		}

	}

	else {

		Session.strRequire = "" ;

	}

	if( !Session.bDialogExists && !Session.bIsBNated ) {

		js_calculate_uri_and_route( false, "SIP/2.0", 

			Session.strFrom.toString(), 

			Session.strContact.toString(), 

			Session.strRecordRoute.toString(), 

			Session.oCallLegB.strRemoteUri, 

			Session.oCallLegB.strRoute ) ;

		}

}

else if ( true == Session.oCallLegB.b911 ) {

	//if this is a 911 call, we do not want to send the sdp until we have a final response

	// In some cases, the cancelled leg that had sent early sdp would result in the caller

	// hearing a busy tone.

	Session.strSdpToOfferA = "";

}







/* 200 OK responses to CANCEL should not have a tag on the To, all other responses should */

/* responses to CANCEL should use the Via from the CANCEL request, all others use the via from the INVITE request*/

if( cancel_response ) {

	Session.strTo = Session.oCallLegA.strOriginalTo ;

	Session.strVia = Session.strViaFromCancelRequest ;

}

else {

	if ( true != Session.oCallLegB.b911 ) {

		if( Session.bDialogExists ) {

			Session.strTo = Session.strAlegTo; 

		}

		else {

			Session.strTo = Session.oCallLegA.strTo ;

		}

	}

	Session.strVia = Session.oCallLegA.strVia ;

}



if ( Session.nFinalStatus >= 200 && Session.nFinalStatus <= 299 && invite_response ) {

	Session.strContact = Session.oCallLegA.strContact ;

}

else if ( 302 != Session.nFinalStatus ){

	Session.strContact = "" ;

}



/* rh: in the case of a 911 call, we reconstruct the TO field to match the Request Uri, */

/*	however on the response back we need to go back to our original TO that was in the INVITE,

	but with the Tag that has come to us on the Final Response. */

if ( true == Session.oCallLegB.b911 ) {

	Session.oCallLegB.strTo = Session.strTo ;

	if ( -1 != Session.strTo.indexOf( "tag=" )) {

		var tagged_to = new SipTo(Session.strTo) ;

		Session.strTo = Session.strAlegTo + ";tag=" + tagged_to.tag ;

	}

	else {

		Session.strTo = Session.strAlegTo ;

	}

}

]]></script>
          </scripts>
        </action>
        <action id="11" plug-in="Standard.WaitEvent.1" ><?xtml-editor x=308 y=590 ?>
          <!--Wait for responses-->
          <wait xmlns="urn:www.pactolus.com:xtml:communication" timeout="nTimeout" recv-name="strEvent" >
            <msg name="Pactolus.EveSipCancel.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strVia</parameter>
            </msg>
            <msg name="Pactolus.EveSipResponse.1" >
              <parameter >strAccept</parameter>
              <parameter >strAcceptEncoding</parameter>
              <parameter >strAcceptLanguage</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCallId</parameter>
              <parameter ></parameter>
              <parameter >strContact</parameter>
              <parameter >strContent</parameter>
              <parameter >strContentDisposition</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strContentType</parameter>
              <parameter >strCSeq</parameter>
              <parameter >strDate</parameter>
              <parameter >strEncryption</parameter>
              <parameter ></parameter>
              <parameter >strFrom</parameter>
              <parameter >strInReplyTo</parameter>
              <parameter ></parameter>
              <parameter >strMinSE</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strProxyAuthenticate</parameter>
              <parameter >strRecordRoute</parameter>
              <parameter ></parameter>
              <parameter >strRequire</parameter>
              <parameter >strRetryAfter</parameter>
              <parameter >strRSeq</parameter>
              <parameter ></parameter>
              <parameter >strSessionExpires</parameter>
              <parameter >strStatus</parameter>
              <parameter >strSupported</parameter>
              <parameter ></parameter>
              <parameter >strTimestamp</parameter>
              <parameter >strTo</parameter>
              <parameter >strUnsupported</parameter>
              <parameter ></parameter>
              <parameter >strVia</parameter>
              <parameter ></parameter>
              <parameter >strWWWAuthenticate</parameter>
            </msg>
            <msg name="Pactolus.EveSipAck.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCallId</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCSeq</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strRoute</parameter>
              <parameter ></parameter>
              <parameter >strTo</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
            </msg>
            <msg name="Pactolus.EveSipBye.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCallId</parameter>
              <parameter >strCSeq</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strFrom</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strRecordRoute</parameter>
              <parameter ></parameter>
              <parameter >strRequestUri</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strRoute</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strTo</parameter>
              <parameter ></parameter>
              <parameter >strVia</parameter>
            </msg>
            <msg name="Pactolus.EveSipNotify.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCallId</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCSeq</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strNotifyEvent</parameter>
              <parameter ></parameter>
              <parameter >strFrom</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strSubscriptionState</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strTo</parameter>
              <parameter ></parameter>
              <parameter >strVia</parameter>
            </msg>
          </wait>
          <results >
            <result name="Default" link="11" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout" link="32" stubbed="0"/>
            <result name="different callid" >bCallIdMatch == false

AND 'Result'  == 'Success'

AND bGotCancel == false</result>
            <result name="CANCEL from Caller" link="7" stubbed="0" >bGotCancel == true</result>
            <result name="final non-success no proxy" link="25" stubbed="0" >bProxyFinalNonSuccessResponse == false

AND nFinalStatus &gt;= 400

AND bAlegHungUp == false

AND nIdx &gt;= nContactLength</result>
            <result name="422 from B" link="41" stubbed="1" >bGotResponse == true

AND nFinalStatus == 422</result>
            <result name="Response from Called Party" link="36" stubbed="0" >bGotResponse == true

AND bNewSdp == false

AND (nFinalStatus &lt; 300

OR nFinalStatus &gt; 399)

AND nFinalStatus &gt; 100</result>
            <result name="Response with new sdp" link="22" stubbed="0" >bNewSdp == true

AND nFinalStatus &lt; 300</result>
            <result name="3xx Redirect Response" link="34" stubbed="0" >nFinalStatus &gt;= 300

AND nFinalStatus &lt;= 399

AND bGotResponse == true

AND nFinalStatus != 302</result>
            <result name="calea notify event" link="39" stubbed="0" >bGotCaleaNotify == true</result>
            <result name="ACK from Caller" link="8" stubbed="0" >bGotAck == true</result>
            <result name="ALegHungUp" link="43" stubbed="0" >bAlegHungUp == true

AND bGotBye == true</result>
            <result name="release rtp notify" link="46" stubbed="1" >bGotNoRtpNotify == true

AND bAllocateNewRtp == true</result>
            <result name="302, SBC" link="10" stubbed="0" >bSBC == true

AND nFinalStatus == 302</result>
            <result name="302, not SBC" link="34" stubbed="0" >nFinalStatus == 302

AND bSBC == false</result>
            <result name="BYE from B during reINVITE" link="52" stubbed="1" >bGotBye == true

AND oCallLegB.bConnected == false</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.enableEvents(true);

Session.strContact = Session.strNotifyEvent = "" ;

Server.logInfo("Setting timeout value to " + Session.nTimeout ) ;



//need to track the number of seconds from sending of INVITE to answer, 

// so that we can adjust the RNA value accordingly after each provisional response.

var current = new Date();

Session.lRNAStart = current.getTime();

]]></script>
            <script language="javascript" timing="middle" ><![CDATA[Session.bGotCancel = Session.bGotAck = Session.bGotResponse = Session.bNewSdp = Session.bGotCaleaNotify = Session.bGotNoRtpNotify = Session.bGotBye = false ;

if( 2 == Result.id ) { 

	if( -1 != Session.strEvent.indexOf( "SipAck" ) ) {

	var cseq = new SipCSeq(Session.strCSeq);

	var remoteCSeq = new SipCSeq(Session.oCallLegA.strRemoteCSeq.toString());

	if ( cseq.value == remoteCSeq.value && Session.strCallId == Session.oCallLegA.strCallId ) {

			Session.bGotAck = true ;

		}

		else {

			Server.logError("Received unexcpected ACK; discarding");

		}

	}

	else if( -1 != Session.strEvent.indexOf( "SipResponse" ) ) {

			

		/* check to make sure this is the callid we are waiting for */

		if( Session.strCallId != Session.oCallLegB.strCallId  ) {

			Session.bCallIdMatch = false ;

		}

		else {

			/* update the timeout now that we have a response */

			if( Session.bAlegHungUp ) {

				/* 	per RFC 3261: 

					If there is no final response for the original request in 64*T1 seconds 

					(T1 is defined in Section 17.1.1.1), the client SHOULD then consider the

					original transaction cancelled and SHOULD destroy the client

					transaction handling the original request.

				*/

				Session.nTimeout = 10 ;

			}

			else if (Session.bAwaitingResponse) {

				

				Session.nTimeout = (0 == Session.nRingNoAnswerTimeout ? 120 :  Session.nRingNoAnswerTimeout ) ;

								

				Session.bAwaitingResponse = false;

				Server.logInfo("Received initial response; setting RNA to <" + Session.nTimeout + ">");

			}

			else {

				var current = new Date();

				var elapsed = current.getTime() - Session.lRNAStart;

				elapsed = Math.round((elapsed/1000));

				Session.nTimeout = Session.nTimeout - elapsed;

				Server.logInfo("Remaining Ring No Answer Timeout: " + Session.nTimeout);

			}



		

			/* save the via header on the response; this is the via we sent and we will need to use it 

			on either a CANCEL or an ACK to a non-success final response 

			*/

			if (0 == Session.strMyVia.length) {

				Session.strMyVia = Session.strVia ;

			}



			Session.bCallIdMatch = true ;

			Session.bGotResponse = true ;

			var status = new SipStatus(Session.strStatus) ;

			

			/* set both the final status and the status in call leg A

			 * we will use call leg A's status as the response if we're

			 * unable to connect to call leg B */

			Session.nFinalStatus = status.code ;

			Session.oCallLegA.strStatus = Session.strStatus;

			

			

			/* the To header may now have a tag, so update our stored value */

			if( !Session.bDialogExists && Session.nFinalStatus >= 200 && true != Session.oCallLegB.b911 ) {

				Session.oCallLegB.strTo = Session.strTo ;

				Session.oCallLegB.strSIPStatus = Session.nFinalStatus ;

				

			}

			

	

			/* if we got the far end SDP save it */

			Session.strSdpToOfferA = "" ;

			if( Session.strContent.length > 0 && Session.nFinalStatus < 300 ) {

			

				Server.logInfo("Received a response from B with SDP: " + Session.strContent) ;

				Server.logInfo("Previous SDP from B was: " + Session.oCallLegB.strRemoteSdp ) ;

				if( Session.oCallLegB.strRemoteSdp != Session.strContent ||

					( Session.bAllocateNewRtp && !Session.oRtpRelay.ep[0].bAllocated ) ||

					( Session.bInviteOnHold || Session.bInviteOffHold ) ) {



					/* here we either have a new Sdp, or else it's the same Sdp as the 

						previous invite transaction but we're doing rtp relay and need

						to allocate a new local endpoint for it 

					*/	

					Server.logInfo("New SDP received from B") ;				

					Session.bNewSdp = true ;

				}

				else if( !Session.bRtpRelayRequested ) {

					Server.logInfo("Same SDP and rtp relay not involved") ;				

					/* just pass on the Sdp, we're not doing rtp relay */

					Session.strSdpToOfferA = Session.strContent ;

				} 

				else {

					/* just pass on the local endpoint, we are doing rtp relay and the Sdp hasn't changed*/

					Server.logInfo("Same SDP, rtp relay involved, just pass it on") ;				

					Session.strSdpToOfferA = Session.oRtpRelay.ep[0].strSdp ;

					if( Session.oCallLegA.strPublicIpAddress.length > 0 ) {

						var newSdp = new Sdp( Session.strSdpToOfferA ) ;

						newSdp.connection.address = Session.oCallLegA.strPublicIpAddress ;

						Session.strSdpToOfferA = newSdp.encode() ;

						Server.logInfo("Modified SDP to offer A: " + Session.strSdpToOfferA ) ;

					}

				}

				Session.oCallLegB.strRemoteSdp = Session.strContent ;

				Session.oCallLegB.strContentType = Session.strContentType ;

			}

			//once we get a final response, use a default timeout value, rather than the remainder

			// of the ring no answer timeout.

			if ( 200 <= Session.nFinalStatus && 300 != Session.nFinalStatus ) {

				Session.nTimeout = 10;

			}

		}

	}

	else if( -1 != Session.strEvent.indexOf("SipCancel") ) {

		Session.bGotCancel = true ;

		Session.bProxyFinalNonSuccessResponse = true ;

		Session.nTimeout = 10;

	}

	else if( -1 != Session.strEvent.indexOf("SipBye") ) {

		Session.bGotBye = true;

		/* 	GSX sometimes sends a BYE in response to an INVITE.

			That's not right, but handle it as a 503 final response.

		*/

		if ( Session.strCallId == Session.oCallLegB.strCallId ) {

			if( Session.bDialogExists ) {

				Server.logInfo("Got BYE from B leg while reINVITING him") ;

				Session.oCallLegB.bConnected = false ;

			}

			else {

				Session.nFinalStatus = 503 ;

				Session.bGotResponse = true ;

			}

		}

		else if (Session.strCallId == Session.oCallLegA.strCallId ){

			Session.bAlegHungUp = true;

			Session.oCallLegA.bConnected = false ;

		}

		Session.nTimeout = 10;

			

	}

	else if( -1 != Session.strEvent.indexOf("SipNotify") ) {



		Server.logInfo("Got a NOTIFY message, event: " + Session.strNotifyEvent ) ;

		Server.logInfo("Got a NOTIFY message, with callid: " + Session.strCallId) ;

		Server.logInfo("Got a NOTIFY message, with cseq: " + Session.strCSeq) ;

		Server.logInfo("Got a NOTIFY message, with subscription-state: " + Session.strSubscriptionState) ;

		if( -1 != Session.strNotifyEvent.indexOf("calea") ) {

			Session.bGotCaleaNotify = true ;

		}

		else if( -1 != Session.strNotifyEvent.indexOf("no-rtp-relay") ) {

			Session.bGotNoRtpNotify = true ;

		}

	}

	else {

		Server.logInfo("Discarding event: " + Session.strEvent ) ;

	}

}





	]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.enableEvents(false);

]]></script>
          </scripts>
        </action>
        <action id="12" plug-in="Pactolus.SipInvite.1" ><?xtml-editor x=59 y=582 ?>
          <!--Direct Invite to Called Party -->
          <sip-invite xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" handle-responses="0" follow-redirection="0" final-response-status="" response-content="" response-content-type="" final-request-uri="" timeout-for-final-response="" timeout-for-provisional-response="" record-route="" contact="" response-to="" use-session-timer="0" session-expires="" min-supported-session-timer="" refresher="" remote-party-id="" increment-cseq-first="0" increment-cseq-last="0" >
            <accept >oCallLegA.strAccept</accept>
            <accept-encoding >oCallLegA.strAcceptEncoding</accept-encoding>
            <accept-language >oCallLegA.strAcceptLanguage</accept-language>
            <authorization >oCallLegB.strAuthorization</authorization>
            <call-id >oCallLegB.strCallId</call-id>
            <contact >oCallLegB.strContact</contact>
            <content >strSdpToOfferB</content>
            <content-disposition >oCallLegA.strContentDisposition</content-disposition>
            <content-type >oCallLegA.strContentType</content-type>
            <cseq >oCallLegB.strCSeq</cseq>
            <date >oCallLegB.strDate</date>
            <encryption >oCallLegA.strEncryption</encryption>
            <expires >oCallLegB.strExpires</expires>
            <from >strBlegFrom</from>
            <max-forwards >oCallLegB.strMaxForwards</max-forwards>
            <proxy-authorization >strBLegProxyAuthorization</proxy-authorization>
            <proxy-require >oCallLegA.strProxyRequire</proxy-require>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <require >oCallLegB.strRequire</require>
            <response-key >oCallLegA.strResponseKey</response-key>
            <route >oCallLegB.strRoute</route>
            <session-expires >oCallLegB.strSessionExpires</session-expires>
            <subject >oCallLegB.strSubject</subject>
            <supported >"timer"</supported>
            <timestamp >oCallLegB.strTimestamp</timestamp>
            <to >strBlegTo</to>
            <alert-info >oCallLegB.strAlertInfo</alert-info>
            <additional-parameters >
              <diversion >oCallLegB.strDiversion</diversion>
              <p-asserted-identity >oCallLegB.strPAssertedIdentity</p-asserted-identity>
              <p-charge-info >oCallLegB.strPChargeInfo</p-charge-info>
              <privacy >oCallLegA.strPrivacy</privacy>
              <user-agent >oCallLegB.strUserAgent</user-agent>
            </additional-parameters>
          </sip-invite>
          <results >
            <result name="Default" link="11" stubbed="0"/>
            <result name="Success"/>
            <result name="Redirect (3xx)"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Provisional Timeout"/>
            <result name="Final Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oCallLegA.strOriginalTo = Session.oCallLegA.strTo ;	

if ( -1 != Session.oCallLegA.strTo.toString().indexOf("tag=")) {

	var to = new SipTo(Session.oCallLegA.strTo.toString());

	to.tag = "";

	Session.oCallLegA.strOriginalTo = to.encode();

}

// Determine if a Remote Party header exists. if so change Privacy header so as to not display remote party Id 'privacy=" value in it.

Server.logInfo("strPrivacy Header Value = <" + Session.oCallLegA.strPrivacy + ">");

if( Session.oCallLegA.strPrivacy == "off" || Session.oCallLegA.strPrivacy == "on;") {

		Session.oCallLegA.strPrivacy = ""

}

/* set up outbound call leg information. From, To, RemoteUri, and Route are required.

	We will create callid, CSeq if not provided */ 

if( 0 == Session.oCallLegB.strCallId.length ) {

	Session.oCallLegB.strCallId = js_CreateUniqueCallId() ; 

}



if( 0 == Session.oCallLegB.strCSeq.length ) {

	Session.oCallLegB.strCSeq = "1 INVITE" ;

}



if( Session.nSessionTimerB > 0 ) {

	Session.oCallLegB.strSessionExpires = String( Session.nSessionTimerB ) ;

	if( Session.bRefreshSessionTimerB ) {

		Session.oCallLegB.strSessionExpires += "; refresher=uac" ;

	}

	else {

		Session.oCallLegB.strSessionExpires += "; refresher=uas" ;

	}

	Server.logInfo("Set oCallLegB.strSessionExpires <" + Session.oCallLegB.strSessionExpires + ">");

}

else if ( 0 == Session.nSessionTimerB ) {

	Session.oCallLegB.strSessionExpires = "" ;

}

Session.strMyVia = "" ;



if( -1 != Session.oCallLegB.strRemoteUri.toString().indexOf("nat=") ) {

	Session.bIsBNated = true ;

}



//do not include a Proxy-Authorization header if this is an off-net call

if ( Session.s_ON_NET == Session.oCallLegB.strDestRouteType ||

	-1 != Session.oCallLegB.strRemoteUri.toString().indexOf("target=") ) {

 	Session.strBLegProxyAuthorization = Session.oCallLegA.strProxyAuthorization;

}



/* wait four seconds for a provisional response, after that wait till the ring no answer timeout */

Session.nTimeout = 4 ;

//adding this new variable to track whether we have received an initial response to the B-Leg INVITE.

// We need to calculate the remaining RNA value, so it's possible that we will end up with a value of "4"

// for nTimeout when we are in the process of waiting for the final, but have already received a provisional.

Session.bAwaitingResponse = true;



/* if this a call that is being screened, we need to connect the B-leg to the ms connection initially */

if ( "T" == Session.oCallLegB.strScreenCallFlag &&

	 -1 == Session.oCallLegB.strRemoteUri.toString().indexOf("deposit")) {

	Session.strSdpToOfferB = Session.oCallLegB.strIVRSdp;

}



Server.enableEvents( false ) ;]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.logInfo("Coming out of INVITE with oCallLegB.strSessionExpires <" + Session.oCallLegB.strSessionExpires + ">");]]></script>
          </scripts>
        </action>
        <action id="13" plug-in="Pactolus.MGCPCreate.1" ><?xtml-editor x=1122 y=1076 ?>
          <!--Create the UAC-facing end of the RTP Relay-->
          <crcx xmlns="urn:www.pactolus.com:xtml:media" callid="oRtpRelay.ep[0].strCallId" remote-sdp="oCallLegB.strRemoteSdp" mode="send/receive" capability="1" returns="" endpoint="oRtpRelay.ep[0].strEndpoint" connection-id="oRtpRelay.ep[0].strConnectionId" local-sdp="oRtpRelay.ep[0].strSdp" packetization-period="" codec="-1" timeout="5" local-connection-options="" second-endpoint-id="" telephone-events="0" ms-type="&quot;PCS&quot;" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </crcx>
          <results >
            <result name="Default" link="2" stubbed="1"/>
            <result name="Success" link="14" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oRtpRelay.ep[0].bAllocated = true ;

Server.logInfo("Allocating endpoint for A leg to stream to") ;



/* 	save the remote Sdp we are streaming to, 

	so that we can later detect a reINVITE to the same Sdp 

*/

Session.oRtpRelay.ep[1].strRemoteSdp = Session.oCallLegB.strRemoteSdp ;



Server.logInfo("oCallLegB.strSessionExpires <" + Session.oCallLegB.strSessionExpires + ">");

]]></script>
            <script language="javascript" timing="last" ><![CDATA[if( Session.bInviteOnHold ) {

	var newSdp = new Sdp( Session.oRtpRelay.ep[0].strSdp.toString() ) ;

	newSdp.connection.address = "0.0.0.0" ;

	Session.oRtpRelay.ep[0].strSdp = newSdp.encode() ;

	Server.logInfo("Modifying my SDP for INVITE on hold: " + Session.oRtpRelay.ep[0].strSdp ) ;

}

else if( Session.oCallLegA.strPublicIpAddress.length > 0 ) {

	var newSdp = new Sdp( Session.oRtpRelay.ep[0].strSdp.toString() ) ;

	newSdp.connection.address = Session.oCallLegA.strPublicIpAddress ;

	Session.oRtpRelay.ep[0].strSdp = newSdp.encode() ;

	Server.logInfo("Modifying my SDP for A leg to use my public address: " + Session.oRtpRelay.ep[0].strSdp ) ;

}





Session.strSdpToOfferA = Session.oRtpRelay.ep[0].strSdp ;]]></script>
          </scripts>
        </action>
        <action id="14" plug-in="Pactolus.RtpRelay.1" ><?xtml-editor x=1374 y=1142 ?>
          <rtp-relay xmlns="urn:www.pactolus.com:xtml:sip" src-endpoint="oRtpRelay.ep[0].strEndpoint" dst-endpoint="oRtpRelay.ep[1].strEndpoint" timeout="5"/>
          <results >
            <result name="Default" link="36" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
            <result name="calea requested" link="40" stubbed="0" >oRtpRelay.bForking == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Putting endpoint: " + Session.oRtpRelay.ep[0].strEndpoint + " and endpoint: " + Session.oRtpRelay.ep[1].strEndpoint + " into RTP relay mode " ) ;



Server.logInfo("oCallLegB.strSessionExpires <" + Session.oCallLegB.strSessionExpires + ">");]]></script>
          </scripts>
        </action>
        <action id="15" plug-in="Pactolus.Branch.1" ><?xtml-editor x=858 y=1155 ?>
          <results >
            <result name="Default" link="13" stubbed="0"/>
            <result name="changed sdp" link="16" stubbed="0" >oRtpRelay.ep[0].bAllocated == true</result>
          </results>
        </action>
        <action id="16" plug-in="Pactolus.MGCPDelete.1" ><?xtml-editor x=1123 y=1248 ?>
          <!--Delete previously allocated endpoint-->
          <dlcx xmlns="urn:www.pactolus.com:xtml:media" connection-id="oRtpRelay.ep[0].strConnectionId" endpoint="oRtpRelay.ep[0].strEndpoint" callid="oRtpRelay.ep[0].strCallId" timeout="5" returns="" ms-type="&quot;PCS&quot;" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </dlcx>
          <results >
            <result name="Default" link="13" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="21" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=558 y=1320 ?>
          <!--false-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bConnected"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Failed to connect") ;

Server.enableEvents(true);

]]></script>
          </scripts>
        </action>
        <action id="22" plug-in="Pactolus.Branch.1" ><?xtml-editor x=518 y=975 ?>
          <results >
            <result name="Default" link="36" stubbed="0"/>
            <result name="rtp relay requested?" link="15" stubbed="0" >bAllocateNewRtp == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("received a response with an SDP") ;

if( Session.bRtpRelayRequested ) {

	if( !Session.bAllocateNewRtp ) {

		if( Session.bInviteOnHold ) {

			var newSdp = new Sdp( Session.oRtpRelay.ep[0].strSdp ) ;

			newSdp.connection.address = "0.0.0.0" ;

			for (var i = 0; i < newSdp.media[0].attributes.length; i++){

				if ("a=sendrecv" == newSdp.media[0].attributes[i]) {

					newSdp.media[0].attributes[i] = "a=inactive";

					Server.logInfo("replacing sendrecv attribute with inactive.");

					break;

				}

			}

			Session.strSdpToOfferA = Session.oRtpRelay.ep[0].strSdp = newSdp.encode() ;

			Server.logInfo("received a response from B leg for an INVITE on hold, offering A: " + Session.strSdpToOfferA ) ;

			Server.logInfo("Remote SDP for B leg is now: " + Session.oCallLegB.strRemoteSdp ) ;

		}

		else if( Session.bInviteOffHold ) {

			var newSdp = new Sdp( Session.oRtpRelay.ep[0].strSdp ) ;

			if( Session.oCallLegA.strPublicIpAddress.length > 0 ) {

				newSdp.connection.address = Session.oCallLegA.strPublicIpAddress ;

			}

			else {

				newSdp.connection.address = Server.ipAddress ;

			}

			Session.strSdpToOfferA = Session.oRtpRelay.ep[0].strSdp = newSdp.encode() ;

			Server.logInfo("received a response from B leg for an INVITE off hold, offering A: " + Session.strSdpToOfferA ) ;

		}

	}

}

else {

	Session.strSdpToOfferA = Session.strContent ;

}]]></script>
          </scripts>
        </action>
        <action id="23" plug-in="Pactolus.SipCancel.1" ><?xtml-editor x=1502 y=495 ?>
          <!--Send CANCEL to Called Party-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" timeout="5" handle-responses="1" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oCallLegB.strCallId</call-id>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >strBlegFrom</from>
            <request-uri >strCANCELUri</request-uri>
            <route >oCallLegB.strRoute</route>
            <to >strBlegTo</to>
            <via >strMyVia</via>
          </sip-bye>
          <results >
            <result name="Default" link="42" stubbed="0"/>
            <result name="Success"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bConnected = false ;





if ( 0 < Session.strRedirectUri.length ) {

	Session.strCANCELUri = Session.strRedirectUri ;

}

else {

	Session.strCANCELUri = Session.oCallLegB.strRemoteUri ;

}



]]></script>
          </scripts>
        </action>
        <action id="24" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1658 y=691 ?>
          <!--false-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bConnected"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* if call timed out waiting for intitial provisional response, 

 set status to zero, so backup softswitch will be attempted */



if ( Session.bAwaitingResponse ) {

	Session.nFinalStatus = 0 ;

}





Server.enableEvents(true) ;]]></script>
          </scripts>
        </action>
        <action id="25" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=1883 y=802 ?>
          <!--Send ACK to Called Party with same branch on Via as INVITE-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oCallLegB.strCallId</call-id>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >strBlegFrom</from>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <timestamp >strTimestamp</timestamp>
            <to >strTo</to>
            <via >strMyVia</via>
          </sip-ack>
          <results >
            <result name="Default" link="42" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="29" plug-in="Pactolus.Branch.1" ><?xtml-editor x=257 y=183 ?>
          <results >
            <result name="Default" link="1" stubbed="0"/>
            <result name="remove existing rtp relay" link="30" stubbed="0" >bDialogExists == true</result>
          </results>
        </action>
        <action id="30" plug-in="Pactolus.MGCPDelete.1" ><?xtml-editor x=583 y=95 ?>
          <!--Delete UAC endpoint-->
          <dlcx xmlns="urn:www.pactolus.com:xtml:media" connection-id="oRtpRelay.ep[0].strConnectionId" endpoint="oRtpRelay.ep[0].strEndpoint" callid="oRtpRelay.ep[0].strCallId" timeout="2" returns="" ms-type="&quot;PCS&quot;" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </dlcx>
          <results >
            <result name="Default" link="31" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="31" plug-in="Pactolus.MGCPDelete.1" ><?xtml-editor x=842 y=100 ?>
          <!--Delete UAS endpoint-->
          <dlcx xmlns="urn:www.pactolus.com:xtml:media" connection-id="oRtpRelay.ep[1].strConnectionId" endpoint="oRtpRelay.ep[1].strEndpoint" callid="oRtpRelay.ep[1].strCallId" timeout="2" returns="" ms-type="&quot;PCS&quot;" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </dlcx>
          <results >
            <result name="Default" link="1" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="32" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1184 y=520 ?>
          <results >
            <result name="Default" link="23" stubbed="0"/>
            <result name="Caller hung up" link="24" stubbed="0" >bAlegHungUp == true</result>
            <result name="PSX Timeout" link="42" stubbed="0" >bAwaitingResponse == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if ( Session.bAlegHungUp ) {

	Server.logError("Caller hung up. Timed out waiting for response.") ;

}]]></script>
          </scripts>
        </action>
        <action id="34" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=1229 y=1556 ?>
          <!--Send ACK to Called Party with same branch on Via, 300 Rerouted call-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oCallLegB.strCallId</call-id>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >strBlegFrom</from>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <timestamp >strTimestamp</timestamp>
            <to >strTo</to>
            <via >strMyVia</via>
          </sip-ack>
          <results >
            <result name="Default" link="12" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="3xx w/o Contact" link="35" stubbed="0" >nContactLength == 0

AND nFinalStatus != 302</result>
            <result name="302 Moved Temporarily" link="12" stubbed="0" >nFinalStatus == 302</result>
            <result name="302 w/o Contact" link="21" stubbed="0" >nFinalStatus == 302

AND nContactLength == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bRedirected = true ;



]]></script>
            <script language="javascript" timing="middle" ><![CDATA[if ( -1 != Session.oCallLegB.strRemoteUri.toString().indexOf(";cic=")) {

	Session.bCIC = true;

	var i = Session.oCallLegB.strRemoteUri.toString().indexOf(";cic=");

	Session.strCIC = Session.oCallLegB.strRemoteUri.toString().substr(i);

	Server.logInfo("Found CIC: " + Session.strCIC);

}



Session.nContactLength = Session.oRedirectUrl.length = 0 ;

	if ( 0 != Session.strContact.length ) {

		var contact_array = parseContacts( Session.strContact ) ;

		for( var i = 0; i < contact_array.length; i++ ) {

			Session.oRedirectUrl[i] = contact_array[i] ;

			if ( Session.bCIC ) {

				Session.oRedirectUrl[i] += Session.strCIC;

			}

		}

		Session.nContactLength = Session.oRedirectUrl.length  ;

		Server.logInfo("Number of redirect urls to try: " + Session.nContactLength) ;

		Session.oCallLegB.strRemoteUri = Session.oRedirectUrl[0] ;

		Server.logInfo("Constructing Uri on redirect to: " + Session.oCallLegB.strRemoteUri ) ;

		Session.nIdx = 1;

		Session.oCallLegB.strCallId = "" ;

		Session.oCallLegB.strCSeq = "" ;



		/* if this is a 911 call, the Contact returned will contain the phone number of the PSAP,

		but the IP address of the UAC. We need to replace the IP with the GSX or Proxy address. */

		if (  Session.oCallLegB.b911 && Session.bUseProxyIP &&

			 !Session.oCallLegB.b911_ECRC && !Session.oCallLegB.b911_Forward ) {

			var uri = new SipNameAddr( Session.oCallLegB.strRemoteUri.toString() ) ;

			uri.url.host = Session.oCallLegB.str911Proxy ;

			Session.oCallLegB.strRemoteUri = uri.encode() ;

			Session.bUseProxyIP = false ;

			Session.strBlegTo = Session.oCallLegB.strRemoteUri ;

		}	

	}

	else {

		Server.logError("Received a 3xx response with no Contact header, returning failure to caller") ;

	}





]]></script>
          </scripts>
        </action>
        <action id="35" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=1495 y=1560 ?>
          <!--503 Service Unavailable-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oCallLegA.strCallId</call-id>
            <cseq >oCallLegA.strCSeq</cseq>
            <from >oCallLegA.strFrom</from>
            <status >"SIP/2.0 503 Service Unavailable"</status>
            <to >oCallLegA.strTo</to>
            <via >oCallLegA.strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="11" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if ( 302 == Session.nFinalStatus ) {

	Session.bFailed302 = true;

}



//add a tag to the To header if there was previously none

if( !Session.bDialogExists ) {

	Session.oCallLegA.strTo = Session.oCallLegA.strTo + ";tag=" + Server.getUTCTime() ;

}

Session.nFinalStatus = 503 ;

Session.bRedirected = false ;



]]></script>
          </scripts>
        </action>
        <action id="36" plug-in="Pactolus.Branch.1" ><?xtml-editor x=727 y=869 ?>
          <results >
            <result name="Default" link="53" stubbed="0"/>
            <result name="fail with more options" link="37" stubbed="0" >nFinalStatus &gt; 399

AND bRedirected == true

AND nIdx &lt; nContactLength

AND nFinalStatus != 487

AND nFinalStatus != 486</result>
          </results>
        </action>
        <action id="37" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=1732 y=1423 ?>
          <!--Send ACK to Called Party with same branch on Via, 300 Rerouted call-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oCallLegB.strCallId</call-id>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >strBlegFrom</from>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <timestamp >strTimestamp</timestamp>
            <to >strTo</to>
            <via >strMyVia</via>
          </sip-ack>
          <results >
            <result name="Default" link="12" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="302 Moved Temporarily" link="49" stubbed="0" >nFinalStatus == 302</result>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[Session.oCallLegB.strRemoteUri = Session.oRedirectUrl[Session.nIdx++] ;



Server.logInfo("Constructing Uri on redirect to: " + Session.oCallLegB.strRemoteUri ) ;



Session.oCallLegB.strCallId = "" ;

Session.oCallLegB.strCSeq = "" ;



// remove tag from TO if we got an unsuccessful final response. 

if ( -1 != Session.oCallLegB.strTo.toString().indexOf("tag=") ) {

	var tag = new SipTo(Session.oCallLegB.strTo.toString());

	tag.tag = "";

	Session.oCallLegB.strTo = Session.strBlegTo = tag.encode();

	Server.logInfo("CallLegB To reset to: " + Session.oCallLegB.strTo);

}



if ( -1 != Session.oCallLegA.strTo.toString().indexOf("tag=") ) {

	var tagA = new SipTo(Session.oCallLegA.strTo.toString());

	tagA.tag = "";

	Session.oCallLegA.strTo = Session.strAlegTo = tagA.encode();

	Server.logInfo("CallLegA To reset to: " + Session.oCallLegA.strTo);

}]]></script>
          </scripts>
        </action>
        <action id="38" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=1656 y=1124 ?>
          <!--200 OK-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >"SIP/2.0 200 OK"</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="39" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="39" plug-in="Pactolus.SOAPMessage.1" ><?xtml-editor x=1858 y=1117 ?>
          <!--BeginWiretapRtpFaceIn-->
          <SOAP xmlns="urn:www.pactolus.com:xtml:communication" destination-ip="" transaction="" message-name="&quot;BeginWiretapRtpFaceIn&quot;" destination-port="" destination-type="1" destination-session="" waiting-session-selected="oRtpRelay.strCaleaSessionId" xml-namespace="" >
            <parameter tag="" value="oRtpRelay.strCaleaDestination"/>
            <parameter tag="" value="oRtpRelay.ep[1].strSdp"/>
            <parameter tag="" value="oRtpRelay.ep[1].strEndpoint"/>
            <parameter tag="" value="oRtpRelay.ep[1].strConnectionId"/>
            <parameter tag="" value="oRtpRelay[1].strCallId"/>
            <parameter tag="" value="&quot;PCS&quot;"/>
            <parameter tag="" value="oCallLegA.strFrom"/>
            <parameter tag="" value="oCallLegA.strCallId"/>
            <parameter tag="" value="strCaleaOriginationNumber"/>
            <parameter tag="" value="strCaleaTerminationNumber"/>
            <parameter tag="" value="strCaleaSurveiledNumber"/>
          </SOAP>
          <results >
            <result name="Default" link="11" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oRtpRelay.bForking = true ;

js_parse_value(Session.strNotifyEvent, "wd", Session.oRtpRelay.strCaleaDestination);

js_parse_value(Session.strNotifyEvent, "on", Session.strCaleaOriginationNumber ) ;

js_parse_value(Session.strNotifyEvent, "tn", Session.strCaleaTerminationNumber ) ;

js_parse_value(Session.strNotifyEvent, "sn", Session.strCaleaSurveiledNumber ) ;]]></script>
          </scripts>
        </action>
        <action id="40" plug-in="Pactolus.SOAPMessage.1" ><?xtml-editor x=1376 y=969 ?>
          <!--BeginWiretapRtpFaceOut-->
          <SOAP xmlns="urn:www.pactolus.com:xtml:communication" destination-ip="" transaction="" message-name="&quot;BeginWiretapRtpFaceOut&quot;" destination-port="" destination-type="3" destination-session="oRtpRelay.strCaleaSessionId" waiting-session-selected="" xml-namespace="" >
            <parameter tag="" value="oRtpRelay.ep[0].strSdp"/>
            <parameter tag="" value="oRtpRelay.ep[0].strEndpoint"/>
            <parameter tag="" value="oRtpRelay.ep[0].strConnectionId"/>
            <parameter tag="" value="oRtpRelay.ep[0].strCallId"/>
            <parameter tag="" value="&quot;PCS&quot;"/>
            <parameter tag="" value="oCallLegB.strOriginalTo"/>
            <parameter tag="" value="oCallLegB.strCallId"/>
          </SOAP>
          <results >
            <result name="Default" link="36" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Sending second wiretap message to session: " + Session.oRtpRelay.strCaleaSessionId ) ;]]></script>
          </scripts>
        </action>
        <action id="41" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=1093 y=255 ?>
          <!--Send ACK to Called Party with same branch on Via as INVITE-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oCallLegB.strCallId</call-id>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >strBlegFrom</from>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <timestamp >strTimestamp</timestamp>
            <to >strTo</to>
            <via >strMyVia</via>
          </sip-ack>
          <results >
            <result name="Default" link="12" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* try again with the smallest Session-expires values that B will except*/

Session.nSessionTimerB = Clib.atoi( Session.strMinSE ) ;

Server.logInfo("UAS rejected the INVITE with a 422 session expires too small, retry with: " + Session.nSessionTimerB ) ;]]></script>
          </scripts>
        </action>
        <action id="42" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1359 y=678 ?>
          <results >
            <result name="Default" link="24" stubbed="0"/>
            <result name="timeout with more options" link="12" stubbed="0" >bRedirected == true

AND nIdx &lt; nContactLength</result>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[if ( Session.bRedirected ) {

	Session.oCallLegB.strRemoteUri = Session.oRedirectUrl[Session.nIdx++] ;



	//Server.logInfo("Constructing Uri on redirect to: " + Session.oCallLegB.strRemoteUri ) ;

	

	Session.oCallLegB.strCallId = "" ;

	Session.oCallLegB.strCSeq = "" ;

}



/* remove tag from TO if we got an unsuccessful final response. If we are going on to try a 

back up PSX, we don not want to keep this tag around. */

if ( -1 != Session.oCallLegB.strTo.toString().indexOf("tag=") ) {

	var tag = new SipTo(Session.oCallLegB.strTo.toString());

	tag.tag = "";

	Session.oCallLegB.strTo = Session.strBlegTo = tag.encode();

	//Server.logInfo("CallLegB To reset to: " + Session.oCallLegB.strTo);

}



if ( !Session.bOutdialBWithConnectedA && -1 != Session.oCallLegA.strTo.toString().indexOf("tag=") ) {

	var tagA = new SipTo(Session.oCallLegA.strTo.toString());

	tagA.tag = "";

	Session.oCallLegA.strTo = Session.strAlegTo = tagA.encode();

}



Server.logInfo("oCallLegA.strTo <" + Session.oCallLegA.strTo + ">");

Server.logInfo("strAlegTo <" + Session.strAlegTo + ">");]]></script>
          </scripts>
        </action>
        <action id="43" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=659 y=1841 ?>
          <!--200 OK-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >"SIP/2.0 200 OK"</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="44" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
            <result name="B is not connected" link="54" stubbed="0" >oCallLegB.bConnected == false</result>
          </results>
        </action>
        <action id="44" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=945 y=1830 ?>
          <!--Send Bye to B leg-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="4" handle-responses="1" increment-cseq-first="1" increment-cseq-last="0" >
            <call-id >oCallLegB.strCallId</call-id>
            <contact >strMyContact</contact>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >oCallLegB.strFrom</from>
            <record-route >oCallLegB.strRecordRoute</record-route>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <route >oCallLegB.strRoute</route>
            <to >oCallLegB.strTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="24" stubbed="1"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[Session.oCallLegB.bConnected = false ;]]></script>
          </scripts>
        </action>
        <action id="46" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=1773 y=522 ?>
          <!--200 OK to Notify for releasing rtp-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <content >oCallLegA.strContent</content>
            <content-type >oCallLegA.strContentType</content-type>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >"SIP/2.0 200 OK"</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="47" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oCallLegA.strContent = Session.oCallLegA.strRemoteSdp = Session.oCallLegA.strOriginalContent ;]]></script>
          </scripts>
        </action>
        <action id="47" plug-in="Pactolus.MGCPDelete.1" ><?xtml-editor x=1986 y=558 ?>
          <!--Delete UAS endpoint-->
          <dlcx xmlns="urn:www.pactolus.com:xtml:media" connection-id="oRtpRelay.ep[1].strConnectionId" endpoint="oRtpRelay.ep[1].strEndpoint" callid="oRtpRelay.ep[1].strCallId" timeout="2" returns="" ms-type="&quot;PCS&quot;" >
            <parameters >
              <quarantine step="0" loop="0" process="0" discard="0"/>
              <events ><![CDATA[]]></events>
              <signals ><![CDATA[]]></signals>
              <digit-map ><![CDATA[]]></digit-map>
            </parameters>
          </dlcx>
          <results >
            <result name="Default" link="11" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[Session.oRtpRelay.ep.length = 0 ;

Session.bAllocateNewRtp = false ;

Session.bRtpRelayRequested = false ;



Server.logInfo("Deleted endpoint initially allocated for RTP relay since we have been notified to relay sip only") ;]]></script>
          </scripts>
        </action>
        <action id="49" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1578 y=1932 ?>
          <!--handle 302 response-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bConnected"/>
        </action>
        <action id="50" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=1686 y=198 ?>
          <!--408 Request Timeout to A-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oCallLegA.strCallId</call-id>
            <cseq >oCallLegA.strRemoteCSeq</cseq>
            <from >strAlegFrom</from>
            <status >"SIP/2.0 408 Request Timeout"</status>
            <to >strAlegTo</to>
            <via >oCallLegA.strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="51" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
            <result name="New remote SDP" >bNewSdp == true</result>
          </results>
        </action>
        <action id="51" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=1904 y=208 ?>
          <!--send BYE to A-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" handle-responses="0" increment-cseq-first="1" increment-cseq-last="0" >
            <call-id >oCallLegA.strCallId</call-id>
            <cseq >oCallLegA.strCSeq</cseq>
            <from >strAlegTo</from>
            <request-uri >oCallLegA.strRemoteUri</request-uri>
            <to >strAlegFrom</to>
          </sip-bye>
          <results >
            <result name="Default" link="24" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oCallLegA.bConnected = false ;]]></script>
          </scripts>
        </action>
        <action id="52" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=1476 y=201 ?>
          <!--200 OK to BYE-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >"SIP/2.0 200 OK"</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="50" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="53" plug-in="Pactolus.Branch.1" ><?xtml-editor x=944 y=861 ?>
          <results >
            <result name="Default" link="10" stubbed="0"/>
            <result name="call screening, 1xx" link="11" stubbed="1" >nFinalStatus &lt; 200

AND bOutdialBWithConnectedA == true</result>
            <result name="call screening, final success" link="9" stubbed="0" >nFinalStatus == 200

AND bOutdialBWithConnectedA == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[if ( 200 == Session.nFinalStatus && Session.bOutdialBWithConnectedA ) {



	/* if the far end doesn't support timers turn them off */

	if( -1 != Session.strUnsupported.toString().indexOf("timer") ) {

		Session.nSessionTimerB = Session.oCallLegB.nSessionTimer = 0 ;

	}

	else  { 

		/* 	otherwise, set the timer to the requested value, or if they are silent on the issue

			go with the setting we suggested */

		Session.nSessionTimerB = Clib.atoi( Session.strSessionExpires ) ;

		Server.logInfo("strSessionExpires <" + Session.strSessionExpires + ">");

		Server.logInfo("oCallLeb.strSessionExpires <" + Session.oCallLegB.strSessionExpires + ">");

		if( 0 == Session.nSessionTimerB ) {

			Session.nSessionTimerB = Clib.atoi( Session.oCallLegB.strSessionExpires ) ;

		}

		if( -1 != Session.strSessionExpires.indexOf("uas") || 0 == Session.nSessionTimerB) {

			Session.bRefreshSessionTimerB = false ;

		}

		else {

			Session.bRefreshSessionTimerB = true ;

		}

		Session.oCallLegB.nSessionTimer = Session.nSessionTimerB;

		Server.logInfo("B leg session timer value: " + Session.oCallLegB.nSessionTimer);

	}

	Session.strSessionExpires = "" ;

	if( Session.nSessionTimerA > 0 ) {

		Session.strSessionExpires = Session.nSessionTimerA.toString() ;

		Session.strRequire = "timer" ;

		if( Session.bRefreshSessionTimerA ) {

			Session.strSessionExpires += "; refresher=uas" ;

		}

		else {

			Session.strSessionExpires += "; refresher=uac" ;

		}

	}

	else {

		Session.strRequire = "" ;

	}

	

	js_calculate_uri_and_route( false, "SIP/2.0", 

			Session.strFrom.toString(), 

			Session.strContact.toString(), 

			Session.strRecordRoute.toString(), 

			Session.oCallLegB.strRemoteUri, 

			Session.oCallLegB.strRoute ) ;

}]]></script>
          </scripts>
        </action>
        <action id="54" plug-in="Pactolus.SipCancel.1" ><?xtml-editor x=952 y=2016 ?>
          <!--Send CANCEL to Called Party-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" handle-responses="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oCallLegB.strCallId</call-id>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >oCallLegB.strFrom</from>
            <request-uri >strCANCELUri</request-uri>
            <to >strBlegTo</to>
            <via >strMyVia</via>
          </sip-bye>
          <results >
            <result name="Default" link="24" stubbed="1"/>
            <result name="Success"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bAlegHungUp = true ;



if ( 0 < Session.strRedirectUri.length ) {

	Session.strCANCELUri = Session.strRedirectUri ;

	var cseq = new SipCSeq(Session.strCSeq) ;

	cseq.increment() ;

	Session.strCSeq = cseq.encode() ;

}

else {

	Session.strCANCELUri = Session.oCallLegB.strRemoteUri ;

}



if ( !Session.bRedirected && !Session.oCallLegB.b911 ) {

	Session.strBlegTo = Session.oCallLegB.strOriginalTo ;

}]]></script>
          </scripts>
        </action>
      </actions>
      <text-objects >
        <text-object x-coord="270" y-coord="506" width="190" height="58" text="Main loop.  Wait for and process responses." font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="609" y-coord="470" width="300" height="78" text="We've received a CANCEL from caller.  Send it on to the called party and continue waiting for messages." font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="1638" y-coord="810" width="230" height="118" text="We've received a final non success response, but the caller does not want us to proxy this back upstream, so simply ACK it and return." font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="1727" y-coord="1306" width="302" height="86" text="We've received a non-success response with additional Contacts to try.  ACK it and send a new INVITE to the next Contact" font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="1661" y-coord="1000" width="298" height="64" text="We've received a NOTIFY message asking us to wiretap this call.  Ask the helper app to do it." font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="1029" y-coord="982" width="296" height="64" text="Create or modify the UAC-facing endpoint for RTP relay." font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="1047" y-coord="175" width="385" height="53" text="The called phone has rejected the INVITE because the Session-Expires value is to low." font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="987" y-coord="450" width="416" height="64" text="We've reached a timeout.  If there is a call attempt in progress cancel it, then return failure.  " font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="568" y-coord="1731" width="226" height="76" text="We received a BYE from the A leg before the call was set up.  " font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="921" y-coord="1561" width="287" height="109" text="We have received a 3xx response.  ACK the response, save the list of Contacts, and then send a new INVITE to the first Contact." font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="105" y-coord="1151" width="197" height="95" text="We've received an ACK from the caller.  Send it on to the called party and return." font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="163" y-coord="78" width="337" height="52" text="If RTP relay is requested, allocate the UAS-facing endpoint." font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="693" y-coord="726" width="316" height="111" text="Proxy responses upstream, unless this is a final non-success response and we have additional Contacts to try from an earlier 3xx response." font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
      </text-objects>
    </function>
    <function name="ProxyCallWithRtpRelay" start="2" event="ProxyCallWithRtpRelay" returns="boolean" >
      <parameters >
        <parameter name="oCallLegA" type="object" pass="byref"/>
        <parameter name="oCallLegB" type="object" pass="byref"/>
        <parameter name="nRingNoAnswerTimeout" type="i4" pass="byref"/>
        <parameter name="oRtpRelay" type="object" pass="byref"/>
        <parameter name="nSessionTimerA" type="i4" pass="byref"/>
        <parameter name="bRefreshSessionTimerA" type="boolean" pass="byref"/>
        <parameter name="nSessionTimerB" type="i4" pass="byref"/>
        <parameter name="bRefreshSessionTimerB" type="boolean" pass="byref"/>
        <parameter name="bProxyFinalNonSuccessResponse" type="boolean" pass="byref"/>
        <parameter name="nFinalStatus" type="i4" pass="byref"/>
        <parameter name="bAlegHungUp" type="boolean" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="bReturn" type="boolean" >0</var>
        <var name="bProxyFinalResponse" type="boolean" >1</var>
        <var name="bTrue" type="boolean" >1</var>
      </local-vars>
      <actions >
        <action id="2" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=76 y=84 ?>
          <!--ProxyCall_Internal-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ProxyCall_Internal&quot;" return="bReturn" external-function="0" library="" >
            <parameter >oCallLegA</parameter>
            <parameter >oCallLegB</parameter>
            <parameter >nRingNoAnswerTimeout</parameter>
            <parameter >bTrue</parameter>
            <parameter >oRtpRelay</parameter>
            <parameter >nSessionTimerA</parameter>
            <parameter >bRefreshSessionTimerA</parameter>
            <parameter >nSessionTimerB</parameter>
            <parameter >bRefreshSessionTimerB</parameter>
            <parameter >bProxyFinalNonSuccessResponse</parameter>
            <parameter >nFinalStatus</parameter>
            <parameter >bAlegHungUp</parameter>
          </function>
          <results >
            <result name="Default" link="1" stubbed="0"/>
          </results>
        </action>
        <action id="1" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=322 y=90 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bReturn"/>
        </action>
      </actions>
    </function>
    <function name="ProxyCallWithoutRtpRelay" start="1" event="ProxyCallWithoutRtpRelay" returns="boolean" >
      <parameters >
        <parameter name="oCallLegA" type="object" pass="byref"/>
        <parameter name="oCallLegB" type="object" pass="byref"/>
        <parameter name="nRingNoAnswerTimeout" type="i4" pass="byref"/>
        <parameter name="nSessionTimerA" type="i4" pass="byref"/>
        <parameter name="bRefreshSessionTimerA" type="boolean" pass="byref"/>
        <parameter name="nSessionTimerB" type="i4" pass="byref"/>
        <parameter name="bRefreshSessionTimerB" type="boolean" pass="byref"/>
        <parameter name="bProxyFinalNonSuccessResponse" type="boolean" pass="byref"/>
        <parameter name="nFinalStatus" type="i4" pass="byref"/>
        <parameter name="bAlegHungUp" type="boolean" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="oNull" type="object" ></var>
        <var name="bReturn" type="boolean" >0</var>
        <var name="bFalse" type="boolean" >0</var>
        <var name="bTrue" type="boolean" >1</var>
      </local-vars>
      <actions >
        <action id="1" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=24 y=49 ?>
          <!--ProxyCall_Internal-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;ProxyCall_Internal&quot;" return="bReturn" external-function="0" library="" >
            <parameter >oCallLegA</parameter>
            <parameter >oCallLegB</parameter>
            <parameter >nRingNoAnswerTimeout</parameter>
            <parameter >bFalse</parameter>
            <parameter >oNull</parameter>
            <parameter >nSessionTimerA</parameter>
            <parameter >bRefreshSessionTimerA</parameter>
            <parameter >nSessionTimerB</parameter>
            <parameter >bRefreshSessionTimerB</parameter>
            <parameter >bProxyFinalNonSuccessResponse</parameter>
            <parameter >nFinalStatus</parameter>
            <parameter >bAlegHungUp</parameter>
          </function>
          <results >
            <result name="Default" link="2" stubbed="0"/>
          </results>
        </action>
        <action id="2" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=270 y=55 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bReturn"/>
        </action>
      </actions>
    </function>
    <function name="SimultaneousRing" start="1" event="SimultaneousRing" returns="boolean" >
      <parameters >
        <parameter name="oCallLegA" type="object" pass="byref"/>
        <parameter name="oCallLegB" type="object" pass="byref"/>
        <parameter name="oRoutes" type="object" pass="byref"/>
        <parameter name="nRingNoAnswerTimeout" type="i4"/>
        <parameter name="nSessionTimerA" type="i4" pass="byref"/>
        <parameter name="bRefreshSessionTimerA" type="boolean" pass="byref"/>
        <parameter name="nSessionTimerB" type="i4" pass="byref"/>
        <parameter name="bRefreshSessionTimerB" type="boolean" pass="byref"/>
        <parameter name="bAlegHungUp" type="boolean" pass="byref"/>
        <parameter name="nFinalStatus" type="i4" pass="byref"/>
        <parameter name="strAni" type="string" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="nDest" type="i4" >0</var>
        <var name="idx" type="i4" >0</var>
        <var name="strEventType" type="string" ></var>
        <var name="nTimeout" type="i4" >4</var>
        <var name="strCallId" type="string" ></var>
        <var name="strContact" type="string" ></var>
        <var name="strContent" type="string" ></var>
        <var name="strContentType" type="string" ></var>
        <var name="strCSeq" type="string" ></var>
        <var name="strFrom" type="string" ></var>
        <var name="strMinSE" type="string" ></var>
        <var name="strRecordRoute" type="string" ></var>
        <var name="strRSeq" type="string" ></var>
        <var name="strStatus" type="string" ></var>
        <var name="strSupported" type="string" ></var>
        <var name="strTo" type="string" ></var>
        <var name="strVia" type="string" ></var>
        <var name="bGotResponse" type="boolean" >0</var>
        <var name="bGotCancel" type="boolean" >0</var>
        <var name="bUnknownCallId" type="boolean" >0</var>
        <var name="nStatus" type="i4" >0</var>
        <var name="bFalse" type="boolean" >0</var>
        <var name="idxSuccess" type="i4" >-1</var>
        <var name="bTrue" type="boolean" >1</var>
        <var name="bConnected" type="boolean" >0</var>
        <var name="strLocalUri" type="string" ></var>
        <var name="bAllCallsFailed" type="boolean" >0</var>
        <var name="bTryAgain" type="boolean" >0</var>
        <var name="iProxyId" type="i4" >0</var>
        <var name="bNoContactIn3xx" type="boolean" >0</var>
        <var name="bMoreContacts" type="boolean" >0</var>
        <var name="strRequire" type="string" ></var>
        <var name="strSessionExpires" type="string" ></var>
        <var name="bGotBye" type="boolean" >0</var>
        <var name="lRNAStart" type="i8" >0</var>
        <var name="bAwaitingResponse" type="boolean" >0</var>
        <var name="strSdpToOfferB" type="string" ></var>
        <var name="nReturnCode" type="i4" >-99</var>
      </local-vars>
      <actions >
        <action id="1" plug-in="Pactolus.Branch.1" ><?xtml-editor x=18 y=20 ?>
          <!--initialize variables-->
          <results >
            <result name="Default" link="2" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* 	PRECONDITION: RequestUri and Route (if used) must be assigned by the caller.

	we will populate all other sip headers */

	

Session.nDest = Session.oRoutes.length ;

for( var i = 0; i < Session.nDest; i++ ) {

	Server.logInfo("Route #" + i + ": RequestUri: " + Session.oRoutes[i].strRequestUri ) ;

	Server.logInfo("Route #" + i + ": Route:      " + Session.oRoutes[i].strRoute ) ;

	

	Session.oRoutes[i].strFrom = "<sip:" ;

	if( Session.strAni.length > 0 ) {

		Session.oRoutes[i].strFrom += Session.strAni ;

		Session.oRoutes[i].strFrom += "@" ;

	}

	Session.oRoutes[i].strFrom += (Server.sipAddress + ":" + Server.sipPort + ">;tag=" + Server.getUTCTime()) ;

	//if this is an IVR transfer we need to remove the tag in the TO header for the new INVITEs.

	if ( -1 != Session.oCallLegA.strTo.indexOf("tag=") ) {

		var to = new SipTo(Session.oCallLegA.strTo.toString());

		to.tag = "";

		Session.oRoutes[i].strTo = Session.oRoutes[i].strOriginalTo = to.encode();

	}

	else {

		Session.oRoutes[i].strTo = Session.oRoutes[i].strOriginalTo = Session.oCallLegA.strTo;

	}

	Session.oRoutes[i].strCallId = create_sip_callid(i) ; 

	Session.oRoutes[i].strOriginalVia = "" ;

	Session.oRoutes[i].bGotResponse = false ;

	Session.oRoutes[i].bComplete = false ;

	

	var cseq = new SipCSeq ;

	cseq.value = (i+1) ;

	cseq.method = "INVITE"; 

	

	Session.oRoutes[i].strCSeq = cseq.encode(); 



}



Session.strLocalUri = "<sip:" + Server.sipAddress ;

if( null != Server.sipPort && 5060 != Server.sipPort ) {

	Session.strLocalUri += ":" ;

	Session.strLocalUri += Server.sipPort ;

}

Session.strLocalUri += ">" ;



/* set provisional timeout */

Session.nTimeout = 4 ;

Session.bAwaitingResponse = true;



Session.nFinalStatus = 0 ;



/* if this a call that is being screened, we need to connect the B-leg to the ms connection initially */

if ( "T" == Session.oCallLegB.strScreenCallFlag ) {

	Session.strSdpToOfferB = Session.oCallLegB.strIVRSdp;

}

else {

	Session.strSdpToOfferB = Session.oCallLegA.strRemoteSdp;

}



//need to track the number of seconds from sending of INVITE to answer, 

// so that we can adjust the RNA value accordingly after each provisional response.

var current = new Date();

Session.lRNAStart = current.getTime();



Server.enableEvents(false); ]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Pactolus.SipInvite.1" ><?xtml-editor x=22 y=241 ?>
          <sip-invite xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" handle-responses="0" follow-redirection="0" final-response-status="" response-content="" response-content-type="" final-request-uri="" timeout-for-final-response="" timeout-for-provisional-response="" record-route="" contact="" response-to="" use-session-timer="0" session-expires="" min-supported-session-timer="" refresher="" remote-party-id="" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oRoutes[idx].strCallId</call-id>
            <contact >strLocalUri</contact>
            <content >strSdpToOfferB</content>
            <content-type >oCallLegA.strContentType</content-type>
            <cseq >oRoutes[idx].strCSeq</cseq>
            <from >oRoutes[idx].strFrom</from>
            <request-uri >oRoutes[idx].strRequestUri</request-uri>
            <route >oRoutes[idx].strRoute</route>
            <to >oRoutes[idx].strTo</to>
            <additional-parameters >
              <diversion >oRoutes[idx].strDiversion</diversion>
              <p-asserted-identity >oRoutes[idx].strPAssertedIdentity</p-asserted-identity>
            </additional-parameters>
          </sip-invite>
          <results >
            <result name="Default" link="3" stubbed="0"/>
            <result name="Success"/>
            <result name="Redirect (3xx)"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Provisional Timeout"/>
            <result name="Final Timeout"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="3" plug-in="Pactolus.Branch.1" ><?xtml-editor x=224 y=323 ?>
          <!--loop-->
          <results >
            <result name="Default" link="2" stubbed="0"/>
            <result name="done sending" link="4" stubbed="0" >idx &gt;= nDest</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.idx++ ;]]></script>
          </scripts>
        </action>
        <action id="4" plug-in="Standard.WaitEvent.1" ><?xtml-editor x=558 y=416 ?>
          <wait xmlns="urn:www.pactolus.com:xtml:communication" timeout="nTimeout" recv-name="strEventType" >
            <msg name="Pactolus.EveSipResponse.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCallId</parameter>
              <parameter ></parameter>
              <parameter >strContact</parameter>
              <parameter >strContent</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strContentType</parameter>
              <parameter >strCSeq</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strFrom</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strMinSE</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strRecordRoute</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strRSeq</parameter>
              <parameter ></parameter>
              <parameter >strSessionExpires</parameter>
              <parameter >strStatus</parameter>
              <parameter >strSupported</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strTo</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strVia</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
            </msg>
            <msg name="Pactolus.EveSipCancel.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCallId</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCSeq</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strFrom</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strTo</parameter>
              <parameter ></parameter>
              <parameter >strVia</parameter>
            </msg>
            <msg name="Pactolus.EveSipBye.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCallId</parameter>
              <parameter >strCSeq</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strFrom</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strTo</parameter>
              <parameter ></parameter>
              <parameter >strVia</parameter>
            </msg>
          </wait>
          <results >
            <result name="Default" link="4" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout" link="8" stubbed="1"/>
            <result name="Unknown CallId" link="4" stubbed="1" >bUnknownCallId == true</result>
            <result name="Caller hung up" link="11" stubbed="1" >bGotCancel == true</result>
            <result name="final response success" link="8" stubbed="1" >bGotResponse == true

AND nStatus &lt; 300

AND nStatus &gt;= 200</result>
            <result name="final response non-success" link="22" stubbed="1" >bGotResponse == true

AND nStatus &gt;= 400</result>
            <result name="Timeout on initial Provisional" link="10" stubbed="1" >'Result'  == 'Timeout'

AND nTimeout == 4</result>
            <result name="3xx redirect" link="18" stubbed="0" >nStatus &gt;= 300

AND nStatus &lt; 400

AND bGotResponse == true</result>
            <result name="BYE from Caller" link="33" stubbed="1" >bGotBye == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Setting timeout value to " + Session.nTimeout ) ;



Server.enableEvents(true) ;

]]></script>
            <script language="javascript" timing="middle" ><![CDATA[Session.bGotCancel = Session.bGotResponse = Session.bGotBye = Session.bUnknownCallId = false ;

if( 2 == Result.id ) { 

	if( -1 != Session.strEventType.indexOf( "SipResponse" ) ) {

			

		/* check to make sure this is the callid we are waiting for */

		Session.idx = js_search_callid(Session.oRoutes, Session.strCallId) ;

		if( -1 == Session.idx ) {

			Session.bUnknownCallId = true; 

		}

		else {

		

			/* update the timeout now that we have a response */

			Server.logInfo("Got a response on call leg #" + Session.idx ) ;

			

			if (Session.bAwaitingResponse) {

				Session.nTimeout = (0 == Session.nRingNoAnswerTimeout ? 300 :  Session.nRingNoAnswerTimeout ) ;

				Session.bAwaitingResponse = false;

				Server.logInfo("Received initial response; setting RNA to <" + Session.nTimeout + ">");

			}

			else {

				var current = new Date();

				var elapsed = current.getTime() - Session.lRNAStart;

				elapsed = Math.round((elapsed/1000));

				Session.nTimeout = (0 == Session.nRingNoAnswerTimeout ? 300 :  Session.nRingNoAnswerTimeout ) - elapsed;

				Server.logInfo("Remaining Ring No Answer Timeout: " + Session.nTimeout);

			}



					

			/* save the via header on the response; this is the via we sent and we will need to use it 

			on either a CANCEL or an ACK to a non-success final response 

			*/

			if (null == Session.oRoutes[Session.idx].strOriginalVia || 0 == Session.oRoutes[Session.idx].strOriginalVia.length ) {

				Session.oRoutes[Session.idx].strOriginalVia = Session.strVia ;

				Server.logInfo("Setting original via to: " + Session.oRoutes[Session.idx].strOriginalVia ) ;

			}



			Session.bGotResponse = Session.oRoutes[Session.idx].bGotResponse = true ;

			var status = new SipStatus(Session.strStatus) ;

			Session.nStatus = status.code ;

			Session.oRoutes[Session.idx].nStatus = Session.nStatus;

			

			/* the To header may now have a tag, so update our stored value */

			Session.oRoutes[Session.idx].strTo = Session.strTo ;

			

			/* if this was a success then save the SDP and calculate the uri and route for further requests */

			if( 200 == Session.nStatus ) {		

				js_calculate_uri_and_route( false, "SIP/2.0", 

					Session.oRoutes[Session.idx].strFrom.toString(), 

					Session.strContact.toString(), 

					Session.strRecordRoute.toString(), 

					Session.oRoutes[Session.idx].strRemoteUri, 

					Session.oRoutes[Session.idx].strRoute ) ;



				Session.oRoutes[Session.idx].strRemoteSdp = Session.strContent ;

				Session.oRoutes[Session.idx].strContentType = Session.strContentType ;

				Session.oCallLegB.nHuntGroupRouteId = Session.idx;

				Session.idxSuccess = Session.idx ;

				Session.idx = 0; 

			}

		}

	}

	else if( -1 != Session.strEventType.indexOf("SipCancel") ) {

		Session.bGotCancel = true ;

		Session.nTimeout = 10;

	}

	else if( -1 != Session.strEventType.indexOf("SipBye") ) {

		/* 	GSX sometimes sends a BYE in response to an INVITE.

			That's not right, but handle it as a 503 final response.

		*/

		/* check to make sure this is the callid we are waiting for */

		Session.idx = js_search_callid(Session.oRoutes, Session.strCallId) ;

		if( -1 != Session.idx ) {

			Session.nStatus = 503 ;

			Session.bGotResponse = true ;

		}

		else if ( Session.strCallId == Session.oCallLegA.strCallId ) {

			Session.bGotBye = true;

			Session.oCallLegA.bConnected = false;

			Session.bAlegHungUp = true;			

		}

		else {

			Session.bUnknownCallId = true; 

		}

		Session.nTimeout = 10;

	}

}



Session.nFinalStatus = Session.nStatus ;



	]]></script>
            <script language="javascript" timing="last" ><![CDATA[if( 4 == Result.id ) {

	/* timeout, set index to zero for iterating through legs to cancel them */

	Session.idx = 0 ;

}

Server.enableEvents(false) ;]]></script>
          </scripts>
        </action>
        <action id="6" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=1201 y=566 ?>
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oRoutes[idx].strCallId</call-id>
            <cseq >oRoutes[idx].strCSeq</cseq>
            <from >oRoutes[idx].strFrom</from>
            <request-uri >oRoutes[idx].strRequestUri</request-uri>
            <route >oRoutes[idx].strRoute</route>
            <to >oRoutes[idx].strTo</to>
            <via >oRoutes[idx].strOriginalVia</via>
          </sip-ack>
          <results >
            <result name="Default" link="4" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="all attempts failed?" link="7" stubbed="0" >bAllCallsFailed == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="middle" ><![CDATA[Session.oRoutes[Session.idx].bComplete = true ;



Session.bAllCallsFailed = false ;

for( var i = 0; i < Session.nDest; i++ ) {

	if( !Session.oRoutes[i].bComplete ) {

		return ;

	}

}

Session.bAllCallsFailed = true ;]]></script>
          </scripts>
        </action>
        <action id="7" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1466 y=584 ?>
          <!--return failure-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bFalse"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.enableEvents(true); ]]></script>
          </scripts>
        </action>
        <action id="8" plug-in="Pactolus.Branch.1" ><?xtml-editor x=25 y=915 ?>
          <!--loop-->
          <results >
            <result name="Default" link="9" stubbed="0"/>
            <result name="done sending" link="13" stubbed="0" >idx == nDest</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* don't cancel the call IF this is the successful one

	 OR we never got a response on this leg

	 OR we have already got a final non-success response on this leg 

*/

Server.logInfo("Canceling outstanding call legs, idxSuccess = " + Session.idxSuccess + " number of legs: " + Session.nDest ) ;

var cancel = false ;

while( !cancel && Session.idx < Session.nDest ) {



	if( Session.idx == Session.idxSuccess || 

		!Session.oRoutes[Session.idx].bGotResponse ||

		Session.oRoutes[Session.idx].bComplete) {

		

		Server.logInfo("Skipping call leg #" + Session.idx ); 

		Session.idx++ ;

	}

	else {

		Server.logInfo("Going to cancel call leg #" + Session.idx ) ;

		cancel = true ;

	}

}



//set the final status for the B-leg

if( Session.idxSuccess >= 0 ) {

	Session.oCallLegB.strSIPStatus = Session.oRoutes[Session.idxSuccess].nStatus ;

}]]></script>
          </scripts>
        </action>
        <action id="9" plug-in="Pactolus.SipCancel.1" ><?xtml-editor x=266 y=935 ?>
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" handle-responses="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oRoutes[idx].strCallId</call-id>
            <cseq >oRoutes[idx].strCSeq</cseq>
            <from >oRoutes[idx].strFrom</from>
            <request-uri >oRoutes[idx].strRequestUri</request-uri>
            <route >oRoutes[idx].strRoute</route>
            <to >oRoutes[idx].strOriginalTo</to>
            <via >oRoutes[idx].strOriginalVia</via>
          </sip-bye>
          <results >
            <result name="Default" link="8" stubbed="0"/>
            <result name="Success"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[Session.idx++ ;]]></script>
          </scripts>
        </action>
        <action id="10" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=343 y=1130 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bConnected"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bConnected = false ;



Server.enableEvents(true) ;]]></script>
          </scripts>
        </action>
        <action id="11" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=890 y=312 ?>
          <!--SIP/2.0 200 OK-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >"SIP/2.0 200 OK"</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="12" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="12" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=1110 y=318 ?>
          <!--SIP/2.0 487 Request Terminated-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oCallLegA.strCallId</call-id>
            <cseq >oCallLegA.strCSeq</cseq>
            <from >oCallLegA.strFrom</from>
            <status >"SIP/2.0 487 Request Terminated"</status>
            <to >oCallLegA.strTo</to>
            <via >oCallLegA.strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="8" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.idx = 0 ;

Session.bAlegHungUp = true ;]]></script>
          </scripts>
        </action>
        <action id="13" plug-in="Pactolus.Branch.1" ><?xtml-editor x=46 y=1100 ?>
          <results >
            <result name="Default" link="10" stubbed="0"/>
            <result name="connected" link="24" stubbed="0" >idxSuccess != -1</result>
          </results>
        </action>
        <action id="14" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=303 y=1290 ?>
          <!--200 OK to A-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oCallLegA.strCallId</call-id>
            <contact >strLocalUri</contact>
            <content >oCallLegB.strRemoteSdp</content>
            <content-type >oCallLegB.strContentType</content-type>
            <cseq >oCallLegA.strCSeq</cseq>
            <from >oCallLegA.strFrom</from>
            <record-route >oCallLegA.strRecordRoute</record-route>
            <require >strRequire</require>
            <session-expires >strSessionExpires</session-expires>
            <status >"SIP/2.0 200 OK"</status>
            <to >oCallLegA.strTo</to>
            <via >oCallLegA.strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="15" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[



/* if there is no tag in the To header of the A leg, add one */

var s = new String( Session.oCallLegA.strTo ) ;

if( -1 == s.indexOf("tag=") ) {

	Session.oCallLegA.strTo += ";tag=0276" ;

}



if( Session.nSessionTimerA > 0 ) {

	Session.strSessionExpires = Session.nSessionTimerA.toString() ;

	Session.strRequire = "timer" ;

	if( Session.bRefreshSessionTimerA ) {

		Session.strSessionExpires += "; refresher=uas" ;

	}

	else {

		Session.strSessionExpires += "; refresher=uac" ;

	}

}

if( Session.strSessionExpires.length > 0 ) {

	Session.nSessionTimerB = Clib.atoi( Session.strSessionExpires ) ;

	if( -1 != Session.strSessionExpires.indexOf("uas") ) {

		Session.bRefreshSessionTimerB = false ;

	}

	else {

		Session.bRefreshSessionTimerB = true ;

	}

}

]]></script>
          </scripts>
        </action>
        <action id="15" plug-in="Standard.WaitEvent.1" ><?xtml-editor x=532 y=1287 ?>
          <!--Wait for ACK from A-->
          <wait xmlns="urn:www.pactolus.com:xtml:communication" timeout="5" recv-name="strEventType" >
            <msg name="Pactolus.EveSipAck.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
            </msg>
          </wait>
          <results >
            <result name="Default" link="10" stubbed="0"/>
            <result name="Success" link="16" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="16" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=762 y=1294 ?>
          <!--send ACK to B-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oCallLegB.strCallId</call-id>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >oCallLegB.strFrom</from>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <route >oCallLegB.strRoute</route>
            <to >oCallLegB.strTo</to>
          </sip-ack>
          <results >
            <result name="Default" link="17" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="17" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1205 y=1352 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bConnected"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bConnected = true ;

Server.enableEvents(true) ;

Server.logInfo("Connected to call leg: " + Session.idxSuccess ) ;]]></script>
          </scripts>
        </action>
        <action id="18" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=1040 y=1122 ?>
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oRoutes[idx].strCallId</call-id>
            <cseq >oRoutes[idx].strCSeq</cseq>
            <from >oRoutes[idx].strFrom</from>
            <request-uri >oRoutes[idx].strRequestUri</request-uri>
            <route >oRoutes[idx].strRoute</route>
            <to >oRoutes[idx].strTo</to>
            <via >oRoutes[idx].strOriginalVia</via>
          </sip-ack>
          <results >
            <result name="Default" link="21" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="no Contact in 3xx" >bNoContactIn3xx == true

AND bAllCallsFailed == false</result>
            <result name="all attempts failed" link="7" stubbed="1" >bAllCallsFailed == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="middle" ><![CDATA[Session.bNoContactIn3xx = true ;

Server.logInfo("Received 3xx Redirect with Contact: " + Session.strContact ) ;

Session.oRoutes[Session.idx].oRedirectUrl.length = 0 ;

Session.oRoutes[Session.idx].bRedirect = true ;



if ( 0 != Session.strContact.length ) {

	Session.bNoContactIn3xx = false ;

	var contact_array = parseContacts( Session.strContact ) ;

	for( var i = 0; i < contact_array.length; i++ ) {

		Session.oRoutes[Session.idx].oRedirectUrl[i] = contact_array[i] ;

	}

	Server.logInfo("Number of redirect urls to try: " + Session.oRoutes[Session.idx].oRedirectUrl.length ) ;

	

	Session.oRoutes[Session.idx].strRemoteUri = Session.oRoutes[Session.idx].strRequestUri = Session.oRoutes[Session.idx].oRedirectUrl[0] ;

	Server.logInfo("Constructing Uri on redirect to: " + Session.oRoutes[Session.idx].strRemoteUri ) ;

	Session.oRoutes[Session.idx].strTo = Session.oRoutes[Session.idx].strOriginalTo ;

	Session.oRoutes[Session.idx].nRedirectIdx = 1 ;

	Session.oRoutes[Session.idx].strCallId = create_sip_callid(Session.idx*10) ; 



}

else {

	Server.logError("Received a 3xx response with no Contact header") ;

	Session.oRoutes[Session.idx].bComplete = true ;



	Session.bAllCallsFailed = false ;

	for( var i = 0; i < Session.nDest; i++ ) {

		if( !Session.oRoutes[i].bComplete ) {

			return ;

		}

	}

	Session.bAllCallsFailed = true ;

}

]]></script>
          </scripts>
        </action>
        <action id="21" plug-in="Pactolus.SipInvite.1" ><?xtml-editor x=1382 y=1112 ?>
          <sip-invite xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" handle-responses="0" follow-redirection="0" final-response-status="" response-content="" response-content-type="" final-request-uri="" timeout-for-final-response="" timeout-for-provisional-response="" record-route="" contact="" response-to="" use-session-timer="0" session-expires="" min-supported-session-timer="" refresher="" remote-party-id="" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oRoutes[idx].strCallId</call-id>
            <contact >strLocalUri</contact>
            <content >strSdpToOfferB</content>
            <content-type >oCallLegA.strContentType</content-type>
            <cseq >oRoutes[idx].strCSeq</cseq>
            <from >oRoutes[idx].strFrom</from>
            <request-uri >oRoutes[idx].strRequestUri</request-uri>
            <route >oRoutes[idx].strRoute</route>
            <to >oRoutes[idx].strTo</to>
            <additional-parameters >
              <p-asserted-identity >oRoutes[idx].strPAssertedIdentity</p-asserted-identity>
            </additional-parameters>
          </sip-invite>
          <results >
            <result name="Default" link="4" stubbed="1"/>
            <result name="Success"/>
            <result name="Redirect (3xx)"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Provisional Timeout"/>
            <result name="Final Timeout"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="22" plug-in="Pactolus.Branch.1" ><?xtml-editor x=892 y=640 ?>
          <results >
            <result name="Default" link="6" stubbed="0"/>
            <result name="more Contacts to try" link="23" stubbed="0" >bMoreContacts == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bMoreContacts = false ;

if( null != Session.oRoutes[Session.idx].oRedirectUrl &&

	null != Session.oRoutes[Session.idx].nRedirectIdx &&

	Session.oRoutes[Session.idx].nRedirectIdx < Session.oRoutes[Session.idx].oRedirectUrl.length ) {

	

	Session.bMoreContacts = true ;

	

}]]></script>
          </scripts>
        </action>
        <action id="23" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=1042 y=886 ?>
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oRoutes[idx].strCallId</call-id>
            <cseq >oRoutes[idx].strCSeq</cseq>
            <from >oRoutes[idx].strFrom</from>
            <request-uri >oRoutes[idx].strRequestUri</request-uri>
            <route >oRoutes[idx].strRoute</route>
            <to >oRoutes[idx].strTo</to>
            <via >oRoutes[idx].strOriginalVia</via>
          </sip-ack>
          <results >
            <result name="Default" link="21" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[var next = Session.oRoutes[Session.idx].nRedirectIdx++ ;

Session.oRoutes[Session.idx].strRemoteUri = Session.oRoutes[Session.idx].strRequestUri = Session.oRoutes[Session.idx].oRedirectUrl[next]; 

Server.logInfo("Constructing Uri on redirect to: " + Session.oRoutes[Session.idx].strRemoteUri ) ;

Session.oRoutes[Session.idx].strTo = Session.oRoutes[Session.idx].strOriginalTo ;

Session.oRoutes[Session.idx].strCallId = create_sip_callid(Session.idx*100) ; 

]]></script>
          </scripts>
        </action>
        <action id="24" plug-in="Pactolus.Branch.1" ><?xtml-editor x=58 y=1313 ?>
          <results >
            <result name="Default" link="14" stubbed="0"/>
            <result name="IVR Transfer" link="17" stubbed="0" >oCallLegB.strIVRTransferFlag == "T"</result>
            <result name="screen call" link="16" stubbed="0" >oCallLegB.strScreenCallFlag == "T"

OR oCallLegA.bConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* copy sip information into call leg B object */

copy_call_leg( Session.oRoutes[Session.idxSuccess], Session.oCallLegB ) ;]]></script>
          </scripts>
        </action>
        <action id="33" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=894 y=462 ?>
          <!--SIP/2.0 200 OK to BYE from A-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >"SIP/2.0 200 OK"</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="8" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
      </actions>
      <text-objects >
        <text-object x-coord="67" y-coord="153" width="231" height="56" text="Send out INVITEs to all supplied destinations" font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="888" y-coord="226" width="314" height="68" text="The caller has hung up.  Send appropriate responses and then cancel the outbound legs." font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="493" y-coord="215" width="229" height="141" text="Handle responses, 

wait for one of 4 outcomes:

1. a success response

2. caller hangs up

3. all attempts fail

4. timeout" font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="91" y-coord="739" width="388" height="168" text="We've either:



a) received a success response, 

b) the caller has hung up, or 

c) we've reached the ring no answer timeout.



Cancel all the other INVITEs." font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="1197" y-coord="473" width="319" height="86" text="We've received a non-success response. Complete that transaction and exit if there are no more attempts in progress." font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="1014" y-coord="1035" width="333" height="68" text="We've received a 3xx response.

Construct a list of Contacts and send to the first one in the list." font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="1070" y-coord="772" width="316" height="70" text="We've received a final non-success response with more Contacts to try.  Send to the next one in the list." font-name="Times New Roman" size="-20" red="0" green="0" blue="0" weight="400" underline="0" strikeout="0" point-size="12" italic="0"/>
        <text-object x-coord="444" y-coord="935" width="475" height="238" text="Note: we send the Cancels here, but return immediately without waiting for the final INVITE responses.  We do this so we can return quickly in order to allow the caller to finish setting up the audio connection and avoid clipping. 



However, we still need to finish the INVITE transactions for these canceled calls by sending an ACK once we receive a 487 Request Terminated response.  This must be done in the OnResponse handler of the calling app (refer to pcs_voip_terminate.xml for example)" font-name="Times New Roman" size="-16" red="0" green="0" blue="0" weight="0" underline="0" strikeout="0" point-size="12" italic="0"/>
      </text-objects>
    </function>
    <function name="TransferCall" start="71" event="TransferCall" returns="boolean" >
      <parameters >
        <parameter name="oReferringParty" type="object" pass="byref"/>
        <parameter name="oReferredParty" type="object" pass="byref"/>
        <parameter name="oSipMsg" type="object" pass="byref"/>
        <parameter name="strLocalUri" type="string"/>
        <parameter name="oAPI" type="object" pass="byref"/>
        <parameter name="oAccessLine" type="object" pass="byref"/>
        <parameter name="strNIUAddress" type="string" pass="byref"/>
        <parameter name="strPrimarySoftswitch" type="string" pass="byref"/>
        <parameter name="strBackupSoftswitch" type="string" pass="byref"/>
        <parameter name="strCarrierName" type="string" pass="byref"/>
        <parameter name="nCaleaDelay" type="i4" pass="byref"/>
        <parameter name="oRate" type="object" pass="byref"/>
        <parameter name="oSub" type="object" pass="byref"/>
        <parameter name="bReferrerConnected" type="boolean" pass="byref"/>
        <parameter name="oCLegAPI" type="object" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="oReferredToParty" type="object" ></var>
        <var name="strNotifyEvent" type="string" >refer</var>
        <var name="strSubscriptionState" type="string" ></var>
        <var name="strNotifyContent" type="string" ></var>
        <var name="strNotifyContentType" type="string" >message/sipfrag</var>
        <var name="oSipRequest" type="object" ></var>
        <var name="nStatus" type="i4" >0</var>
        <var name="nTimeout" type="i4" >0</var>
        <var name="bGotFinalResponseFromReferredTo" type="boolean" >0</var>
        <var name="strViaOnReferredLegReInvite" type="string" ></var>
        <var name="oSipResponse" type="object" ></var>
        <var name="bConnected" type="boolean" >0</var>
        <var name="bGotFinalResponseFromReferred" type="boolean" >0</var>
        <var name="bEmptyReferTo" type="boolean" >0</var>
        <var name="strResponse" type="string" ></var>
        <var name="oService" type="object" ></var>
        <var name="nReturnCode" type="i4" >0</var>
        <var name="strStatus" type="string" ></var>
        <var name="bInvalidNumber" type="boolean" >0</var>
        <var name="bRejectCall" type="boolean" >0</var>
        <var name="oCallLegs" type="object" ></var>
        <var name="oAPI_tmp" type="object" ></var>
        <var name="oAccessLine_tmp" type="object" ></var>
        <var name="strReferredPartyTo" type="string" ></var>
        <var name="strReferredPartyFrom" type="string" ></var>
        <var name="bAuthTermSuccess" type="boolean" >0</var>
        <var name="strReferringPartyTo" type="string" ></var>
        <var name="strMsType" type="string" ></var>
        <var name="strReferringPartyFrom" type="string" ></var>
        <var name="bForwardedToVM" type="boolean" >0</var>
        <var name="strWiretapEvent" type="string" ></var>
        <var name="bGotAck" type="boolean" >0</var>
        <var name="bGotResponse" type="boolean" >0</var>
        <var name="bNewSdp" type="boolean" >0</var>
        <var name="bGotCaleaNotify" type="boolean" >0</var>
        <var name="bCallIdMatch" type="boolean" >0</var>
        <var name="bReferredPartyHungUp" type="boolean" >0</var>
        <var name="strMyVia" type="string" ></var>
        <var name="nFinalStatus" type="i4" >0</var>
        <var name="strSdpToOfferReferred" type="string" ></var>
        <var name="bReferringPartyHungUp" type="boolean" >0</var>
        <var name="strAccept" type="string" ></var>
        <var name="strAcceptEncoding" type="string" ></var>
        <var name="strAcceptLanguage" type="string" ></var>
        <var name="strContact" type="string" ></var>
        <var name="strContent" type="string" ></var>
        <var name="strContentDisposition" type="string" ></var>
        <var name="strContentType" type="string" ></var>
        <var name="strDate" type="string" ></var>
        <var name="strEncryption" type="string" ></var>
        <var name="strInReplyTo" type="string" ></var>
        <var name="strMinSE" type="string" ></var>
        <var name="strProxyAuthenticate" type="string" ></var>
        <var name="strRecordRoute" type="string" ></var>
        <var name="strRequire" type="string" ></var>
        <var name="strRetryAfter" type="string" ></var>
        <var name="strRSeq" type="string" ></var>
        <var name="strSessionExpires" type="string" ></var>
        <var name="strSupported" type="string" ></var>
        <var name="strUnsupported" type="string" ></var>
        <var name="strWWWAuthenticate" type="string" ></var>
        <var name="strNotifySubscriptionState" type="string" ></var>
        <var name="strNotifyStatus" type="string" ></var>
        <var name="strVia" type="string" ></var>
        <var name="strCallId" type="string" ></var>
        <var name="strRoute" type="string" ></var>
        <var name="strAllow" type="string" ></var>
        <var name="strAllowEvents" type="string" ></var>
        <var name="strCSeq" type="string" ></var>
        <var name="strFrom" type="string" ></var>
        <var name="strEvent" type="string" ></var>
        <var name="strTo" type="string" ></var>
        <var name="strTimestamp" type="string" ></var>
        <var name="strRequestUri" type="string" ></var>
        <var name="nIdx" type="i4" >0</var>
        <var name="nContactLength" type="i4" >0</var>
        <var name="bRedirected" type="boolean" >0</var>
        <var name="strCaleaOriginationNumber" type="string" ></var>
        <var name="strCaleaTerminationNumber" type="string" ></var>
        <var name="strCaleaSurveiledNumber" type="string" ></var>
        <var name="bGotBye" type="boolean" >0</var>
        <var name="bReferredConnected" type="boolean" >0</var>
        <var name="oRedirectUrl" type="object" ></var>
        <var name="bInvitedReferred" type="boolean" >0</var>
        <var name="bNADialing" type="boolean" >0</var>
        <var name="bAwaitingResponse" type="boolean" >0</var>
        <var name="lRNAStart" type="i8" >0</var>
        <var name="bAttended" type="boolean" >0</var>
        <var name="bHandlingAttendedReInvite" type="boolean" >0</var>
        <var name="nTimeoutInProcess" type="i4" >0</var>
        <var name="bAwaitingResponse_Referred" type="boolean" >0</var>
        <var name="oSub_tmp" type="object" ></var>
        <var name="strOutdialDest" type="string" ></var>
        <var name="oRate_tmp" type="object" ></var>
        <var name="bOrigInitiatedTransfer" type="boolean" >0</var>
        <var name="strPAssertedIdentity" type="string" ></var>
        <var name="strReplacedCallId" type="string" ></var>
        <var name="strReplacedFromTag" type="string" ></var>
        <var name="strReplacedToTag" type="string" ></var>
        <var name="strReferredToSession" type="string" ></var>
        <var name="strReferredToIpAddress" type="string" ></var>
        <var name="strDiversion" type="string" ></var>
      </local-vars>
      <actions >
        <action id="71" plug-in="Pactolus.Branch.1" ><?xtml-editor x=33 y=26 ?>
          <results >
            <result name="Default" link="73" stubbed="0"/>
            <result name="Empty Refer-To" link="59" stubbed="1" >bEmptyReferTo == true</result>
            <result name="Invalid Phone Number" link="59" stubbed="1" >bInvalidNumber == true</result>
            <result name="bAttended" link="115" stubbed="0" >bAttended == true</result>
            <result name="bHandlingAttendedReInvite" link="80" stubbed="1" >bHandlingAttendedReInvite == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.lockSharedVariables();

	Session.s_strLocalHost = Session.strLocalUri;

Server.unlockSharedVariables();

Session.bReferrerConnected = true;



js_initAPI(Session.oAPI_tmp);

js_initVoipCallLeg(Session.oReferredToParty);



if ( -1 != Session.oAPI.strPlatformSessionId.toString().indexOf("pcs_voip_originate")) {

	Session.bOrigInitiatedTransfer = true;

	Server.logInfo("The transfer was initiated by the a-leg.");

}



var method = new SipCSeq(Session.oSipMsg.strCSeq.toString());

if ( "INVITE" == method.method ) {

	Session.bHandlingAttendedReInvite = true;

	Server.logInfo("Handling a ReInvite from an attended transfer. Connecting C to the B leg sdp.");

}

else {

	Server.logInfo("ReferringParty Call ID: " + Session.oReferringParty.strCallId) ;

	Server.logInfo("ReferredParty Call ID: " + Session.oReferredParty.strCallId) ;

}



if ( Session.bHandlingAttendedReInvite ) {

	//In this scenario, the ReInvite is from A-leg to C-leg. 

	/** The C-leg information has been passed in as the ReferredToParty info, because the INVITE here is going

	from A --> C with the sdp of B. The Invite to B is handled by the session that received the REFER and sent

	the INVITE with Replaces header to the A-C session.

	**/

	Session.oReferredToParty = Session.oReferredParty;

	Session.oReferredParty.strRemoteSdp = Session.oSipMsg.strContent;

	Session.oReferredParty.strContentType = Session.oSipMsg.strContentType;

	Session.oReferredParty.strContentDisposition = Session.oSipMsg.strContentDisposition;



	Session.oAPI_tmp.nRingNoAnswerTimeout = 120;



}

else if ( 0 == Session.oSipMsg.strReferTo.length ) {

	Session.bEmptyReferTo = true ;

}

else {

	var i = Session.oSipMsg.strReferTo.toString().indexOf(":") ;

	var j = Session.oSipMsg.strReferTo.toString().indexOf("@") ;

	i = ++i ;

	Session.oAPI_tmp.strDestReceived = Session.oSipMsg.strReferTo.toString().substring(i, j) ;

	

	/* Temporary fix to allow dialing with the leading 1 on a transfer */

	if ( !Session.oReferringParty.bUac ) {

		//Refer was initiated by the originator

		if ( "1" == Session.oAPI.strOrigCallingCode ) {

			Session.bNADialing = true;

		}

	}

	else if ( "1" == Session.oAPI.strOrigCallingCode && "F" == Session.oAPI.strIntlOrigFlag ){

		Session.bNADialing = true ;

	}

	//first check that a complete number was dialed. If it's abbreviated dialing, we don't want to strip any digits.

	if ( Session.bNADialing && 11 == Session.oAPI_tmp.strDestReceived.length ) {

		if ( -1 != Session.oAPI_tmp.strDestReceived.toString().indexOf("1")) {

			Session.oAPI_tmp.strDestReceived = Session.oAPI_tmp.strDestReceived.toString().substr(1);

		}

	}



	Server.logInfo("ReferredTo phone: " + Session.oAPI_tmp.strDestReceived) ;

	Session.oReferredToParty.strEnteredDestNbr = Session.oReferredToParty.strOutdialDestNbr = Session.oAPI_tmp.strDestReceived ;



	/* if there is a replaces param in the ReferTo header, this is an attended transfer,

	  and we need to pull it out as the Replaces header, using the rest as the To */

	if ( -1 != Session.oSipMsg.strReferTo.toString().indexOf("?Replaces=") ) {

		Session.bAttended = true;

	}

	else {

		Session.oReferredToParty.strRequestUri = Session.oReferredToParty.strTo = Session.oSipMsg.strReferTo;



	}



	/*some ReferTo headers in the Refer request come in without brackets. 

	  Check for them and add if necessary. */



	if ( -1 == Session.oSipMsg.strReferTo.toString().indexOf("<sip:")) {

		var to = new SipTo(Session.oSipMsg.strReferTo.toString());

		Session.oReferredToParty.strTo = to.encode();

	}

	

	Session.oReferringParty.strReferredBy = Session.oSipMsg.strReferredBy;	

	

	

	/* block attempts to transfer calls to 911 */

	if ( "911" == Session.oAPI_tmp.strDestReceived || "0911" == Session.oAPI_tmp.strDestReceived || "1911" == Session.oAPI_tmp.strDestReceived ) {

		Session.bInvalidNumber = true ;

	}

}

if( !Session.bAttended && !Session.bHandlingAttendedReInvite) {

	var from = new SipFrom(Session.oReferringParty.strFrom);
	var to = new SipTo(Session.oReferredParty.strReferredBy);
	var PAI = new SipTo(Session.oReferredParty.strReferredBy);

	if ( null != Session.oAPI_tmp.strAniToSend && Session.oAPI_tmp.strAniToSend.length > 0 ) {
		Server.logInfo("Found preferred ANI to send. May be using it for PAI:" + Session.oAPI_tmp.strAniToSend);
		from.url.user = Session.oAPI_tmp.strAniToSend;
	} 

	if ( PAI.url.user.length >= 7 ) {
	// then use the original PSTN To[0] value since it will be authenticated on the Nextone
		var pai = js_translate_calling_number_broadband( Session.s_strCarrierName, js_getLeadingDigits(PAI.url.user) ) ;
	} else {
	// from will have been set to the strANIToSend already so use it for corp dept extension calls.
		var pai = js_translate_calling_number_broadband( Session.s_strCarrierName, js_getLeadingDigits(from.url.user) ) ;
	}
		
//	var pai = js_translate_calling_number_broadband( Session.s_strCarrierName, js_getLeadingDigits(from.url.user) ) ;

	var diversion = js_translate_destination_broadband( Session.strCarrierName,

			js_getLeadingDigits(to.url.user), 

			Session.oCLegAPI.nOrigCountryId,

			false, 

		 	Session.oCLegAPI.strAniReceived ) ;

	Session.strPAssertedIdentity = "<sip:" + pai + "@" + to.url.host + ">";

	Session.strDiversion = "<sip:" + diversion + "@" + from.url.host + ">";

	

	Server.logInfo("PAI: " + Session.strPAssertedIdentity);

}



]]></script>
          </scripts>
        </action>
        <action id="59" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=293 y=20 ?>
          <!--400 Bad Request-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oSipMsg.strCallId</call-id>
            <cseq >oSipMsg.strCSeq</cseq>
            <from >oSipMsg.strFrom</from>
            <status >"SIP/2.0 400 Bad Request"</status>
            <to >oSipMsg.strTo</to>
            <via >oSipMsg.strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="60" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="60" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=552 y=39 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bConnected"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logError("Empty Refer-To header: " + Session.oSipMsg.strReferTo ) ;]]></script>
          </scripts>
        </action>
        <action id="61" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=1226 y=230 ?>
          <!--SIP/2.0 202 Accepted-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oSipMsg.strCallId</call-id>
            <contact >strLocalUri</contact>
            <cseq >oSipMsg.strCSeq</cseq>
            <from >oSipMsg.strFrom</from>
            <status >"SIP/2.0 202 Accepted"</status>
            <to >oSipMsg.strTo</to>
            <via >oSipMsg.strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="62" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="62" plug-in="Pactolus.SipNotify.1" ><?xtml-editor x=1447 y=239 ?>
          <!--100 Trying for Transfer status-->
          <sip-notify xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oSipMsg.strCallId</call-id>
            <contact >strLocalUri</contact>
            <content >strNotifyContent</content>
            <content-type >strNotifyContentType</content-type>
            <cseq >oReferringParty.strCSeq</cseq>
            <event >strNotifyEvent</event>
            <from >oSipMsg.strTo</from>
            <request-uri >oReferringParty.strRemoteUri</request-uri>
            <route >oReferringParty.strRoute</route>
            <to >oSipMsg.strFrom</to>
            <subscription-state >strNotifySubscriptionState</subscription-state>
          </sip-notify>
          <results >
            <result name="Default" link="79" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.strNotifySubscriptionState = "active;expires=3600" ;



Session.strNotifyContent = "SIP/2.0 100 Trying \n" ;

]]></script>
          </scripts>
        </action>
        <action id="63" plug-in="Pactolus.SipNotify.1" ><?xtml-editor x=1253 y=638 ?>
          <!--Send Notify with final response from ReferredToParty-->
          <sip-notify xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oSipMsg.strCallId</call-id>
            <contact >strLocalUri</contact>
            <content >strNotifyContent</content>
            <content-type >strNotifyContentType</content-type>
            <cseq >oReferringParty.strCSeq</cseq>
            <event >strNotifyEvent</event>
            <from >oSipMsg.strTo</from>
            <request-uri >oReferringParty.strRemoteUri</request-uri>
            <route >oReferringParty.strRoute</route>
            <to >oSipMsg.strFrom</to>
            <subscription-state >strNotifySubscriptionState</subscription-state>
          </sip-notify>
          <results >
            <result name="Default" link="106" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.strNotifySubscriptionState = "terminated;reason=noresource" ;



//Session.strNotifyContent = "SIP/2.0 " + Session.strNotifyStatus + "\n" ;

Session.strNotifyContent = Session.strStatus + "\n" ;



//Server.logInfo("Final status was: " + Session.strStatus ) ;

//Server.logInfo("Notify status was: " + Session.strNotifyStatus ) ;



]]></script>
          </scripts>
        </action>
        <action id="64" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=798 y=1772 ?>
          <!--Transfer successful.  We're now back to two call legs-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bConnected"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bConnected = true ;

Server.logInfo("Transfer completed successfully") ;

Server.logInfo("New call leg strTo: " + Session.oReferringParty.strTo );

Server.logInfo("New call leg strFrom: " + Session.oReferringParty.strFrom );

Server.logInfo("New call leg strCallId: " + Session.oReferringParty.strCallId );

Server.logInfo("New call leg bUac: " + Session.oReferringParty.bUac);



]]></script>
          </scripts>
        </action>
        <action id="65" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=786 y=1670 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bConnected"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logError("Transfer failed with final response: " + Session.oReferredToParty.strSIPStatus) ;



]]></script>
          </scripts>
        </action>
        <action id="66" plug-in="Pactolus.Branch.1" ><?xtml-editor x=41 y=1605 ?>
          <results >
            <result name="Default" link="68" stubbed="0"/>
            <result name="ReferringParty connected?" link="67" stubbed="0" >oReferringParty.bConnected == true

AND bAttended == false

AND bHandlingAttendedReInvite == false</result>
          </results>
        </action>
        <action id="67" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=109 y=1744 ?>
          <!--BYE to Referrer-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="4" handle-responses="1" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oReferringParty.strCallId</call-id>
            <cseq >oReferringParty.strCSeq</cseq>
            <from >strReferringPartyFrom</from>
            <request-uri >oReferringParty.strRemoteUri</request-uri>
            <route >oReferringParty.strRoute</route>
            <to >strReferringPartyTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="68" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oReferringParty.bConnected = false ;





]]></script>
          </scripts>
        </action>
        <action id="68" plug-in="Pactolus.Branch.1" ><?xtml-editor x=465 y=1706 ?>
          <results >
            <result name="Default" link="65" stubbed="0"/>
            <result name="success" link="64" stubbed="0" >bConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if ( !Session.bHandlingAttendedReInvite){



	/* 	move the information for the ReferredToParty into the object that held the ReferringParty information,

		since that call leg has been dropped */



	Session.oCallLegs[0] = Session.oReferringParty ;

	Session.oCallLegs[1] = Session.oReferredToParty ;



	js_remove_call_leg(Session.oCallLegs, Session.oReferringParty.strCallId) ;



	Session.oCallLegs[0].strRemoteUri = Session.oReferredToParty.strRemoteUri ;

	Session.oCallLegs[0].strRemoteSdp = Session.oReferredToParty.strRemoteSdp ;

	Session.oCallLegs[0].bGSX = false; 

	if( !Session.bAttended ) {

		Session.oCallLegs[0].bReferredTo = true ;

	}

	Session.oCallLegs[0].strCallType = "4" ;

	if( Session.bAttended ) {

		Session.oCallLegs[0].bUac = true ;

	}

	else {

		Session.oCallLegs[0].bUac = Session.oReferringParty.bUac;

	}

	Session.oCallLegs[0].bConnected = true;



	if ( !Session.oCallLegs[0].bUac ) {

		Session.oCallLegs[0].strTo = Session.oCallLegs[0].strOriginalTo = Session.oReferredToParty.strFrom;

		Session.oCallLegs[0].strFrom = Session.oReferredToParty.strTo;

	}





	Session.oReferringParty = Session.oCallLegs[0] ;	

	Session.oCLegAPI.oAPI = Session.oAPI_tmp;

	Session.oCLegAPI.oAccessLine = Session.oAccessLine_tmp;

	Session.oCLegAPI.oSub = Session.oAccessLine_tmp.oSub;

	Session.oCLegAPI.oService = Session.oService;

	

} else{

	/*in the case of a c-leg ReInvite to B, the original call legs remain the same

	 with the exception of the dialog information for the A-leg, which was saved prior to

	 calling this function. Becuase at the beginning of this function we've set oReferredToParty = oReferredParty, 

	 we need to do the opposite now to carry over any updates to the call leg.*/

	 Session.oReferredParty = Session.oReferredToParty;

}	



]]></script>
          </scripts>
        </action>
        <action id="70" plug-in="Pactolus.Branch.1" ><?xtml-editor x=943 y=820 ?>
          <!--configure RequestUri for vmail_deposit-->
          <results >
            <result name="Default" link="63" stubbed="0"/>
            <result name="ForwardToVM" link="80" stubbed="1" >bForwardedToVM == false

AND oAPI_tmp.bForwardToVoicemail == true

AND bHandlingAttendedReInvite == false</result>
            <result name="AttendedReInvite" link="102" stubbed="0" >bHandlingAttendedReInvite == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[

]]></script>
            <script language="javascript" timing="last" ><![CDATA[if ( true == Session.oAPI_tmp.bForwardToVoicemail && false == Session.bForwardedToVM ) {

	Session.oReferredToParty.strRemoteUri = "sip:" ;

	Session.oReferredToParty.strRemoteUri += Session.oReferredToParty.strOutdialDestNbr + "@" ;

	Session.oReferredToParty.strRemoteUri += Session.strNIUAddress ;

	Session.oReferredToParty.strRemoteUri += ";target=pcs_vmail_deposit" ;

	Session.oReferredToParty.strRemoteUri += ";access_line_id=" + Session.oAccessLine_tmp.lAccessLineId;

	Session.oReferredToParty.strRemoteUri += ";vmail_account_id=" + Session.oAPI_tmp.lVoiceMailId;

	Session.oReferredToParty.strRemoteUri += "  SIP/2.0";	

	Session.bForwardedToVM = true;

}]]></script>
          </scripts>
        </action>
        <action id="73" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=51 y=191 ?>
          <!--VoipAuthenticateTermination-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;VoipAuthenticateTermination&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >oAPI_tmp</parameter>
            <parameter >oAccessLine_tmp</parameter>
            <parameter >oService</parameter>
            <parameter >strResponse</parameter>
            <parameter >oReferredToParty.strRequestUri</parameter>
            <parameter >oSub</parameter>
          </function>
          <results >
            <result name="Default" link="112" stubbed="0"/>
            <result name="RejectCall" link="63" stubbed="0" >bRejectCall == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nReturnCode = -50;

Session.bAuthTermSuccess = false;



Session.oAPI_tmp.strPlatformSessionId = Session.oAPI.strPlatformSessionId ;

Session.oAPI_tmp.nDialingPlanId = Session.oAPI.nDialingPlanId;

Session.oAPI_tmp.strProcDBName = Session.oAPI.strProcDBName;

if ( Session.bOrigInitiatedTransfer ) {

	Session.oAPI_tmp.strAniReceived = Session.oAPI.strAniReceived;

	

	Session.oAPI.strStrippedOrigNumber = Session.oAPI.strAniReceived;

}

else{

	Session.oAPI_tmp.strAniReceived = Session.oReferringParty.strOutdialDestNbr;

	

	Session.oAPI.strStrippedOrigNumber = Session.oAPI.strDestReceived;

	Session.oAPI.strOrigDomIntFlag = Session.oAPI.strIntlDestFlag;

	Session.oAPI.nOrigCountryId = Session.oReferringParty.nDestCountryId;

	Session.oAPI.nOrigRegionId = Session.oReferringParty.nDestRegionId;

	Session.oAPI.strOrigAreaCode = Session.oReferringParty.strDestAreaCode;

}

Session.oAccessLine_tmp.strRealm = Session.oAccessLine.strRealm;

Session.oAPI_tmp.bFaxCall = false;

Session.oAPI_tmp.bRemindMeCall = false;

Session.oAPI_tmp.nDeptId = Session.oAPI.nDeptId;

if ( "F" == Session.oAccessLine.strBlockCallerIdFlag) {

	Session.oAPI_tmp.bCallerIdBlocked = false;

}

else {

	Session.oAPI_tmp.bCallerIdBlocked = true;

}



if(Session.oAPI.nDeptIdOut > 0){

	Session.oAPI_tmp.nDeptId = Session.oAPI.nDeptIdOut;

}else if(Session.oAPI.nDeptId > 0){

	Session.oAPI_tmp.nDeptId = Session.oAPI.nDeptId;

}else{

	Session.oAPI_tmp.nDeptId = Session.oAPI.lDeptId;

}



		]]></script>
            <script language="javascript" timing="middle" ><![CDATA[Session.oReferredToParty.strDestRouteType = "2";

if ( 0 == Session.nReturnCode ) { 

	Session.bAuthTermSuccess = true;

	Session.oReferredToParty.strDestRouteType = "1";

}

else if ( -2 != Session.nReturnCode ) {

	Session.bRejectCall = true ;

}]]></script>
          </scripts>
        </action>
        <action id="74" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1147 y=41 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bConnected"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bConnected = false;]]></script>
          </scripts>
        </action>
        <action id="77" plug-in="Pactolus.Sleep.1" ><?xtml-editor x=1969 y=552 ?>
          <!--wait configurable num seconds to allow wiretap to set up-->
          <sleep xmlns="urn:www.pactolus.com:xtml:application" duration="nCaleaDelay"/>
          <results >
            <result name="Default" link="80" stubbed="1"/>
          </results>
        </action>
        <action id="78" plug-in="Pactolus.SipNotify.1" ><?xtml-editor x=1982 y=280 ?>
          <!--wiretap-->
          <sip-notify xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" increment-cseq-first="1" increment-cseq-last="0" >
            <call-id >oReferringParty.strCallId</call-id>
            <cseq >oReferringParty.strCSeq</cseq>
            <event >"calea"</event>
            <from >oReferringParty.strTo</from>
            <request-uri >oReferringParty.strRemoteUri</request-uri>
            <to >oReferringParty.strFrom</to>
            <subscription-state >"active"</subscription-state>
          </sip-notify>
          <results >
            <result name="Default" link="77" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Sending wiretap notification for ReferredTo number: " + Session.oReferredToParty.strOutdialDestNbr);



Session.strWiretapEvent = "calea";



/* wiretap destination */

Session.strWiretapEvent += "wd=\"" ;

Session.strWiretapEvent += Session.oAccessLine_tmp.strWiretapDest ;

Session.strWiretapEvent += "\";";



/* origination number: in Transfer, use the number that the call is being connected to */

Session.strWiretapEvent += "on=\"" ;

Session.strWiretapEvent += Session.oReferredParty.strPhone ;

Session.strWiretapEvent += "\";";



/* termination number */

Session.strWiretapEvent += "tn=\"" ;

Session.strWiretapEvent += Session.oReferredToParty.strOutdialDestNbr ;

Session.strWiretapEvent += "\";";



/* serveiled number */

Session.strWiretapEvent += "sn=\"" ;

Session.strWiretapEvent += Session.oReferredToParty.strOutdialDestNbr ;

Session.strWiretapEvent += "\"" ;

]]></script>
          </scripts>
        </action>
        <action id="79" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1715 y=299 ?>
          <results >
            <result name="Default" link="80" stubbed="0"/>
            <result name=".strWiretapFlag == &quot;T&quot;" link="78" stubbed="0" >oAccessLine_tmp.strWiretapFlag == "T"</result>
          </results>
        </action>
        <action id="80" plug-in="Pactolus.SipInvite.1" ><?xtml-editor x=100 y=574 ?>
          <!--INVITE to ReferredToParty-->
          <sip-invite xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" handle-responses="0" follow-redirection="0" final-response-status="" response-content="" response-content-type="" final-request-uri="" timeout-for-final-response="" timeout-for-provisional-response="" record-route="" contact="" response-to="" use-session-timer="0" session-expires="" min-supported-session-timer="" refresher="" remote-party-id="" increment-cseq-first="0" increment-cseq-last="0" >
            <accept >oReferredToParty.strAccept</accept>
            <call-id >oReferredToParty.strCallId</call-id>
            <contact >strLocalUri</contact>
            <content >oReferredParty.strRemoteSdp</content>
            <content-disposition >oReferredParty.strContentDisposition</content-disposition>
            <content-type >oReferredParty.strContentType</content-type>
            <cseq >oReferredToParty.strCSeq</cseq>
            <from >oReferredToParty.strFrom</from>
            <record-route >oReferredToParty.strRecordRoute</record-route>
            <request-uri >oReferredToParty.strRemoteUri</request-uri>
            <require >oReferredToParty.strRequire</require>
            <route >oReferredToParty.strRoute</route>
            <supported >oReferredToParty.strSupported</supported>
            <to >oReferredToParty.strTo</to>
            <replaces >oReferredToParty.strReplaces</replaces>
            <referred-by >oReferringParty.strReferredBy</referred-by>
            <additional-parameters >
              <diversion >strDiversion</diversion>
              <p-asserted-identity >strPAssertedIdentity</p-asserted-identity>
            </additional-parameters>
          </sip-invite>
          <results >
            <result name="Default" link="81" stubbed="0"/>
            <result name="Success"/>
            <result name="Redirect (3xx)"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Provisional Timeout"/>
            <result name="Final Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[

Session.bGotFinalResponseFromReferredTo = false;



Session.oReferredToParty.strContact = Session.strLocalUri;



if ( !Session.bHandlingAttendedReInvite) {

	Session.oReferredToParty.strCallId = js_CreateUniqueCallId() ;

	Session.oReferredToParty.strCSeq = "1100 INVITE" ;

}





/* if a specific codec was selected, try that */

if( Session.oAccessLine_tmp.strCodec.length > 0 ) {

	if( 0 == Clib.strcmpi( "PCMU", Session.oAccessLine_tmp.strCodec ) ) {

		Server.logInfo("Modifying SDP so PCMU is the preferred codec") ;

		js_modifySdpForCodec( Session.oReferredParty.strRemoteSdp, 0 ) ;

	}

	else if( 0 == Clib.strcmpi( "G729", Session.oAccessLine_tmp.strCodec ) ) {

		Server.logInfo("Modifying SDP so G729 is the preferred codec") ;

		js_modifySdpForCodec( Session.oReferredParty.strRemoteSdp, 18 ) ;

	}

}



/* save payload type */

var sdpUsed = new Sdp( Session.oReferredParty.strRemoteSdp.toString() ) ;

if( sdpUsed.media.length > 0 && sdpUsed.media[0].rtpMaps.length > 0 ) {

	Session.oReferredToParty.nPayloadType = sdpUsed.media[0].rtpMaps[0].type ;

	if( null != Session.oReferredToParty.nRtpClockRate ) {

		Session.oReferredToParty.nRtpClockRate = sdpUsed.media[0].rtpMaps[0].clockRate ;

	}

	else {

		Session.oReferredToParty.nRtpClockRate = 8000 ;

	}

}



Session.oReferredToParty.lTimeStart = Server.getUTCTime() ;





if ( 0 == Session.oAPI_tmp.nRingNoAnswerTimeout ) {

	Session.oAPI_tmp.nRingNoAnswerTimeout = 120;

}





//set provisional timeout

Session.nTimeout = 4;

Session.bAwaitingResponse = true;



/* reverse to and from on whichever leg is the UAS */

if ( !Session.oReferringParty.bUac ) {

	Session.strReferringPartyTo = Session.oReferringParty.strFrom;

	Session.strReferringPartyFrom = Session.oReferringParty.strTo;

	Session.strReferredPartyTo = Session.oReferredParty.strTo;

	Session.strReferredPartyFrom = Session.oReferredParty.strFrom;

}

else {

	Session.strReferredPartyTo = Session.oReferredParty.strFrom;

	//Session.strReferredPartyFrom = Session.oReferredParty.strOriginalTo;

	Session.strReferredPartyFrom = Session.oReferredParty.strTo;

	Session.strReferringPartyTo	= Session.oReferringParty.strTo;

	Session.strReferringPartyFrom = Session.oReferringParty.strFrom;

}





//Set the From header for ReferredTo INVITE to the ReferredParty

if ( !Session.bHandlingAttendedReInvite ) {

	var from;

	if ( !Session.bOrigInitiatedTransfer ) {

		from = new SipTo(Session.strReferredPartyTo);

	}

	else {

		from = new SipTo(Session.oReferringParty.strOriginalTo);

	}	

	from.tag = Server.getUTCTime();

	Session.oReferredToParty.strFrom = from.encode();



	/* calling party number */	

	var referred = new SipTo(Session.oReferredParty.strTo.toString()) ;

	Session.oReferredParty.strPhone = referred.url.phoneNumber ;



	Session.oReferredToParty.strSupported = Session.oSipMsg.strSupported;

}



/* if the configured display name comes in without quotes and contains unexpected characters, 

  the Nextone will reject the INVITE with a 400 Bad Request. So, we will check for the quotes

  around a display name, and if they are missing we will add them. */

var referredBy = new SipTo(Session.oReferringParty.strReferredBy.toString());

var name = referredBy.displayName;

if ( 0 < name.length && -1 == name.toString().indexOf("\"")) {

	Server.logInfo("The Display Name is lacking quotes. Will add them.");

	referredBy.displayName = "\"" + name + "\"";

	Session.oReferringParty.strReferredBy = referredBy.encode();

	Server.logInfo("Reconstructed the Referred-By header with quotes around the Display Name: " + Session.oReferringParty.strReferredBy);

}

Server.enableEvents(false);























]]></script>
          </scripts>
        </action>
        <action id="81" plug-in="Standard.WaitEvent.1" ><?xtml-editor x=378 y=535 ?>
          <!--Wait for responses-->
          <wait xmlns="urn:www.pactolus.com:xtml:communication" timeout="nTimeout" recv-name="strEvent" >
            <msg name="Pactolus.EveSipResponse.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strAcceptLanguage</parameter>
              <parameter ></parameter>
              <parameter >strAllow</parameter>
              <parameter >strAllowEvents</parameter>
              <parameter >strCallId</parameter>
              <parameter ></parameter>
              <parameter >strContact</parameter>
              <parameter >strContent</parameter>
              <parameter >strContentDisposition</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strContentType</parameter>
              <parameter >strCSeq</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strFrom</parameter>
              <parameter >strInReplyTo</parameter>
              <parameter ></parameter>
              <parameter >strMinSE</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strProxyAuthenticate</parameter>
              <parameter >strRecordRoute</parameter>
              <parameter ></parameter>
              <parameter >strRequire</parameter>
              <parameter >strRetryAfter</parameter>
              <parameter >strRSeq</parameter>
              <parameter ></parameter>
              <parameter >strSessionExpires</parameter>
              <parameter >strStatus</parameter>
              <parameter >strSubscriptionState</parameter>
              <parameter >strSupported</parameter>
              <parameter >strTimestamp</parameter>
              <parameter >strTo</parameter>
              <parameter >strUnsupported</parameter>
              <parameter ></parameter>
              <parameter >strVia</parameter>
              <parameter ></parameter>
              <parameter >strWWWAuthenticate</parameter>
            </msg>
            <msg name="Pactolus.EveSipAck.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCallId</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strRoute</parameter>
              <parameter ></parameter>
              <parameter >strTo</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
            </msg>
            <msg name="Pactolus.EveSipBye.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCallId</parameter>
              <parameter >strCSeq</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strFrom</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strTo</parameter>
              <parameter ></parameter>
              <parameter >strVia</parameter>
            </msg>
            <msg name="Pactolus.EveSipNotify.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCallId</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCSeq</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strNotifyEvent</parameter>
              <parameter ></parameter>
              <parameter >strFrom</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strSubscriptionState</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strTo</parameter>
              <parameter ></parameter>
              <parameter >strVia</parameter>
            </msg>
          </wait>
          <results >
            <result name="Default" link="81" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout" link="97" stubbed="0"/>
            <result name="ACK from Referred" link="66" stubbed="0" >bGotAck == true

AND oReferredParty.strCallId == strCallId</result>
            <result name="final non-success, No VM" link="105" stubbed="0" >nFinalStatus &gt;= 400

AND bReferredPartyHungUp == false

AND nIdx &gt;= nContactLength

AND bForwardedToVM == false

AND bHandlingAttendedReInvite == false</result>
            <result name="3xx Response from ReferredTo" link="90" stubbed="0" >bGotResponse == true

AND (nFinalStatus &gt;= 300

AND nFinalStatus &lt;= 399)

AND strCallId match oReferredToParty.strCallId

AND bHandlingAttendedReInvite == false</result>
            <result name="Response with new sdp" link="82" stubbed="0" >bNewSdp == true

AND nFinalStatus &lt; 300

AND bHandlingAttendedReInvite == false</result>
            <result name="calea notify event" >bGotCaleaNotify == true</result>
            <result name="BYE from ReferringParty" link="84" stubbed="1" >bReferringPartyHungUp == true

AND bGotBye == true</result>
            <result name="BYE from ReferredParty" link="84" stubbed="1" >bReferredPartyHungUp == true

AND bGotBye == true</result>
            <result name="final non-success after VM" link="105" stubbed="1" >nFinalStatus &gt;= 400

AND bReferredPartyHungUp == false

AND nIdx &gt;= nContactLength

AND bForwardedToVM == true</result>
            <result name="final success, Referred" link="93" stubbed="0" >nFinalStatus == 200

AND strCallId match oReferredParty.strCallId

AND bGotResponse == true

AND bHandlingAttendedReInvite == false</result>
            <result name="final success, ReferredTo" link="63" stubbed="0" >nFinalStatus == 200

AND strCallId match oReferredToParty.strCallId

AND bGotResponse == true

AND bHandlingAttendedReInvite == false</result>
            <result name="RNA, forward to VM" link="97" stubbed="1" >'Result'  == 'Timeout'

AND oAPI_tmp.bForwardToVoicemail == true

AND bForwardedToVM == false

AND bHandlingAttendedReInvite == false</result>
            <result name="ReferredTo response, proxy" link="108" stubbed="1" >bGotResponse == true

AND bHandlingAttendedReInvite == true</result>
            <result name="ACK from oSipMsg - success" link="94" stubbed="0" >bGotAck == true

AND oSipMsg.strCallId == strCallId

AND nFinalStatus == 200</result>
            <result name="ACK from oSipMsg - failure" link="105" stubbed="1" >bGotAck == true

AND oSipMsg.strCallId == strCallId

AND nFinalStatus != 200</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.enableEvents(true);

Server.logInfo("Setting timeout value to " + Session.nTimeout ) ;



//need to track the number of seconds from sending of INVITE to answer, 

// so that we can adjust the RNA value accordingly after each provisional response.

var current = new Date();

Session.lRNAStart = current.getTime();

]]></script>
            <script language="javascript" timing="middle" ><![CDATA[Session.bGotAck = Session.bGotResponse = Session.bNewSdp = Session.bGotCaleaNotify = Session.bGotBye = false;



if( 2 == Result.id ) { 

	if( -1 != Session.strEvent.indexOf( "SipAck" ) ) {

		Session.bGotAck = true ;

	}

	else if( -1 != Session.strEvent.indexOf( "SipResponse" ) ) {

			

		//chceck that this is from either the Referred or ReferredTo

		if( Session.strCallId == Session.oReferredToParty.strCallId ||  

			Session.strCallId == Session.oReferredParty.strCallId ) {



			Session.bGotResponse = true ;

			

			var status = new SipStatus(Session.strStatus) ;

			Session.nFinalStatus = status.code ;

					

			

			//the rest of this script only applies to responses from the ReferredTo party.

			if ( Session.strCallId == Session.oReferredToParty.strCallId ) {

			

				/* update the timeout now that we have a response */

				if( Session.bReferredPartyHungUp ) {

					/* 	per RFC 3261: 

						If there is no final response for the original request in 64*T1 seconds 

						(T1 is defined in Section 17.1.1.1), the client SHOULD then consider the

						original transaction cancelled and SHOULD destroy the client

						transaction handling the original request.

					*/

					Session.nTimeout = 10 ;

				}

				else if ( Session.bForwardedToVM && Session.bAwaitingResponse ) {

					Session.nTimeout = 120;	

				}

				else if ( Session.bAwaitingResponse ) {

					Session.nTimeout = (0 == Session.oAPI_tmp.nRingNoAnswerTimeout ? 120 :  Session.oAPI_tmp.nRingNoAnswerTimeout ) ;

					Session.bAwaitingResponse = false;

					Server.logInfo("Received initial response; setting RNA to <" + Session.nTimeout + ">");

				}

				else if ( Session.bAwaitingResponse_Referred ) {

					Session.bAwaitingResponse_Referred = false;

					Session.nTimeout = Session.nTimeoutInProcess;

					var current = new Date();

					var elapsed = current.getTime() - Session.lRNAStart;

					elapsed = Math.round((elapsed/1000));

					Session.nTimeout = Session.nTimeout - elapsed;

					Server.logInfo("Remaining Ring No Answer Timeout: " + Session.nTimeout);

				}

				else {

					var current = new Date();

					var elapsed = current.getTime() - Session.lRNAStart;

					elapsed = Math.round((elapsed/1000));

					Session.nTimeout = Session.nTimeout - elapsed;

					Server.logInfo("Remaining Ring No Answer Timeout: " + Session.nTimeout);

				}

						

		

			

				/* save the via header on the response; this is the via we sent and we will need to use it 

				on either a CANCEL or an ACK to a non-success final response 

				*/

				if (0 == Session.strMyVia.length) {

					Session.strMyVia = Session.strVia ;

				}

			

				/* set the status in call leg A

				 * we will use call leg A's status as the response if we're

				 * unable to connect to call leg B */

				if ( Session.oReferringParty.bUac ) {

					Session.oReferredParty.strStatus = Session.strStatus;

				}

				else {

					Session.oReferredToParty.strStatus = Session.strStatus;

				}

			

				/* the To header may now have a tag, so update our stored value */

				if( Session.nFinalStatus >= 200 && Session.nFinalStatus != 300 ) {

					if ( Session.strCallId == Session.oReferredToParty.strCallId ) {

						Session.oReferredToParty.strTo = Session.strTo ;

					}

					Session.strNotifyStatus = Session.nFinalStatus ;

					

					Session.nTimeout = 10;

									

				}

				

				/* if we got the far end SDP save it */

				Session.strSdpToOfferReferred = "" ;

				if( Session.strContent.length > 0 && Session.nFinalStatus < 300 ) {

			

					Server.logInfo("Received a response from ReferredTo with SDP: " + Session.strContent) ;

					Server.logInfo("Previous SDP from ReferredTo was: " + Session.oReferredToParty.strRemoteSdp ) ;

					if( Session.oReferredToParty.strRemoteSdp != Session.strContent 

					/*||

						( Session.bAllocateNewRtp && !Session.oRtpRelay.ep[0].bAllocated )*/

						 ) {



						/* here we either have a new Sdp, or else it's the same Sdp as the 

							previous invite transaction but we're doing rtp relay and need

							to allocate a new local endpoint for it 

						*/	

						Server.logInfo("New SDP received from B") ;				

						Session.bNewSdp = true ;

					}

					else if( !Session.bRtpRelayRequested ) {

						Server.logInfo("Same SDP and rtp relay not involved") ;				

						/* just pass on the Sdp, we're not doing rtp relay */

						Session.strSdpToOfferReferred = Session.strContent ;

					} 

					else {

						/* just pass on the local endpoint, we are doing rtp relay and the Sdp hasn't changed*/

						Server.logInfo("Same SDP, rtp relay involved, just pass it on") ;				

						Session.strSdpToOfferReferred = Session.oRtpRelay.ep[0].strSdp ;

						if( Session.oReferredParty.strPublicIpAddress.length > 0 ) {

							var newSdp = new Sdp( Session.strSdpToOfferReferred ) ;

							newSdp.connection.address = Session.oReferredParty.strPublicIpAddress ;

							Session.strSdpToOfferReferred = newSdp.encode() ;

							Server.logInfo("Modified SDP to offer Referred: " + Session.strSdpToOfferReferred ) ;

						}

					}

					Session.oReferredToParty.strRemoteSdp = Session.strContent ;

					Session.oReferredToParty.strContentType = Session.strContentType ;

				}

			}

			else {

				if ( Session.bAwaitingResponse_Referred ) {

					Session.bAwaitingResponse_Referred = false;

					Session.nTimeout = Session.nTimeoutInProcess;

					var current = new Date();

					var elapsed = current.getTime() - Session.lRNAStart;

					elapsed = Math.round((elapsed/1000));

					Session.nTimeout = Session.nTimeout - elapsed;

					Server.logInfo("Remaining Ring No Answer Timeout: " + Session.nTimeout);

				}

			}

		}

	}

	

	else if( -1 != Session.strEvent.indexOf("SipBye") ) {

	

		

		/* 	GSX sometimes sends a BYE in response to an INVITE.

			That's not right, but handle it as a 503 final response.

		*/

		if ( Session.strCallId == Session.oReferredToParty.strCallId ) {

			Session.nFinalStatus = 503 ;

			Session.bGotResponse = true ;

			Session.nTimeout = 10;

		}

		else if ( Session.strCallId == Session.oReferredParty.strCallId ) {

			Session.bReferredPartyHungUp = true;

			Session.oReferredParty.bConnected = false;

			Session.bGotBye = true;

			Session.nTimeout = 10;

		}

		else if ( Session.strCallId == Session.oReferringParty.strCallId ) {

			Session.bReferringPartyHungUp = true;

			Session.oReferringParty.bConnected = false;

			Session.bReferrerConnected = false;

			Session.bGotBye = true;

		}

		

	}

	else if( -1 != Session.strEvent.indexOf("SipNotify") ) {

	

				Server.logInfo("Got a NOTIFY message, event: " + Session.strNotifyEvent ) ;

		Server.logInfo("Got a NOTIFY message, with callid: " + Session.strCallId) ;

		Server.logInfo("Got a NOTIFY message, with callid: " + Session.strCSeq) ;

		Server.logInfo("Got a NOTIFY message, with subscription-state: " + Session.strSubscriptionState) ;

		if( -1 != Session.strNotifyEvent.indexOf("calea") ) {

			Session.bGotCaleaNotify = true ;

		}

	}

	else {

		Server.logInfo("Discarding event: " + Session.strEvent ) ;

	}

}





	]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.enableEvents(false);

]]></script>
          </scripts>
        </action>
        <action id="82" plug-in="Pactolus.SipInvite.1" ><?xtml-editor x=667 y=557 ?>
          <!--INVITE to ReferredParty-->
          <sip-invite xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" handle-responses="0" follow-redirection="0" final-response-status="" response-content="" response-content-type="" final-request-uri="" timeout-for-final-response="" timeout-for-provisional-response="" record-route="" contact="" response-to="" use-session-timer="0" session-expires="" min-supported-session-timer="" refresher="" remote-party-id="" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oReferredParty.strCallId</call-id>
            <contact >oReferredParty.strContact</contact>
            <content >oReferredToParty.strRemoteSdp</content>
            <content-disposition >strContentDisposition</content-disposition>
            <content-type >strContentType</content-type>
            <cseq >oReferredParty.strCSeq</cseq>
            <from >strReferredPartyFrom</from>
            <record-route >oReferredParty.strRecordRoute</record-route>
            <request-uri >oReferredParty.strRemoteUri</request-uri>
            <route >oReferredParty.strRoute</route>
            <session-expires >oReferredParty.strSessionExpires</session-expires>
            <to >strReferredPartyTo</to>
          </sip-invite>
          <results >
            <result name="Default" link="83" stubbed="0"/>
            <result name="Success"/>
            <result name="Redirect (3xx)"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Provisional Timeout"/>
            <result name="Final Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nTimeoutInProcess = Session.nTimeout;

Session.nTimeout = 4;

Session.bAwaitingResponse_Referred = true;

]]></script>
            <script language="javascript" timing="last" ><![CDATA[Session.bInvitedReferred = true;]]></script>
          </scripts>
        </action>
        <action id="83" plug-in="Pactolus.Branch.1" ><?xtml-editor x=940 y=621 ?>
          <!--new sdp came in 200 OK-->
          <results >
            <result name="Default" link="81" stubbed="0"/>
            <result name="200 OK" link="63" stubbed="0" >nFinalStatus == 200</result>
          </results>
        </action>
        <action id="84" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=954 y=980 ?>
          <!--200 OK to BYE-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >"SIP/2.0 200 OK"</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="85" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="85" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1185 y=1027 ?>
          <results >
            <result name="Default" link="81" stubbed="0"/>
            <result name="BYE from ReferredParty" link="86" stubbed="0" >bReferredPartyHungUp == true</result>
          </results>
        </action>
        <action id="86" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1441 y=1018 ?>
          <results >
            <result name="Default" link="88" stubbed="0"/>
            <result name="Recevied Final Response" link="87" stubbed="0" >bGotFinalResponseFromReferredTo == true</result>
          </results>
        </action>
        <action id="87" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=1721 y=1087 ?>
          <!--BYE to ReferredTo Party-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="4" handle-responses="1" increment-cseq-first="1" increment-cseq-last="0" >
            <call-id >oReferredToParty.strCallId</call-id>
            <contact >strLocalUri</contact>
            <cseq >oReferredToParty.strCSeq</cseq>
            <from >oReferredToParty.strFrom</from>
            <record-route >oReferredToParty.strRecordRoute</record-route>
            <request-uri >oReferredToParty.strRemoteUri</request-uri>
            <route >oReferredToParty.strRoute</route>
            <to >oReferredToParty.strTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="89" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="88" plug-in="Pactolus.SipCancel.1" ><?xtml-editor x=1718 y=890 ?>
          <!--CANCEL to ReferredTo-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="6" handle-responses="1" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oReferredToParty.strCallId</call-id>
            <contact >strLocalUri</contact>
            <cseq >oReferredToParty.strCSeq</cseq>
            <from >oReferredToParty.strFrom</from>
            <record-route >oReferredToParty.strRecordRoute</record-route>
            <request-uri >oReferredToParty.strRemoteUri</request-uri>
            <route >oReferredToParty.strRoute</route>
            <to >oReferredToParty.strTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="89" stubbed="0"/>
            <result name="Success"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Cancelling INVITE to TransferToParty because TransferredParty hung up.");]]></script>
          </scripts>
        </action>
        <action id="89" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=2057 y=1061 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bConnected"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logError("ReferredParty hung up before completion of Transfer.");

]]></script>
          </scripts>
        </action>
        <action id="90" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=682 y=1152 ?>
          <!--Send ACK to Called Party with same branch on Via, 300 Rerouted call-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <request-uri >oReferredToParty.strRemoteUri</request-uri>
            <timestamp >strTimestamp</timestamp>
            <to >strTo</to>
            <via >strMyVia</via>
          </sip-ack>
          <results >
            <result name="Default" link="80" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="3xx w/o Contact" link="91" stubbed="0" >nContactLength == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bRedirected = true ;



]]></script>
            <script language="javascript" timing="middle" ><![CDATA[Session.nContactLength = Session.oRedirectUrl.length = 0 ;

	if ( 0 != Session.strContact.length ) {

		var contact_array = parseContacts( Session.strContact ) ;

		for( var i = 0; i < contact_array.length; i++ ) {

			Session.oRedirectUrl[i] = contact_array[i] ;

		}

		Session.nContactLength = Session.oRedirectUrl.length  ;

		Server.logInfo("Number of redirect urls to try: " + Session.nContactLength) ;

	

		Session.oReferredToParty.strRemoteUri = Session.oRedirectUrl[0] ;

		Server.logInfo("Constructing Uri on redirect to: " + Session.oReferredToParty.strRemoteUri ) ;

		Session.nIdx = 1;

		Session.oReferredToParty.strCallId = "" ;

		Session.oReferredToParty.strCSeq = "" ;



	}

	else {

		Server.logError("Received a 3xx response with no Contact header, returning failure to caller") ;

	}





]]></script>
          </scripts>
        </action>
        <action id="91" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=949 y=1165 ?>
          <!--503 Service Unavailable to ReferredParty-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oReferredParty.strCallId</call-id>
            <cseq >oReferredParty.strCSeq</cseq>
            <from >oReferredParty.strFrom</from>
            <status >"SIP/2.0 503 Service Unavailable"</status>
            <to >oReferredParty.strTo</to>
            <via >oReferredParty.strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="81" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nFinalStatus = 503 ;

Session.bRedirected = false ;



]]></script>
          </scripts>
        </action>
        <action id="93" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=132 y=995 ?>
          <!--ACK to ReferredParty-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oReferredParty.strCallId</call-id>
            <cseq >oReferredParty.strCSeq</cseq>
            <from >strReferredPartyFrom</from>
            <request-uri >oReferredParty.strRemoteUri</request-uri>
            <route >oReferredParty.strRoute</route>
            <timestamp >strTimestamp</timestamp>
            <to >strReferredPartyTo</to>
          </sip-ack>
          <results >
            <result name="Default" link="95" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oReferredParty.strRemoteSdp = Session.strContent;



Session.bReferredConnected = true;]]></script>
          </scripts>
        </action>
        <action id="94" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=307 y=1150 ?>
          <!--ACK to ReferredToParty-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oReferredToParty.strCallId</call-id>
            <cseq >oReferredToParty.strCSeq</cseq>
            <from >oReferredToParty.strFrom</from>
            <request-uri >oReferredToParty.strRemoteUri</request-uri>
            <route >oReferredToParty.strRoute</route>
            <timestamp >strTimestamp</timestamp>
            <to >oReferredToParty.strTo</to>
          </sip-ack>
          <results >
            <result name="Default" link="95" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[js_calculate_uri_and_route( true, "SIP/2.0", 

	Session.strFrom.toString(), 

	Session.strContact.toString(), 

	Session.strRecordRoute.toString(), 

	Session.oReferredToParty.strRemoteUri, 

	Session.oReferredToParty.strRoute ) ;



Session.bConnected = true;



if ( Session.bHandlingAttendedReInvite ) {

	Session.bReferredConnected = true;

}



]]></script>
          </scripts>
        </action>
        <action id="95" plug-in="Pactolus.Branch.1" ><?xtml-editor x=110 y=1328 ?>
          <results >
            <result name="Default" link="81" stubbed="0"/>
            <result name="all connected" link="66" stubbed="1" >bReferredConnected == true

AND bConnected == true</result>
          </results>
        </action>
        <action id="96" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=2283 y=1458 ?>
          <!--failed to connect-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bConnected"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bConnected = false;]]></script>
          </scripts>
        </action>
        <action id="97" plug-in="Pactolus.Branch.1" ><?xtml-editor x=683 y=1437 ?>
          <results >
            <result name="Default" link="99" stubbed="0"/>
            <result name="TransferTo not connected" link="98" stubbed="0" >bConnected == false</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Ring No Answer Timeout. Attempt voicemail if applicable, otherwise, clean up and return failure.");]]></script>
          </scripts>
        </action>
        <action id="98" plug-in="Pactolus.SipCancel.1" ><?xtml-editor x=931 y=1413 ?>
          <!--CANCEL ReferredTo INVITE-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="4" handle-responses="1" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oReferredToParty.strCallId</call-id>
            <contact >strLocalUri</contact>
            <cseq >oReferredToParty.strCSeq</cseq>
            <from >oReferredToParty.strFrom</from>
            <record-route >oReferredToParty.strRecordRoute</record-route>
            <request-uri >oReferredToParty.strRemoteUri</request-uri>
            <route >oReferredToParty.strRoute</route>
            <to >oReferredToParty.strTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="99" stubbed="0"/>
            <result name="Success"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="99" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1185 y=1439 ?>
          <results >
            <result name="Default" link="102" stubbed="0"/>
            <result name="CANCEL to ReferredParty" link="100" stubbed="0" >bInvitedReferred == true

AND bGotFinalResponseFromReferred == false</result>
            <result name="Forward to VM" link="70" stubbed="0" >bForwardedToVM == false</result>
          </results>
        </action>
        <action id="100" plug-in="Pactolus.SipCancel.1" ><?xtml-editor x=1420 y=1560 ?>
          <!--CANCEL Referred INVITE-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="4" handle-responses="1" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oReferredParty.strCallId</call-id>
            <contact >strLocalUri</contact>
            <cseq >oReferredParty.strCSeq</cseq>
            <from >strReferredPartyFrom</from>
            <record-route >oReferredParty.strRecordRoute</record-route>
            <request-uri >oReferredParty.strRemoteUri</request-uri>
            <route >oReferredParty.strRoute</route>
            <to >strReferredPartyTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="101" stubbed="1"/>
            <result name="Success"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="101" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1704 y=1469 ?>
          <results >
            <result name="Default" link="96" stubbed="0"/>
            <result name="BYE to Referrer" link="103" stubbed="0" >oReferringParty.bConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Need to send BYE to ReferringParty: " + Session.oReferringParty.bConnected);]]></script>
          </scripts>
        </action>
        <action id="102" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=1418 y=1304 ?>
          <!--BYE to ReferredParty-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="4" handle-responses="1" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oReferredParty.strCallId</call-id>
            <contact >strLocalUri</contact>
            <cseq >oReferredParty.strCSeq</cseq>
            <from >strReferredPartyFrom</from>
            <record-route >oReferredParty.strRecordRoute</record-route>
            <request-uri >oReferredParty.strRemoteUri</request-uri>
            <route >oReferredParty.strRoute</route>
            <to >strReferredPartyTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="101" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[Session.oReferredParty.bConnected = false;]]></script>
          </scripts>
        </action>
        <action id="103" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=1995 y=1409 ?>
          <!--BYE to ReferringParty-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="4" handle-responses="1" increment-cseq-first="1" increment-cseq-last="0" >
            <call-id >oReferringParty.strCallId</call-id>
            <contact >strLocalUri</contact>
            <cseq >oReferringParty.strCSeq</cseq>
            <from >strReferringPartyFrom</from>
            <record-route >oReferringParty.strRecordRoute</record-route>
            <request-uri >oReferringParty.strRemoteUri</request-uri>
            <route >oReferringParty.strRoute</route>
            <to >strReferringPartyTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="96" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[Session.oReferringParty.bConnected = false;]]></script>
          </scripts>
        </action>
        <action id="105" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=721 y=813 ?>
          <!--ACK to ReferredToParty

non-success-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oReferredToParty.strCallId</call-id>
            <cseq >oReferredToParty.strCSeq</cseq>
            <from >strFrom</from>
            <request-uri >oReferredToParty.strRemoteUri</request-uri>
            <route >oReferredToParty.strRoute</route>
            <timestamp >strTimestamp</timestamp>
            <to >strTo</to>
            <via >strMyVia</via>
          </sip-ack>
          <results >
            <result name="Default" link="70" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[

]]></script>
          </scripts>
        </action>
        <action id="106" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1497 y=663 ?>
          <results >
            <result name="Default" link="102" stubbed="0"/>
            <result name="success" link="94" stubbed="0" >nFinalStatus == 200</result>
          </results>
        </action>
        <action id="108" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=684 y=973 ?>
          <!--proxy responses back-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oSipMsg.strCallId</call-id>
            <contact >strLocalUri</contact>
            <content >strContent</content>
            <content-disposition >strContentDisposition</content-disposition>
            <content-type >strContentType</content-type>
            <cseq >oSipMsg.strCSeq</cseq>
            <from >oSipMsg.strFrom</from>
            <status >strStatus</status>
            <supported >strSupported</supported>
            <to >oSipMsg.strTo</to>
            <via >oSipMsg.strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="81" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if ( -1 == Session.oSipMsg.strTo.toString().indexOf("tag=") && 

	-1 != Session.strTo.indexOf("tag=")){

	var response_to = new SipTo(Session.strTo);

//	var SipMsg_to = new SipTo(Session.oSipMsg.strTo.toString());
//
//	SipMsg_to.tag = response_to.tag;
//
//	Session.oSipMsg.strTo = SipMsg_to.encode();

    Session.oSipMsg.strTo += ";tag=";
    Session.oSipMsg.strTo += response_to.tag.toString();

}]]></script>
          </scripts>
        </action>
        <action id="109" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=967 y=226 ?>
          <!--psAPIAuthorizeDestination - Referrer-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;psAPIAuthorizeDestination&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >oAPI</parameter>
            <parameter >oRate</parameter>
            <parameter >oSub</parameter>
            <parameter >oReferredToParty</parameter>
            <parameter >oReferringParty</parameter>
          </function>
          <results >
            <result name="Default" link="61" stubbed="0"/>
            <result name="destination restricted" link="74" stubbed="0" >nReturnCode == -3</result>
            <result name="insufficient digits" link="74" stubbed="0" >nReturnCode == -4</result>
            <result name="no destination given" link="74" stubbed="0" >nReturnCode == -5</result>
            <result name="time avail &lt; min threshold" link="74" stubbed="0" >nReturnCode == -6</result>
            <result name="no subrate - block call" link="74" stubbed="0" >nReturnCode == -7</result>
            <result name="dest not in phone list" link="74" stubbed="0" >nReturnCode == -8</result>
            <result name="curr balance &lt; min balance" link="74" stubbed="0" >oAPI.fAccountBalance &lt; oAPI.fMinPrepaidBalance

AND nReturnCode == 0</result>
            <result name="bRejectCall" link="74" stubbed="0" >bRejectCall == true</result>
            <result name="out of calling plan" link="74" stubbed="0" >nReturnCode == -11</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oAPI.strDestinationNumber = Session.oAPI_tmp.strDestReceived;

Session.oReferringParty.lTimeAnswered = Server.getUTCTime() ;



]]></script>
            <script language="javascript" timing="middle" ><![CDATA[Server.logInfo("oAPI.strAllowZeroCostFlag: " + Session.oAPI.strAllowZeroCostFlag);

Server.logInfo("oAPI.fMinPrepaidBalance: " + Session.oAPI.fMinPrepaidBalance);

Server.logInfo("oSub.fPrepaidBalance: " + Session.oSub.fPrepaidBalance);



if ("T" == Session.oAPI.bRateCalls && 

	"T" != Session.oAPI.strAllowZeroCostFlag &&

	Session.oSub.fPrepaidBalance <= Session.oAPI.fMinPrepaidBalance) {

		Session.bRejectCall = true;

		Server.logInfo("Zero cost calls not allowed");

}]]></script>
            <script language="javascript" timing="last" ><![CDATA[

]]></script>
          </scripts>
        </action>
        <action id="110" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=745 y=230 ?>
          <!--psAPIAuthorizeDestination - C-leg-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;psAPIAuthorizeDestination&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >oAPI_tmp</parameter>
            <parameter >oRate_tmp</parameter>
            <parameter >oSub_tmp</parameter>
            <parameter >oReferredToParty</parameter>
            <parameter >oReferringParty</parameter>
          </function>
          <results >
            <result name="Default" link="109" stubbed="0"/>
            <result name="destination restricted" link="74" stubbed="0" >nReturnCode == -3</result>
            <result name="insufficient digits" link="74" stubbed="0" >nReturnCode == -4</result>
            <result name="no destination given" link="74" stubbed="0" >nReturnCode == -5</result>
            <result name="time avail &lt; min threshold" link="74" stubbed="0" >nReturnCode == -6</result>
            <result name="no subrate - block call" link="74" stubbed="0" >nReturnCode == -7</result>
            <result name="dest not in phone list" link="74" stubbed="0" >nReturnCode == -8</result>
            <result name="success - unlimited time" >nReturnCode == 1</result>
            <result name="no rates" >nReturnCode == -9</result>
            <result name="curr balance &lt; min balance" link="74" stubbed="0" >oAPI_tmp.fAccountBalance &lt; oAPI_tmp.fMinPrepaidBalance

AND nReturnCode == 0</result>
            <result name="out of calling plan" link="74" stubbed="0" >nReturnCode == -11</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oAPI_tmp.strDestinationNumber = Session.oAPI_tmp.strDestReceived;

Session.oAPI_tmp.strStrippedOrigNumber = Session.oAPI_tmp.strAniReceived ;

Session.oAPI_tmp.strBroadbandCallingFlag = "T";

Session.oReferringParty.lTimeAnswered = Server.getUTCTime() ;



Session.oSub_tmp.nPrimaryOfferingId = Session.oAccessLine_tmp.oSub.nPrimaryOfferingId;

Session.oSub_tmp.nServiceId = Session.oService.nSvcId ;

Session.oSub_tmp.lSubscriberId = Session.oAccessLine_tmp.oSub.lSubscriberId ;

Session.oSub_tmp.fPrepaidBalance = Session.oAPI_tmp.fAccountBalance ;

Session.oSub_tmp.nExpirationType = Session.oAccessLine_tmp.oSub.nExpirationType ;

Session.oSub_tmp.nCurrencyId = Session.oAccessLine_tmp.oSub.nCurrencyId ;

Session.oSub_tmp.strFirstCallFlag = Session.oAccessLine_tmp.oSub.strFirstCallFlag ;

Session.oSub_tmp.nRoundingThreshold =  Session.oAccessLine_tmp.oSub.nRoundingThresholdSeconds ;

Session.oSub_tmp.nNumExpDays = Session.oAccessLine_tmp.oSub.nNumExpDays ;

Session.oSub_tmp.fCallMarkupPercent = Session.oAccessLine_tmp.oSub.fCallMarkupPercent ;

Session.oSub_tmp.nSecondsRemaining = Session.oService.nMaxCallDuration ;









]]></script>
            <script language="javascript" timing="last" ><![CDATA[Session.oCLegAPI.oRate = Session.oRate_tmp;



/*	DH: the billing_session_id and reserved_balance_id come back in the 

	subscriber object so we need to save them for later procCallCompletion

*/

Session.oCLegAPI.oSub = Session.oSub_tmp; 



]]></script>
          </scripts>
        </action>
        <action id="111" plug-in="Pactolus.Branch.1" ><?xtml-editor x=566 y=307 ?>
          <results >
            <result name="Default" link="109" stubbed="0"/>
            <result name="Rated - c-leg" link="110" stubbed="0" >oAPI_tmp.strRateCallsFlag == "T"</result>
          </results>
        </action>
        <action id="112" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=78 y=329 ?>
          <!--getDestCallingInfo-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;VoipGetDestCallingInfo&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >oAPI_tmp</parameter>
            <parameter >oAccessLine</parameter>
            <parameter >oReferredToParty</parameter>
            <parameter >oService.nSvcId</parameter>
            <parameter >oAPI.nDialingPlanId</parameter>
          </function>
          <results >
            <result name="Default" link="113" stubbed="0"/>
            <result name="restricted dest" link="74" stubbed="1" >nReturnCode == -6</result>
            <result name="bRejectCall" link="74" stubbed="1" >bRejectCall == true</result>
            <result name="Transfer to VM" link="61" stubbed="1" >oAPI_tmp.strCallType == s_CT_VM_DEPOSIT</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if( 0 == Session.oAPI.nDialingPlanId ) {

	Session.oAPI.nDialingPlanId = 1 ;

}]]></script>
            <script language="javascript" timing="middle" ><![CDATA[if ( -2 == Session.nReturnCode ) {

	Session.bRejectCall = true;

	Server.logError("Target transfer phone number not found. Rejecting transfer.");

}

else if ( Session.oAPI_tmp.strCallType == Session.s_CT_VM_DEPOSIT && 0 == Session.oAPI_tmp.lVoiceMailId ) {

	Session.bRejectCall = true;

	Server.logError("Direct transfer to voice mail being rejected. No voice mail id was returned.");

}]]></script>
            <script language="javascript" timing="last" ><![CDATA[if ( Session.bAuthTermSuccess || Session.oAPI_tmp.strCallType == Session.s_CT_VM_DEPOSIT ) { 

		//we are only going to try the first route for transfers to another sub. 

		//If there is a value for the Contat parameter, use that.

		if ( null != Session.oAPI_tmp.oRoute[0].strContact && 0 < Session.oAPI_tmp.oRoute[0].strContact.length ) {

			js_calculate_uri_and_route( true, "SIP/2.0", Session.oReferredParty.strTo.toString(), 

				Session.oAPI_tmp.oRoute[0].strContact.toString(), 

				Session.oAPI_tmp.oRoute[0].strRecordRoute.toString(), 

				Session.oReferredToParty.strRemoteUri, 

				Session.oReferredToParty.strRoute ) ;

			Server.logInfo("ReferredTo Request-URI: " + Session.oReferredToParty.strRemoteUri ) ;

			Server.logInfo("ReferredTo Route: " + Session.oReferredToParty.strRoute ) ;

		

			//if we are currently connected to an extension and not relaying rtp, then only allow transfer to another extension

			if( !Session.oAPI.bRelayMedia ) {

				Server.logInfo("Only allow intra-site call transfer in enterprise broadband when local media routing is in affect") ;

				Session.oReferredToParty.strRemoteUri += ";route_sip_only" ;

			}

	

		}	

		//otherwise, use the phone number parameter if we have it

		else if ( 0 < Session.oAPI_tmp.oRoute[0].strPhoneNumber.length ) {

			var bOnNet = ("T" == Session.oAPI_tmp.oRoute[0].strDestOnNet ? true : false );

			Session.oReferredToParty.strOutdialDestNbr = 

				js_translate_destination_broadband( Session.strCarrierName, Session.oAPI_tmp.oRoute[0].strPhoneNumber,

					Session.oReferredToParty.strDestCountryId, bOnNet, Session.oAPI.strAniReceived ) ;

			Server.logInfo("Translated destination number : " + Session.oReferredToParty.strOutdialDestNbr);

			

			if(Session.oAPI.strPrimaryRouteCode != "" && Session.oAPI.strPrimaryRouteCode != undefined) {

				Session.oReferredToParty.strOutdialDestNbr = Session.oAPI.strPrimaryRouteCode + "" + Session.oReferredToParty.strOutdialDestNbr;

			}			

			Server.logInfo("Translated destination number with route code: " + Session.oReferredToParty.strOutdialDestNbr);



			Session.oReferredToParty.strRemoteUri =  "sip:" + Session.oReferredToParty.strOutdialDestNbr + "@" + Session.strPrimarySoftswitch ;

			Session.oReferredToParty.strRemoteUri += " SIP/2.0";

	

		}	

		else if (Session.oAPI_tmp.bForwardToVoicemail) {

			Session.oReferredToParty.strRemoteUri = "sip:" + Session.oReferredToParty.strOutdialDestNbr + "@" + Session.strNIUAddress;

			Session.oReferredToParty.strRemoteUri += ";target=pcs_vmail_deposit";

			Session.oReferredToParty.strRemoteUri += ";vmail_account_id=";

			Session.oReferredToParty.strRemoteUri += Session.oAPI_tmp.lVoiceMailId;

			Session.oReferredToParty.strRemoteUri += " SIP/2.0";

			Server.logInfo("No routes found for this phone. Forward directly to voicemail");

		}

		else if (Session.oAPI_tmp.strCallType == Session.s_CT_VM_DEPOSIT && !Session.bRejectCall){

			Session.oReferredToParty.strRemoteUri = "sip:" + Session.oReferredToParty.strOutdialDestNbr + "@" + Session.strNIUAddress;

			Session.oReferredToParty.strRemoteUri += ";target=pcs_vmail_deposit";

			Session.oReferredToParty.strRemoteUri += ";vmail_account_id=";

			Session.oReferredToParty.strRemoteUri += Session.oAPI_tmp.lVoiceMailId;

			Session.oReferredToParty.strRemoteUri += " SIP/2.0";

			Server.logInfo("Transfer is direct to voice mail account: " + Session.oAPI_tmp.lVoiceMailId);

			Session.oAPI_tmp.oRoute[0].strDestOnNet = Session.s_ON_NET;

			//do we need to call auth Term again now with the destination phone number (feature code stripped)

			//Without that we don't have the target sub's details, but are they really necessary for vm deposit CDR???

		}

	

		Session.oReferredToParty.strIntlDestFlag = Session.oAPI_tmp.oRoute[0].strDestIntl ;

		Session.oReferredToParty.strWiretapFlag = Session.oAccessLine_tmp.strWiretapFlag ;

		Session.oReferredToParty.strWiretapDest = Session.oAccessLine_tmp.strWiretapDest ;

		Session.oReferredToParty.strDestRouteType = ( "T" == Session.oAPI_tmp.oRoute[0].strDestOnNet ? Session.s_ON_NET : Session.s_OFF_NET) ;

		Server.logInfo("C leg dest route type: " + Session.oReferredToParty.strDestRouteType);

		Session.oReferredToParty.strCallType = Session.oAPI_tmp.strCallType ;

		Session.oReferredToParty.nDestCountryId = Session.oAPI_tmp.nDestCountryId ;

		Session.oReferredToParty.strDestCallingCode = Session.oAPI_tmp.strDestCallingCode ;

		Session.oReferredToParty.strDestAreaCode = Session.oAPI_tmp.strDestAreaCode ;

		Session.oAPI_tmp.lServiceProviderId = Session.oAccessLine_tmp.oSub.lSPId ;

		Session.oAccessLine_tmp.oSub.nServiceId = Session.oService.nSvcId ;

		Session.oAccessLine_tmp.oSub.fPrepaidBalance = Session.oAPI_tmp.fAccountBalance ;

		Session.oAPI_tmp.strStrippedOrigNumber = Session.oAPI_tmp.strAniReceived; 

		Session.oAPI_tmp.lPhoneNumberId = Session.oAccessLine_tmp.lPhoneNumberId ;

		Session.oAPI_tmp.lWiretapOrderId = Session.oAccessLine_tmp.lWiretapOrderId ;

		Session.oAPI_tmp.strDestinationNumber = Session.oAPI_tmp.strDestReceived ;



		if ( !Session.oAPI_tmp.bPrepaid ) {

			Session.oAPI_tmp.strPostPaidFlag = "T" ;

		}

		else {

			Session.oAPI_tmp.strPostPaidFlag = "F";

		}	

		if (Session.oAPI_tmp.bRateCalls ) {

			Session.oAPI_tmp.strRateCallsFlag = "T";

		}

		else {

			Session.oAPI_tmp.strRateCallsFlag= "F";

		}

		if (Session.oAPI_tmp.bCreditLimit) {

			Session.oAPI_tmp.strCreditLimitFlag = "T";

		}

		else{

			Session.oAPI_tmp.strCreditLimitFlag = "F";

		}

		Session.oCLegAPI.oSub.nSecondsRemaining = Session.oService.nMaxCallDuration ;

	}

else if ( Session.bRejectCall ) {

		// if we did not get a successful authorization of the phone number, reject the call with the appropriate status

		Session.oReferredToParty.strStatus = Session.strResponse ;

		if ( 0 == Session.strResponse.length ) {

			Session.oReferredToParty.strStatus = "503 Service Unavailable";

		}

}

else {

		//phone number not found. treat as off-net

		Session.oReferredToParty.strWiretapFlag = "F" ;

		Session.oReferredToParty.strWiretapDest = "" ;

		Session.oReferredToParty.strDestRouteType = "2" ; //off-net

		if ( 0 == Session.oReferredToParty.strDestCountryId ) {

			Session.oReferredToParty.strDestCountryId = 1; //default to North America if no value was returned.

		}

		Session.oReferredToParty.strOutdialDestNbr = 

			js_translate_destination_broadband( Session.strCarrierName, Session.oReferredToParty.strOutdialDestNbr,

				Session.oReferredToParty.strDestCountryId, false, Session.oAPI.strAniReceived ) ;

			Server.logInfo("Translated off-net destination: " + Session.oReferredToParty.strOutdialDestNbr);



		if(Session.oAPI.strPrimaryRouteCode != "" && Session.oAPI.strPrimaryRouteCode != undefined) {

			Session.oReferredToParty.strOutdialDestNbr = Session.oAPI.strPrimaryRouteCode + "" + Session.oReferredToParty.strOutdialDestNbr;

		}			



		Server.logInfo("Translated destination number with route code: " + Session.oReferredToParty.strOutdialDestNbr);

	

		Session.oReferredToParty.strRemoteUri =  "sip:";

		Session.oReferredToParty.strRemoteUri += Session.oReferredToParty.strOutdialDestNbr + "@" ;

		Session.oReferredToParty.strRemoteUri += Session.strPrimarySoftswitch ;

		Session.oReferredToParty.strTo = "<" + Session.oReferredToParty.strRemoteUri + ">";

		Session.oReferredToParty.strRemoteUri += " SIP/2.0";

}

]]></script>
          </scripts>
        </action>
        <action id="113" plug-in="Pactolus.Branch.1" ><?xtml-editor x=354 y=297 ?>
          <!--Skip authentication for calls to extension numbers-->
          <results >
            <result name="Default" link="111" stubbed="0"/>
            <result name="skipAuth" link="61" stubbed="0" >oAPI_tmp.strCallType == "17"</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if ( Session.oAPI_tmp.strCallType == "17" ) {

	Server.logInfo("Skipping Authentication for Internal Extension");

}]]></script>
          </scripts>
        </action>
        <action id="115" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=1302 y=105 ?>
          <!--VoipFindSessionIdByCallId-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;VoipFindSessionIdByCallId&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >oAPI.strPlatformSessionId</parameter>
            <parameter >oAPI.strProcDBName</parameter>
            <parameter >strReplacedCallId</parameter>
            <parameter >strReplacedFromTag</parameter>
            <parameter >strReplacedToTag</parameter>
            <parameter >strReferredToSession</parameter>
            <parameter >strReferredToIpAddress</parameter>
          </function>
          <results >
            <result name="Default" link="74" stubbed="0"/>
            <result name="success" link="61" stubbed="0" >nReturnCode == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[/* we need to get the callid and the from and to tags out of the Refer-To header,

	and locate the Server that is handling that call so we can send a Re-INVITE with

	a Replaces header to that Server

*/



var i = Session.oSipMsg.strReferTo.toString().indexOf("?Replaces=");

var a = i + 10 ;

var b = Session.oSipMsg.strReferTo.toString().length - 1 ;

Session.oReferredToParty.strTo = Session.oSipMsg.strReferTo.toString().substring(0, i);

Session.oReferredToParty.strTo += ">" ;

		

//the Replaces info in the ReferTo header comes in the format:

//callid%3Bto-tag%3Dxxxx%3Bfrom-tag%3Dxxxx

//the call id will always be the first parameter, but the from and to tag can be in either order. 

//The Replaces header needs to be translated into the format of:

//callid;from-tag=xxxx;to-tag=xxxx

//again, no requirement on the order of the from and to tags. 

Session.oReferredToParty.strReplaces = Session.oSipMsg.strReferTo.toString().substring(a, b) ;

var atSign = /%40/g;

var dash = /%2D/g;

var semiColon = /%3B/g;

var equalSign = /%3D/g;

var period = /%2E/g;

Session.oReferredToParty.strReplaces = Session.oReferredToParty.strReplaces.toString().replace(atSign, "@");

Session.oReferredToParty.strReplaces = Session.oReferredToParty.strReplaces.toString().replace(semiColon, ";");

Session.oReferredToParty.strReplaces = Session.oReferredToParty.strReplaces.toString().replace(equalSign, "=");

Session.oReferredToParty.strReplaces = Session.oReferredToParty.strReplaces.toString().replace(dash, "-");

Session.oReferredToParty.strReplaces = Session.oReferredToParty.strReplaces.toString().replace(period, ".");

Server.logInfo("oReferredToParty.strReplaces: " + Session.oReferredToParty.strReplaces);

		

Session.oAPI_tmp.nRingNoAnswerTimeout = 120 ;



var replaces = new String( Session.oReferredToParty.strReplaces ) ;

var nPos = replaces.indexOf(";") ;

Session.strReplacedCallId = replaces.substr(0, nPos) ;



nPos = replaces.indexOf("from-tag=") ;

if( -1 != nPos ) {

	replaces = replaces.substr(nPos+9) ;

	nPos = replaces.indexOf(";") ;

	if( -1 != nPos ) {

		Session.strReplacedFromTag = replaces.substr(0, nPos) ;

	}

	else {

		Session.strReplacedFromTag = replaces ;

	}

}

Server.logInfo("callid is: " + Session.strReplacedCallId ) ;

Server.logInfo("from-tag is: " + Session.strReplacedFromTag ) ;



/* Note: leave to-tag empty for the lookup, because at the time of insertion there wouldn't have been a to tag */

]]></script>
            <script language="javascript" timing="last" ><![CDATA[if( 0 == Session.nReturnCode ) {

	Server.logInfo("Successfully retrieved session handling refered-to call; session id is " + Session.strReferredToSession + " which is on server at address " + Session.strReferredToIpAddress ) ;

	

	Session.oReferredToParty.strRequestUri = "sip:" ;  

	Session.oReferredToParty.strRequestUri += Session.strReferredToIpAddress ;

	Session.oReferredToParty.strRequestUri += " SIP/2.0" ;

		

	Session.oReferredToParty.strRemoteUri = Session.oReferredToParty.strRequestUri;

	

}

else {

	Server.logError("Failure retrieving session: return code " + Session.nReturnCode ) ;

}]]></script>
          </scripts>
        </action>
      </actions>
    </function>
    <function name="bbtelPlayThresholdsPrompt" start="1" event="PlayThresholdsPrompt" returns="void" >
      <parameters >
        <parameter name="oCallLegA" type="object" pass="byref"/>
        <parameter name="oCallLegB" type="object" pass="byref"/>
        <parameter name="oMS" type="object" pass="byref"/>
        <parameter name="oAPI" type="object" pass="byref"/>
        <parameter name="nTimeRemaining" type="i4" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="f_nReturnCode" type="i4" >0</var>
        <var name="f_lTempLong1" type="i8" >0</var>
        <var name="f_lTempLong2" type="i8" >0</var>
        <var name="lTemp1" type="i8" >0</var>
        <var name="lTemp2" type="i8" >0</var>
        <var name="strStatus" type="string" ></var>
        <var name="nStatus" type="i4" >0</var>
        <var name="nReturn" type="i4" >0</var>
        <var name="strTo" type="string" ></var>
        <var name="strFrom" type="string" ></var>
        <var name="strToB" type="string" ></var>
        <var name="strFromB" type="string" ></var>
      </local-vars>
      <actions >
        <action id="1" plug-in="Pactolus.Hold.1" ><?xtml-editor x=12 y=20 ?>
          <!--Put A on hold-->
          <cc-hold xmlns="urn:www.pactolus.com:xtml:sip-cc" to="strTo" from="strFrom" ingress-gateway="oCallLegA.strRemoteUri" cseq="oCallLegA.strCSeq" call-id="oCallLegA.strCallId" sdp="oCallLegB.strRemoteSdp" status="nStatus" route="oCallLegA.strRoute" record-route="" contact="oCallLegA.strContact"/>
          <results >
            <result name="Default" link="8" stubbed="1"/>
            <result name="Success" link="6" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if( Session.oCallLegA.bUac ) {

	Session.strTo = Session.oCallLegA.strFrom ;

	Session.strFrom = Session.oCallLegA.strTo ;

}

else {

	Session.strTo = Session.oCallLegA.strTo ;

	Session.strFrom = Session.oCallLegA.strFrom ;

}]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=29 y=352 ?>
          <!--517: You have ...-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="oMS.strConnectionId" endpoint="oMS.strEndPoint" callid="oMS.strCallId" repeat="1" timeout="60" ms-type="oMS.strType" returns="" start-play="1" interrupt="0" return-immediate="0" digit-map="" language="oAPI.strLanguage" digits="" retry-count="" clear-digits="0" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="silence" >.5</audio>
            <audio type="number" >nTimeRemaining</audio>
            <audio type="index" >46</audio>
          </play>
          <results >
            <result name="Default" link="5" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="3" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=449 y=110 ?>
          <!--outdial from MS-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;MSOutdialParty&quot;" return="f_nReturnCode" external-function="1" library="lib_mediaserver.xml" >
            <parameter >oCallLegA</parameter>
            <parameter >oMS</parameter>
            <parameter >oCallLegA.strContact</parameter>
          </function>
          <results >
            <result name="Default" link="8" stubbed="0"/>
            <result name="success" link="2" stubbed="0" >f_nReturnCode == s_RET_SUCCESS</result>
            <result name="caller hung up" link="4" stubbed="0" >f_nReturnCode == s_RET_CALLER_HUNGUP</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oCallLegA.strRequestUri = Session.oCallLegA.strRemoteUri;]]></script>
          </scripts>
        </action>
        <action id="4" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=702 y=192 ?>
          <!--Hang Up B-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;HangUpParty&quot;" return="f_nReturnCode" external-function="1" library="lib_callcontrol.xml" >
            <parameter >oCallLegB</parameter>
            <parameter >oCallLegB.strContact</parameter>
          </function>
          <results >
            <result name="Default" link="7" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[1].nTerminationReason = Session.oAPI.nCallTerminationReason = Session.s_TR_CALLING_PARTY_HANGUP ;

Server.logInfo("Caller hung up") ;

]]></script>
          </scripts>
        </action>
        <action id="5" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=245 y=422 ?>
          <!--delete MS connection-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;DeleteMSConnection&quot;" return="" external-function="1" library="lib_mediaserver.xml" >
            <parameter >oMS</parameter>
          </function>
          <results >
            <result name="Default" link="10" stubbed="0"/>
          </results>
        </action>
        <action id="6" plug-in="Pactolus.Hold.1" ><?xtml-editor x=221 y=76 ?>
          <!--Put B on hold-->
          <cc-hold xmlns="urn:www.pactolus.com:xtml:sip-cc" to="strToB" from="strFromB" ingress-gateway="oCallLegB.strRemoteUri" cseq="oCallLegB.strCSeq" call-id="oCallLegB.strCallId" sdp="oCallLegA.strRemoteSdp" status="nStatus" route="oCallLegB.strRoute" record-route="" contact="oCallLegB.strContact"/>
          <results >
            <result name="Default" link="8" stubbed="1"/>
            <result name="Success" link="3" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if( Session.oCallLegB.bUac ) {

	Session.strToB = Session.oCallLegB.strFrom ;

	Session.strFromB = Session.oCallLegB.strTo ;

}

else {

	Session.strToB = Session.oCallLegB.strTo ;

	Session.strFromB = Session.oCallLegB.strFrom ;

}]]></script>
          </scripts>
        </action>
        <action id="7" plug-in="Standard.EndSession.1" ><?xtml-editor x=869 y=115 ?>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.g_oCallLegs[0].nState = Session.g_oCallLegs[1].nState = Session.s_LEG_STATE_NONE;]]></script>
          </scripts>
        </action>
        <action id="8" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=677 y=29 ?>
          <!--Hang Up both A and B-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;Hangup2Parties&quot;" return="nReturn" external-function="1" library="lib_callcontrol.xml" >
            <parameter >oCallLegA</parameter>
            <parameter >oCallLegB</parameter>
            <parameter >oCallLegA.strContact</parameter>
          </function>
          <results >
            <result name="Default" link="7" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oCallLegB.nTerminationReason = Session.oAPI.nCallTerminationReason = Session.s_TR_REINVITE_FAILED ;

//Server.logInfo("Failure preparing A and B legs to play threshold prompts") ;

]]></script>
          </scripts>
        </action>
        <action id="9" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=720 y=415 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oCallLegB.nState = Session.s_LEG_STATE_CONNECTED ;]]></script>
          </scripts>
        </action>
        <action id="10" plug-in="Pactolus.Outdial.1" ><?xtml-editor x=486 y=424 ?>
          <!--reconnect caller and called parties-->
          <Outdial xmlns="urn:www.pactolus.com:xtml:sip-cc" calling-number="oCallLegA.strCallingNumber" called-number="oCallLegB.strCalledNumber" preferred-carrier="" codec="-1" reliable-provisional-responses="1" timeout="30" returns="f_nReturnCode" ms-type="" calling-connect-type="0" calling-capability="0" from="strFrom" via="" ingress-gateway="oCallLegA.strRemoteUri" session-timer-a="0" hold-a-first="0" interrupt-on-long-pound="0" session-timer-value-a="" telephone-events="0" rtp-request-a="0" rtp-endpoint-a="" route-callingparty="oCallLegA.strRoute" record-route-callingparty="oCallLegA.strRecordRoute" contact-callingparty="oCallLegA.strContact" egress-gateway="oCallLegB.strRemoteUri" sdp-b="oCallLegB.strContent" callid-b="oCallLegB.strCallId" cseq-b="oCallLegB.strCSeq" sip-status="strStatus" to-b="strToB" from-b="strFromB" session-timer-b="0" session-timer-value-b="" backup-ss="" route="oCallLegB.strRoute" record-route="oCallLegB.strRecordRoute" contact="oCallLegB.strContact" rtp-request-b="0" rtp-endpoint-b="" refresher="" remote-party-id="" play-ringback="0" language="" ringback-prompt="" capability="1" ringback-codec="-1" packetization-period="" calling-packetization="" connection-id="" mgcp-call-id="" ms-sdp="" endpoint="" to="strTo" callid-a="oCallLegA.strCallId" cseq-a="oCallLegA.strCSeq" sdp-a="oCallLegA.strContent"/>
          <results >
            <result name="Default" link="8" stubbed="1"/>
            <result name="Success" link="9" stubbed="0"/>
            <result name="Ring no answer"/>
            <result name="Busy"/>
            <result name="Caller DTMF interrupt"/>
            <result name="Called party error"/>
            <result name="Calling party error"/>
            <result name="Other error"/>
            <result name="Resource unavailable"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if( Session.oCallLegB.bUac ) {

	Session.strToB = Session.oCallLegB.strTo ;

	Session.strFromB = Session.oCallLegB.strFrom ;

}

else {

	Session.strToB = Session.oCallLegB.strFrom ;

	Session.strFromB = Session.oCallLegB.strTo ;

}



Session.oCallLegB.bCurrentlyDialing = true;

Session.oCallLegB.nState = Session.s_LEG_STATE_DIALING ;

]]></script>
            <script language="javascript" timing="last" ><![CDATA[Session.oCallLegB.bCurrentlyDialing = false;

]]></script>
          </scripts>
        </action>
      </actions>
    </function>
    <function name="bbtelSetTimers" start="5" event="" returns="void" >
      <parameters >
        <parameter name="oTimer" type="object" pass="byref"/>
        <parameter name="nMaxCallDuration" type="i4" pass="byref"/>
        <parameter name="nWarningThreshold1" type="i4" pass="byref"/>
        <parameter name="nWarningThreshold2" type="i4" pass="byref"/>
        <parameter name="nWarningThreshold3" type="i4" pass="byref"/>
        <parameter name="nReservationTimer" type="i4" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="lSeconds" type="i8" >0</var>
      </local-vars>
      <actions >
        <action id="5" plug-in="Pactolus.Branch.1" ><?xtml-editor x=27 y=57 ?>
          <results >
            <result name="Default" link="7" stubbed="0"/>
            <result name="threshold timer 1?" link="6" stubbed="0" >nWarningThreshold1 &gt; 0

AND nWarningThreshold1 &lt; nMaxCallDuration</result>
            <result name="no timers" link="3" stubbed="0" >nMaxCallDuration == 0

AND nReservationTimer == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if (0 == Session.nMaxCallDuration && 0 == Session.nReservationTimer)

{

	Server.logInfo("Not setting threshold timers. No max call duration");

}]]></script>
          </scripts>
        </action>
        <action id="3" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=760 y=25 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
        </action>
        <action id="4" plug-in="Standard.Timer.1" ><?xtml-editor x=619 y=145 ?>
          <!--Set call timer-->
          <timer xmlns="urn:www.pactolus.com:xtml:application" start="1" id="oTimer.lMaxCallDuration" duration="nMaxCallDuration"/>
          <results >
            <result name="Default" link="11" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Setting max call timer to: " + Session.nMaxCallDuration ) ;]]></script>
          </scripts>
        </action>
        <action id="6" plug-in="Standard.Timer.1" ><?xtml-editor x=67 y=393 ?>
          <!--Set threshold timer 1-->
          <timer xmlns="urn:www.pactolus.com:xtml:application" start="1" id="oTimer.lThresholdTimer1" duration="lSeconds"/>
          <results >
            <result name="Default" link="7" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.lSeconds = Session.nMaxCallDuration - Session.nWarningThreshold1  ;

Server.logInfo("Setting threshold timer 1 to: " + Session.lSeconds + ", which is " + Session.nWarningThreshold1 + " before the end of call") ;]]></script>
          </scripts>
        </action>
        <action id="7" plug-in="Pactolus.Branch.1" ><?xtml-editor x=330 y=247 ?>
          <results >
            <result name="Default" link="10" stubbed="0"/>
            <result name="threshold timer 2?" link="8" stubbed="0" >nWarningThreshold2 &gt; 0

AND nWarningThreshold2 &lt; nMaxCallDuration</result>
          </results>
        </action>
        <action id="8" plug-in="Standard.Timer.1" ><?xtml-editor x=342 y=392 ?>
          <!--Set threshold timer 2-->
          <timer xmlns="urn:www.pactolus.com:xtml:application" start="1" id="oTimer.lThresholdTimer2" duration="lSeconds"/>
          <results >
            <result name="Default" link="10" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.lSeconds = Session.nMaxCallDuration - Session.nWarningThreshold2  ;

Server.logInfo("Setting threshold timer 2 to: " + Session.lSeconds + ", which is " + Session.nWarningThreshold2 + " before the end of call") ;]]></script>
          </scripts>
        </action>
        <action id="9" plug-in="Standard.Timer.1" ><?xtml-editor x=774 y=406 ?>
          <!--Set threshold timer 3-->
          <timer xmlns="urn:www.pactolus.com:xtml:application" start="1" id="oTimer.lThresholdTimer3" duration="lSeconds"/>
          <results >
            <result name="Default" link="13" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.lSeconds = Session.nMaxCallDuration - Session.nWarningThreshold3  ;

Server.logInfo("Setting threshold timer 3 to: " + Session.lSeconds + ", which is " + Session.nWarningThreshold3 + " before the end of call") ;]]></script>
          </scripts>
        </action>
        <action id="10" plug-in="Pactolus.Branch.1" ><?xtml-editor x=573 y=282 ?>
          <results >
            <result name="Default" link="13" stubbed="0"/>
            <result name="threshold timer 3?" link="9" stubbed="0" >nWarningThreshold3 &gt; 0

AND nWarningThreshold3 &lt; nMaxCallDuration</result>
          </results>
        </action>
        <action id="11" plug-in="Pactolus.Branch.1" ><?xtml-editor x=821 y=153 ?>
          <results >
            <result name="Default" link="3" stubbed="0"/>
            <result name="reservation timer?" link="12" stubbed="0" >nReservationTimer &gt; 0

AND (nReservationTimer &lt; nMaxCallDuration

OR nMaxCallDuration == 0)</result>
          </results>
        </action>
        <action id="12" plug-in="Standard.Timer.1" ><?xtml-editor x=1061 y=103 ?>
          <!--Set reservation timer-->
          <timer xmlns="urn:www.pactolus.com:xtml:application" start="1" id="oTimer.lReservationTimer" duration="lSeconds"/>
          <results >
            <result name="Default" link="3" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.lSeconds = Session.nReservationTimer ;

Server.logInfo("Setting reservation timer to: " + Session.lSeconds) ;]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.logInfo("Reservation timer id is: " + Session.oTimer.lReservationTimer ) ;]]></script>
          </scripts>
        </action>
        <action id="13" plug-in="Pactolus.Branch.1" ><?xtml-editor x=780 y=286 ?>
          <results >
            <result name="Default" link="11" stubbed="0"/>
            <result name="max call timer?" link="4" stubbed="1" >nMaxCallDuration &gt; 0</result>
          </results>
        </action>
      </actions>
    </function>
    <function name="TransferFromIVR" start="52" event="" returns="boolean" >
      <parameters >
        <parameter name="oCallLegA" type="object" pass="byref"/>
        <parameter name="oCallLegB" type="object" pass="byref"/>
        <parameter name="strLocalUri" type="string" pass="byref"/>
        <parameter name="oAPI" type="object" pass="byref"/>
        <parameter name="oAccessLine" type="object" pass="byref"/>
        <parameter name="strCarrierName" type="string" pass="byref"/>
        <parameter name="strPrimarySoftswitch" type="string" pass="byref"/>
        <parameter name="strBackupSoftswitch" type="string" pass="byref"/>
        <parameter name="strNiuAddress" type="string" pass="byref"/>
        <parameter name="bInternalTransfer" type="boolean" pass="byref"/>
        <parameter name="bVoicemailTransfer" type="boolean" pass="byref"/>
        <parameter name="oService" type="object" pass="byref"/>
        <parameter name="oMS" type="object" pass="byref"/>
        <parameter name="oSimRingCallLegs" type="object" pass="byref"/>
        <parameter name="oSub" type="object" pass="byref"/>
        <parameter name="oRate" type="object" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="bAuthTermSuccess" type="boolean" >0</var>
        <var name="bCallFailed" type="boolean" >0</var>
        <var name="bFalse" type="boolean" >0</var>
        <var name="nReturnCode" type="i4" >0</var>
        <var name="bConnected" type="boolean" >0</var>
        <var name="bGotFinalResponse" type="boolean" >0</var>
        <var name="bGotAck" type="boolean" >0</var>
        <var name="bGotResponse" type="boolean" >0</var>
        <var name="bNewSdp" type="boolean" >0</var>
        <var name="bGotCaleaNotify" type="boolean" >0</var>
        <var name="bGotBye" type="boolean" >0</var>
        <var name="nFinalStatus" type="i4" >0</var>
        <var name="bALegHungUp" type="boolean" >0</var>
        <var name="bForwardedToVM" type="boolean" >0</var>
        <var name="strMyVia" type="string" ></var>
        <var name="strVia" type="string" ></var>
        <var name="strTo" type="string" ></var>
        <var name="strSdpToOfferBLeg" type="string" ></var>
        <var name="strContent" type="string" ></var>
        <var name="strSdpToOfferALeg" type="string" ></var>
        <var name="strContentType" type="string" >application/sdp</var>
        <var name="strAcceptLanguage" type="string" ></var>
        <var name="strAllow" type="string" ></var>
        <var name="strAllowEvents" type="string" ></var>
        <var name="strCallId" type="string" ></var>
        <var name="strContact" type="string" ></var>
        <var name="strContentDisposition" type="string" ></var>
        <var name="strCSeq" type="string" ></var>
        <var name="strFrom" type="string" ></var>
        <var name="strInReplyTo" type="string" ></var>
        <var name="strMinSE" type="string" ></var>
        <var name="strProxyAuthenticate" type="string" ></var>
        <var name="strRecordRoute" type="string" ></var>
        <var name="strRequire" type="string" ></var>
        <var name="strRetryAfter" type="string" ></var>
        <var name="strRSeq" type="string" ></var>
        <var name="strSessionExpires" type="string" ></var>
        <var name="strStatus" type="string" ></var>
        <var name="strSubscriptionState" type="string" ></var>
        <var name="strSupported" type="string" ></var>
        <var name="strTimestamp" type="string" ></var>
        <var name="strUnsupported" type="string" ></var>
        <var name="strWWWAuthenticate" type="string" ></var>
        <var name="strEvent" type="string" ></var>
        <var name="nTimeout" type="i4" >0</var>
        <var name="strRoute" type="string" ></var>
        <var name="strNotifyEvent" type="string" ></var>
        <var name="nIdx" type="i4" >0</var>
        <var name="nContactLength" type="i4" >0</var>
        <var name="bInviteAWithNewSDP" type="boolean" >0</var>
        <var name="nRouteIdx" type="i4" >0</var>
        <var name="bTryAgain" type="boolean" >0</var>
        <var name="nProxyId" type="i4" >0</var>
        <var name="oProxyList" type="object" ></var>
        <var name="bNoMoreRoutes" type="boolean" >0</var>
        <var name="bRejectCall" type="boolean" >0</var>
        <var name="strResponse" type="string" ></var>
        <var name="strRequestUri" type="string" ></var>
        <var name="sHuntSequential" type="i2" >0</var>
        <var name="sHuntSimultaneous" type="i2" >1</var>
        <var name="bAConnectedToB" type="boolean" >0</var>
        <var name="bPlayingRingback" type="boolean" >0</var>
        <var name="nSessionTimerA" type="i4" >0</var>
        <var name="b487" type="boolean" >0</var>
        <var name="oAccessLine_tmp" type="object" ></var>
        <var name="bRedirected" type="boolean" >0</var>
        <var name="oRedirectUrl" type="object" ></var>
        <var name="bReturnToIvr" type="boolean" >0</var>
        <var name="strBLegProxyAuthorization" type="string" ></var>
        <var name="oAPI_temp" type="object" ></var>
        <var name="oService_temp" type="object" ></var>
        <var name="bRateCallAttempt" type="boolean" >0</var>
        <var name="oDummy" type="object" ></var>
        <var name="bTransferFromOriginate" type="boolean" >0</var>
      </local-vars>
      <actions >
        <action id="52" plug-in="Pactolus.MSConnect.1" ><?xtml-editor x=54 y=210 ?>
          <!--Connect A to MS so we can play ring back while they wait for connection to B.-->
          <cc-connect xmlns="urn:www.pactolus.com:xtml:sip-cc" call-id="oCallLegA.strCallId" caller-sdp="oCallLegA.strRemoteSdp" capability="1" inbound="0" returns="nReturnCode" timeout="nTimeout" endpoint="oMS.strEndPoint" connection-id="oMS.strConnectionId" ms-sdp="oMS.strContent" to="oCallLegA.strFrom" from="oCallLegA.strTo" cseq="oCallLegA.strCSeq" via="" mgcp-call-id="oMS.strCallId" ingress-gateway="oCallLegA.strRemoteUri" packetization-period="oMS.nPacketizationPeriod" early-media="0" early-media-only="0" codec="-1" ms-type="oMS.strType" telephone-events="0" route="oCallLegA.strRoute" record-route="oCallLegA.strRecordRoute" contact="oCallLegA.strContact" session-expires="" min-se="" supported="" use-session-timer="0" min-supported-session-timer="" refresher=""/>
          <results >
            <result name="Default" link="44" stubbed="0"/>
            <result name="Success" link="53" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
            <result name="Resource Unavailable"/>
            <result name="Caller Hung up"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if ( -1 != Session.oCallLegB.strRequestUri.toString().indexOf("target=pcs_voip_ivr")) {

	Session.bReturnToIvr = true;

	Server.logInfo("This call is being rerouted back to the IVR");

}



Server.logInfo("oAPI.strBroadbandCallingFlag: " + Session.oAPI.strBroadbandCallingFlag ) ;



var app = new String( Session._appName ) ;

if( -1 != app.indexOf("voip_originate") ) {

	Session.bTransferFromOriginate = true ;

	Server.logInfo("This call is being transferred from the originate application (i.e., extension dialed AA)") ;

}]]></script>
          </scripts>
        </action>
        <action id="5" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=301 y=1446 ?>
          <!--IVR Transfer was successful.-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bConnected"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("IVR Transfer completed successfully") ;

Server.logInfo("New call leg B strTo: " + Session.oCallLegB.strTo );

Server.logInfo("New call leg B strFrom: " + Session.oCallLegB.strFrom );

Server.logInfo("New call leg B bUac: " + Session.oCallLegB.bUac);



Session.oCallLegA.strContent = Session.oCallLegA.strRemoteSdp;





Server.enableEvents(true);



]]></script>
          </scripts>
        </action>
        <action id="11" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=881 y=174 ?>
          <!--VoipGetDestCallingInfo-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;VoipGetDestCallingInfo&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >oAPI</parameter>
            <parameter >oAccessLine_tmp</parameter>
            <parameter >oCallLegB</parameter>
            <parameter >oService.nSvcId</parameter>
            <parameter >oAPI.nDialingPlanId</parameter>
          </function>
          <results >
            <result name="Default" link="13" stubbed="1"/>
            <result name="success" link="60" stubbed="1" >nReturnCode == 0</result>
            <result name="restrictedDest" link="13" stubbed="1" >nReturnCode == -6</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oAccessLine_tmp.lAccessLineId = Session.oAccessLine.lAccessLineId;]]></script>
            <script language="javascript" timing="last" ><![CDATA[Session.oAPI.strDestReceived = Session.oAPI.strStrippedDest;]]></script>
          </scripts>
        </action>
        <action id="13" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1680 y=301 ?>
          <!--Failed to connect-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bConnected"/>
        </action>
        <action id="17" plug-in="Pactolus.SipInvite.1" ><?xtml-editor x=112 y=596 ?>
          <!--INVITE to Transfer Target-->
          <sip-invite xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" handle-responses="0" follow-redirection="0" final-response-status="" response-content="" response-content-type="" final-request-uri="" timeout-for-final-response="" timeout-for-provisional-response="" record-route="" contact="" response-to="" use-session-timer="0" session-expires="" min-supported-session-timer="" refresher="" remote-party-id="" increment-cseq-first="1" increment-cseq-last="0" >
            <accept >oCallLegB.strAccept</accept>
            <call-id >oCallLegB.strCallId</call-id>
            <contact >strLocalUri</contact>
            <content >oCallLegA.strRemoteSdp</content>
            <content-disposition >oCallLegA.strContentDisposition</content-disposition>
            <content-type >oCallLegA.strContentType</content-type>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >oCallLegB.strFrom</from>
            <proxy-authorization >strBLegProxyAuthorization</proxy-authorization>
            <record-route >oCallLegB.strRecordRoute</record-route>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <require >oCallLegB.strRequire</require>
            <route >oCallLegB.strRoute</route>
            <supported >oCallLegB.strSupported</supported>
            <to >oCallLegB.strTo</to>
            <alert-info >oCallLegB.strAlertInfo</alert-info>
          </sip-invite>
          <results >
            <result name="Default" link="63" stubbed="0"/>
            <result name="Success"/>
            <result name="Redirect (3xx)"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Provisional Timeout"/>
            <result name="Final Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bGotFinalResponse = false; 

Session.oCallLegB.bConnected = false;



Session.oCallLegB.strCallId = js_CreateUniqueCallId() ;

Session.oCallLegB.strRequestUri = Session.oCallLegB.strRemoteUri;



if ( !Session.bReturnToIvr ) {

	Session.oCallLegB.lTimeStart = Server.getUTCTime() ;

}



if ( Session.bForwardedToVM ) {

	js_modifySdpForCodec( Session.oCallLegA.strRemoteSdp, 0 ) ;

}



//set provisional timeout

Session.nTimeout = 4;



//only include the ProxyAuthorization header if this is an internal transfer

if ( Session.bInternalTransfer ) {

	Session.strBLegProxyAuthorization = Session.oCallLegA.strProxyAuthorization;

}



Session.oCallLegB.lTimeStart = Server.getUTCTime() ;

Session.oCallLegB.lTimeAnswered = 0 ;

Session.oCallLegB.lTimeEnded = 0 ;



Server.enableEvents(false);





























]]></script>
          </scripts>
        </action>
        <action id="19" plug-in="Pactolus.SipInvite.1" ><?xtml-editor x=1085 y=489 ?>
          <!--INVITE to A Leg-->
          <sip-invite xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" handle-responses="0" follow-redirection="0" final-response-status="" response-content="" response-content-type="" final-request-uri="" timeout-for-final-response="" timeout-for-provisional-response="" record-route="" contact="" response-to="" use-session-timer="0" session-expires="" min-supported-session-timer="" refresher="" remote-party-id="" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oCallLegA.strCallId</call-id>
            <contact >strLocalUri</contact>
            <content >oCallLegB.strRemoteSdp</content>
            <content-disposition >strContentDisposition</content-disposition>
            <content-type >strContentType</content-type>
            <cseq >oCallLegA.strCSeq</cseq>
            <from >oCallLegA.strTo</from>
            <record-route >oCallLegA.strRecordRoute</record-route>
            <request-uri >oCallLegA.strRemoteUri</request-uri>
            <route >oCallLegA.strRoute</route>
            <session-expires >oCallLegA.strSessionExpires</session-expires>
            <supported >strSupported</supported>
            <to >oCallLegA.strFrom</to>
          </sip-invite>
          <results >
            <result name="Default" link="20" stubbed="0"/>
            <result name="Success"/>
            <result name="Redirect (3xx)"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Provisional Timeout"/>
            <result name="Final Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[//Session.nTimeout = 4;



if ( 0 < Session.nSessionTimerA ){

	Session.nSessionTimerA = Clib.atoi( Session.oCallLegA.strSessionExpires ) ;

	Session.strSupported = "timer";

}

else {

	Session.oCallLegA.strSessionExpires = "";

}



//now we need to wait for the 200 OK from A

Session.bAConnectedToB = false ;



]]></script>
            <script language="javascript" timing="last" ><![CDATA[Session.bInviteAWithNewSDP = true;]]></script>
          </scripts>
        </action>
        <action id="20" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1297 y=553 ?>
          <!--new sdp came in 200 OK-->
          <results >
            <result name="Default" link="63" stubbed="0"/>
            <result name="200 OK" link="30" stubbed="0" >nFinalStatus == 200</result>
          </results>
        </action>
        <action id="21" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=693 y=818 ?>
          <!--200 OK to BYE-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <status >"SIP/2.0 200 OK"</status>
            <to >strTo</to>
            <via >strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="22" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="22" plug-in="Pactolus.Branch.1" ><?xtml-editor x=968 y=822 ?>
          <results >
            <result name="Default" link="63" stubbed="0"/>
            <result name="BYE from A Leg" link="23" stubbed="0" >bALegHungUp == true</result>
          </results>
        </action>
        <action id="23" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1240 y=824 ?>
          <results >
            <result name="Default" link="25" stubbed="0"/>
            <result name="Recevied Final Response" link="24" stubbed="0" >bGotFinalResponse == true</result>
          </results>
        </action>
        <action id="24" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=1507 y=886 ?>
          <!--BYE to B leg-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="4" handle-responses="1" increment-cseq-first="1" increment-cseq-last="0" >
            <call-id >oCallLegB.strCallId</call-id>
            <contact >strLocalUri</contact>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >oCallLegB.strFrom</from>
            <record-route >oCallLegB.strRecordRoute</record-route>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <route >oCallLegB.strRoute</route>
            <to >oCallLegB.strTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="74" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="25" plug-in="Pactolus.SipCancel.1" ><?xtml-editor x=1507 y=704 ?>
          <!--CANCEL to B Leg-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="6" handle-responses="1" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oCallLegB.strCallId</call-id>
            <contact >strLocalUri</contact>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >oCallLegB.strFrom</from>
            <record-route >oCallLegB.strRecordRoute</record-route>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <route >oCallLegB.strRoute</route>
            <to >oCallLegB.strTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="74" stubbed="0"/>
            <result name="Success"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Cancelling INVITE to B leg because A leg hung up.");]]></script>
          </scripts>
        </action>
        <action id="26" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1802 y=847 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bConnected"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logError("A leg hung up before completion of IVR Transfer.");

Server.enableEvents(true);]]></script>
          </scripts>
        </action>
        <action id="27" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=685 y=1154 ?>
          <!--Send ACK to B leg with same branch on Via, 300 Rerouted call-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >strCallId</call-id>
            <cseq >strCSeq</cseq>
            <from >strFrom</from>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <timestamp >strTimestamp</timestamp>
            <to >strTo</to>
            <via >strMyVia</via>
          </sip-ack>
          <results >
            <result name="Default" link="17" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="3xx w/o Contact" link="28" stubbed="0" >nContactLength == 0</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bRedirected = true ;



]]></script>
            <script language="javascript" timing="middle" ><![CDATA[Session.nContactLength = Session.oRedirectUrl.length = 0 ;

	if ( 0 != Session.strContact.length ) {

		var contact_array = parseContacts( Session.strContact ) ;

		for( var i = 0; i < contact_array.length; i++ ) {

			Session.oRedirectUrl[i] = contact_array[i] ;

		}

		Session.nContactLength = Session.oRedirectUrl.length  ;

		Server.logInfo("Number of redirect urls to try: " + Session.nContactLength) ;

	

		Session.oCallLegB.strRemoteUri = Session.oRedirectUrl[0] ;

		Server.logInfo("Constructing Uri on redirect to: " + Session.oCallLegB.strRemoteUri ) ;

		Session.nIdx = 1;

		Session.oCallLegB.strCallId = "" ;

		

		var tag = new SipTo(Session.oCallLegB.strTo.toString());

		tag.tag = "";

		Session.oCallLegB.strTo = tag.encode();

		

	}

	else {

		Server.logError("Received a 3xx response with no Contact header, returning failure to caller") ;

	}





]]></script>
          </scripts>
        </action>
        <action id="28" plug-in="Pactolus.SipResponse.1" ><?xtml-editor x=952 y=1167 ?>
          <!--503 Service Unavailable to A Leg-->
          <sip-response xmlns="urn:www.pactolus.com:xtml:sip" remove-via="0" reliable="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oCallLegA.strCallId</call-id>
            <cseq >oCallLegA.strCSeq</cseq>
            <from >oCallLegA.strFrom</from>
            <status >"SIP/2.0 503 Service Unavailable"</status>
            <to >oCallLegA.strTo</to>
            <via >oCallLegA.strVia</via>
          </sip-response>
          <results >
            <result name="Default" link="63" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nFinalStatus = 503 ;

Session.bRedirected = false ;



]]></script>
          </scripts>
        </action>
        <action id="29" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=127 y=1066 ?>
          <!--ACK to A Leg-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oCallLegA.strCallId</call-id>
            <cseq >oCallLegA.strCSeq</cseq>
            <from >oCallLegA.strTo</from>
            <request-uri >oCallLegA.strRemoteUri</request-uri>
            <route >oCallLegA.strRoute</route>
            <timestamp >strTimestamp</timestamp>
            <to >oCallLegA.strFrom</to>
          </sip-ack>
          <results >
            <result name="Default" link="31" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oCallLegA.strRemoteSdp = Session.strContent;



Session.oCallLegA.bConnected = true;

Session.bAConnectedToB = true;]]></script>
          </scripts>
        </action>
        <action id="30" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=368 y=1066 ?>
          <!--ACK to B Leg-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" increment-cseq-first="0" increment-cseq-last="1" >
            <call-id >oCallLegB.strCallId</call-id>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >oCallLegB.strFrom</from>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <route >oCallLegB.strRoute</route>
            <timestamp >strTimestamp</timestamp>
            <to >oCallLegB.strTo</to>
          </sip-ack>
          <results >
            <result name="Default" link="31" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[js_calculate_uri_and_route( true, "SIP/2.0", 

	Session.strFrom.toString(), 

	Session.strContact.toString(), 

	Session.strRecordRoute.toString(), 

	Session.oCallLegB.strRemoteUri, 

	Session.oCallLegB.strRoute ) ;



Session.oCallLegB.bConnected = Session.bConnected = true;

if ( !Session.bReturnToIvr ) {

	Session.oCallLegB.lTimeAnswered = Server.getUTCTime() ;

}]]></script>
          </scripts>
        </action>
        <action id="31" plug-in="Pactolus.Branch.1" ><?xtml-editor x=117 y=1337 ?>
          <results >
            <result name="Default" link="63" stubbed="0"/>
            <result name="all connected" link="5" stubbed="0" >bConnected == true

AND bAConnectedToB == true</result>
          </results>
        </action>
        <action id="33" plug-in="Pactolus.Branch.1" ><?xtml-editor x=666 y=1517 ?>
          <results >
            <result name="Default" link="48" stubbed="0"/>
            <result name="no final response from B" link="34" stubbed="0" >bGotFinalResponse == false</result>
            <result name="no provisional from B" link="45" stubbed="0" >bInviteAWithNewSDP == false

AND nTimeout == 4</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logInfo("Ring No Answer Timeout.");]]></script>
          </scripts>
        </action>
        <action id="34" plug-in="Pactolus.SipCancel.1" ><?xtml-editor x=950 y=1626 ?>
          <!--CANCEL B leg INVITE-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="4" handle-responses="1" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oCallLegB.strCallId</call-id>
            <contact >strLocalUri</contact>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >oCallLegB.strFrom</from>
            <record-route >oCallLegB.strRecordRoute</record-route>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <route >oCallLegB.strRoute</route>
            <to >oCallLegB.strTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="69" stubbed="0"/>
            <result name="Success"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="36" plug-in="Pactolus.SipCancel.1" ><?xtml-editor x=1460 y=1577 ?>
          <!--CANCEL A leg INVITE-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="4" handle-responses="1" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oCallLegA.strCallId</call-id>
            <contact >strLocalUri</contact>
            <cseq >oCallLegA.strCSeq</cseq>
            <from >oCallLegA.strTo</from>
            <record-route >oCallLegA.strRecordRoute</record-route>
            <request-uri >oCallLegA.strRemoteUri</request-uri>
            <route >oCallLegA.strRoute</route>
            <to >oCallLegA.strFrom</to>
          </sip-bye>
          <results >
            <result name="Default" link="72" stubbed="0"/>
            <result name="Success"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="38" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=1452 y=1343 ?>
          <!--BYE to A leg-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="4" handle-responses="1" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oCallLegA.strCallId</call-id>
            <contact >strLocalUri</contact>
            <cseq >oCallLegA.strCSeq</cseq>
            <from >oCallLegA.strTo</from>
            <record-route >oCallLegA.strRecordRoute</record-route>
            <request-uri >oCallLegA.strRemoteUri</request-uri>
            <route >oCallLegA.strRoute</route>
            <to >oCallLegA.strFrom</to>
          </sip-bye>
          <results >
            <result name="Default" link="72" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[Session.oCallLegA.bConnected = false;]]></script>
          </scripts>
        </action>
        <action id="40" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=698 y=977 ?>
          <!--ACK to B Leg  - non-success-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oCallLegB.strCallId</call-id>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >strFrom</from>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <route >oCallLegB.strRoute</route>
            <timestamp >strTimestamp</timestamp>
            <to >strTo</to>
            <via >strMyVia</via>
          </sip-ack>
          <results >
            <result name="Default" link="69" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="44" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=329 y=402 ?>
          <!--Put A Leg on Hold-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;PutPartyOnHold&quot;" return="" external-function="1" library="lib_callcontrol.xml" >
            <parameter >oCallLegA</parameter>
            <parameter >strLocalUri</parameter>
          </function>
          <results >
            <result name="Default" link="65" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oCallLegA.strRequestUri = Session.oCallLegA.strRemoteUri;]]></script>
          </scripts>
        </action>
        <action id="45" plug-in="Pactolus.Branch.1" ><?xtml-editor x=953 y=1807 ?>
          <!--determine if there is another PSX to try-->
          <results >
            <result name="Default" link="62" stubbed="0"/>
            <result name="try next PSX" link="17" stubbed="1" >bTryAgain == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bTryAgain = false ;



if ( !Session.bAlegHungUp && (++Session.nProxyId < Session.oProxyList.length) && !Session.bInternalTransfer && !Session.bVoicemailTransfer ) {

	Session.bTryAgain = true ;

	Server.logInfo("PSX timed out on provisional response. Trying next PSX " + Session.nProxyId + ": " + Session.g_oProxyList[Session.nProxyId]) ;

	var uri = new SipRequestUri(Session.oCallLegB.strRemoteUri.toString());

	uri.url.host = Session.oProxyList[Session.nProxyId];

	Session.oCallLegB.strRequestUri = uri.encode();

	Server.logInfo("Reconstructed Request Uri for B leg: " + Session.oCallLegB.strRemoteUri);

}

else {

	Server.logInfo("PSX timed out on provisional response. No more proxies in list.") ;

}





]]></script>
          </scripts>
        </action>
        <action id="47" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1254 y=269 ?>
          <!--set up B leg call values-->
          <results >
            <result name="Default" link="68" stubbed="0"/>
            <result name="bRejectCall" link="13" stubbed="0" >bRejectCall == true</result>
            <result name="Simultaneous Ring" link="61" stubbed="0" >oAPI.nHuntType == sHuntSimultaneous</result>
            <result name="bNoMoreRoutes" link="13" stubbed="0" >bNoMoreRoutes == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if ( Session.oProxyList.length <= Session.nProxyId &&

	 Session.s_CT_IVR_MENU != Session.oAPI.strCallType ) {

	Session.bNoMoreRoutes = true;

	Server.logInfo("All routes have been exhausted. Return to original IVR.");

	return;

}





if ( Session.bInternalTransfer ) { 

	Server.logInfo("Internal Transfer with call type: <" + Session.oAPI.strCallType + ">");

	if ( Session.nRouteIdx < Session.oAPI.oRoute.length ) {

		//If there is a value for the Contact parameter, use that.

		if ( null != Session.oAPI.oRoute[Session.nRouteIdx].strContact && 0 < Session.oAPI.oRoute[Session.nRouteIdx].strContact.length ) {

			js_calculate_uri_and_route( true, "SIP/2.0", Session.oCallLegA.strTo.toString(), 

				Session.oAPI.oRoute[Session.nRouteIdx].strContact.toString(), 

				Session.oAPI.oRoute[Session.nRouteIdx].strRecordRoute.toString(), 

				Session.oCallLegB.strRemoteUri, 

				Session.oCallLegB.strRoute ) ;

			Session.oAccessLine.oSub.lSubscriberId = Session.oAPI.oRoute[Session.nRouteIdx].lSubscriberId;

			Session.oAccessLine.lPhoneNumberId = Session.oAPI.oRoute[Session.nRouteIdx].lPhoneNumberId;

			Session.oCallLegB.strOutdialDestNbr = Session.oAPI.strDestReceived ;

			Server.logInfo("oCallLegB Request-URI: " + Session.oCallLegB.strRemoteUri ) ;

			Server.logInfo("oCallLegB Route: " + Session.oCallLegB.strRoute ) ;

		}	

		//otherwise, use the phone number parameter if we have it

		else if ( 0 < Session.oAPI.oRoute[Session.nRouteIdx].strPhoneNumber.length ) {

			var bOnNet = ("T" == Session.oAPI.oRoute[Session.nRouteIdx].strDestOnNet ? true : false );

			Session.oCallLegB.strOutdialDestNbr = 

				js_translate_destination_broadband( Session.strCarrierName, Session.oAPI.oRoute[Session.nRouteIdx].strPhoneNumber,

					Session.oCallLegB.strDestCountryId, bOnNet, Session.oAPI.strAniReceived ) ;

				Server.logInfo("Subscriber is configured for route to external number.");

				Server.logInfo("Translated destination number : " + Session.oCallLegB.strOutdialDestNbr);

			Session.oAccessLine.oSub.lSubscriberId = Session.oAPI.oRoute[Session.nRouteIdx].lSubscriberId;

			Session.oAccessLine.lPhoneNumberId = Session.oAPI.oRoute[Session.nRouteIdx].lPhoneNumberId;

			Session.oCallLegB.strRemoteUri =  "sip:" + Session.oCallLegB.strOutdialDestNbr + "@" + Session.oProxyList[Session.nProxyId] ;

			Session.oCallLegB.strRemoteUri += " SIP/2.0";

		}

	}

	else if ( Session.nRouteIdx >= Session.oAPI.oRoute.length && !Session.oAPI.bForwardToVoicemail ) {

		Session.bNoMoreRoutes = true;

		Server.logInfo("Exhausted all routes and sub does not have voicemail");

	}

 	else if ( Session.nRouteIdx >= Session.oAPI.oRoute.length && Session.oAPI.bForwardToVoicemail ) {

 		//Session.oCallLegB.strRemoteUri = "sip:" + Session.oCallLegB.strOutdialDestNbr + "@" + Session.strNiuAddress;

 		Session.oCallLegB.strRemoteUri = "sip:" + Session.oAPI.strDestReceived + "@" + Session.strNiuAddress;

 		if (Session.s_CT_VM_RETRIEVAL == Session.oAPI.strCallType) {

			Session.oCallLegB.strRemoteUri += ";target=pcs_vmail_retrieve" ;

 		} else {

			Session.oCallLegB.strRemoteUri += ";target=pcs_vmail_deposit" ;

		}

		if ( 0 < Session.oAPI.lVoiceMailId ) {

			Session.oCallLegB.strRemoteUri += ";vmail_account_id=";

			Session.oCallLegB.strRemoteUri += Session.oAPI.lVoiceMailId;

		}

 		if (Session.s_CT_VM_RETRIEVAL == Session.oAPI.strCallType) {

			Session.oCallLegB.strRemoteUri += ";access_line_id=0" ;

 		}

		Session.oCallLegB.strRemoteUri += " SIP/2.0"; 

		Server.logInfo("Any available routes have been attempted. Now forwarding caller to voicemail");		

		Session.bForwardedToVM = true;

	}	

	else {

		Server.logError("No route matches on the internal transfer. Returning out of IVR Transfer with failure.");

		Session.bRejectCall = true;

	}



	Session.oCallLegB.strIntlDestFlag = Session.oAPI.oRoute[Session.nRouteIdx].strDestIntl ;

	Session.oCallLegB.strWiretapFlag = Session.oAccessLine.strWiretapFlag ;

	Session.oCallLegB.strWiretapDest = Session.oAccessLine.strWiretapDest ;

	Session.oCallLegB.strDestRouteType = ("T" == Session.oAPI.oRoute[Session.nRouteIdx].strDestOnNet ? 1 : 0 )

}

else if ( Session.s_CT_IVR_MENU == Session.oAPI.strCallType && Session.oAPI.bTryReceptionist ) {

		Session.oAPI.nRingNoAnswerTimeout = Session.oAPI.nReceptionRNATimeout ;

		Session.oCallLegB.strOutdialDestNbr = Session.oAPI.strDestToSend = Session.oAPI.strReceptionPhone ;

		if ( null != Session.oAPI.oRoute[0].strContact && 0 < Session.oAPI.oRoute[0].strContact.length ) {

			js_calculate_uri_and_route( true, "SIP/2.0", Session.oCallLegA.strTo.toString(), 

				Session.oAPI.oRoute[0].strContact.toString(), 

				Session.oAPI.oRoute[0].strRecordRoute.toString(), 

				Session.oCallLegB.strRemoteUri, 

				Session.oCallLegB.strRoute ) ;

			Session.oAccessLine.oSub.lSubscriberId = Session.oAPI.oRoute[0].lSubscriberId;

			Session.oAccessLine.lPhoneNumberId = Session.oAPI.oRoute[0].lPhoneNumberId;

		}

		else {

			Session.oCallLegB.strRemoteUri = "sip:" ;

			Session.oCallLegB.strRemoteUri += Session.oCallLegB.strOutdialDestNbr ;

			Session.oCallLegB.strRemoteUri += "@" ;

			Session.oCallLegB.strRemoteUri += Session.strNiuAddress ;

			Session.oCallLegB.strRemoteUri += ";target=pcs_voip_terminate" ;

			Session.oCallLegB.strRemoteUri += ";dept_id=" ;

			Session.oCallLegB.strRemoteUri += Session.g_oAPI.lDeptId ;

			Session.oCallLegB.strRemoteUri += ";ReceptionRNA=";

			Session.oCallLegB.strRemoteUri += Session.g_oAPI.nRNATimeout;

		}

		Server.logInfo("Trying IVR Receptionist at " + Session.oCallLegB.strOutdialDestNbr + " for " + Session.oAPI.nReceptionRNATimeout + " seconds");	

		Server.logInfo("oCallLegB Request-URI: " + Session.oCallLegB.strRemoteUri ) ;

		Server.logInfo("oCallLegB Route: " + Session.oCallLegB.strRoute ) ;

		//set .bTryReceptionist to false, so that in case there is not answer, we will

		// come back to this code and route to the IVR instead.

		Session.oAPI.bTryReceptionist = false;

}

else if ( Session.s_CT_IVR_MENU == Session.oAPI.strCallType && !Session.oAPI.bTryReceptionist ) {

		Server.logInfo("The target route is another IVR");

		Session.oCallLegB.strRemoteUri = "sip:" ;

		Session.oCallLegB.strRemoteUri += Session.oAPI.strDestReceived  ;

		Session.oCallLegB.strRemoteUri += "@" ;

		Session.oCallLegB.strRemoteUri += Session.strNiuAddress ;

		Session.oCallLegB.strRemoteUri += ";target=pcs_voip_ivr" ;  

		Session.oCallLegB.strRemoteUri += ";ivr_id=" ;

		Session.oCallLegB.strRemoteUri += Session.oAPI.nActionValueId ;

}		

else if ( Session.bVoicemailTransfer ) {

	Session.oCallLegB.strRemoteUri = "sip:" 

	Session.oCallLegB.strRemoteUri += Session.oCallLegB.strOutdialDestNbr ;

	Session.oCallLegB.strRemoteUri += "@" ;

	Session.oCallLegB.strRemoteUri += Session.strNiuAddress;

	Session.oCallLegB.strRemoteUri += ";target=pcs_vmail_deposit;vmail_account_id=";

	Session.oCallLegB.strRemoteUri += Session.oAPI.lVoiceMailId ;

	Session.oCallLegB.strRemoteUri += " SIP/2.0";

	Server.logInfo("Transfer from IVR direct to voicemail");

	Session.bForwardedToVM = true;

}

else { //off net call

	Session.oCallLegB.strWiretapFlag = "F" ;

	Session.oCallLegB.strWiretapDest = "" ;

	Session.oCallLegB.strDestRouteType = "2" ; //off-net

	if ( 0 == Session.oCallLegB.strDestCountryId ) {

		Session.oCallLegB.strDestCountryId = 1; //default to North America if no value was returned.

	}

	Session.oCallLegB.strOutdialDestNbr = 

		js_translate_destination_broadband( Session.strCarrierName, Session.oAPI.strDestReceived,

			Session.oCallLegB.strDestCountryId, false, Session.oAPI.strAniReceived ) ;

		Server.logInfo("Translated off-net destination: " + Session.oCallLegB.strOutdialDestNbr);

	Server.logInfo("Attempting to route call to proxy id <" + Session.nProxyId + ">");

	Session.oCallLegB.strRemoteUri =  "sip:";

	Session.oCallLegB.strRemoteUri += Session.oCallLegB.strOutdialDestNbr + "@" ;

	Session.oCallLegB.strRemoteUri += Session.oProxyList[Session.nProxyId] ;

	Session.oCallLegB.strRemoteUri += " SIP/2.0";

}



Session.oCallLegB.strRequestUri = Session.oCallLegB.strRemoteUri;



var to = new SipTo(Session.oCallLegB.strRemoteUri.toString());

Session.oCallLegB.strTo = "<sip:" ;

if ( !Session.bVoicemailTransfer){

	Session.oCallLegB.strTo += Session.oCallLegB.strOutdialDestNbr ;

	Session.oCallLegB.strTo += "@" ;

}

Session.oCallLegB.strTo += to.url.host ;

Session.oCallLegB.strTo += ">";

Session.oCallLegB.strOriginalTo = Session.oCallLegB.strTo ;



Session.oCallLegB.strIVRTransferFlag = "T";

Session.oCallLegB.strCSeq = "100";

Session.oCallLegB.bUac = true;



/* replace ip address and port in the A leg From header with our's before using on the B leg */

var from = new SipFrom( Session.oCallLegA.strFrom.toString() ) ;



// use the IVR's phone number in the From header, if we have that in the A leg To.

var to = new SipTo(Session.oCallLegA.strTo.toString());


from.url.phoneNumber = to.url.phoneNumber;

from.url.host = Server.sipAddress ;

from.url.port = Server.sipPort ;



if( null != Session.oAPI.strCallingNumberContactName && Session.oAPI.strCallingNumberContactName.length > 0 ) {

	from.displayName = Session.oAPI.strCallingNumberContactName ;

}

Session.oCallLegB.strFrom = from.encode() ;



Session.oCallLegB.strCallType = Session.oAPI.strCallType;







]]></script>
          </scripts>
        </action>
        <action id="48" plug-in="Pactolus.SipBye.1" ><?xtml-editor x=945 y=1384 ?>
          <!--BYE to B leg-->
          <sip-bye xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="1" timeout="4" handle-responses="1" increment-cseq-first="1" increment-cseq-last="0" >
            <call-id >oCallLegB.strCallId</call-id>
            <contact >strLocalUri</contact>
            <cseq >oCallLegB.strCSeq</cseq>
            <from >oCallLegB.strFrom</from>
            <record-route >oCallLegB.strRecordRoute</record-route>
            <request-uri >oCallLegB.strRemoteUri</request-uri>
            <route >oCallLegB.strRoute</route>
            <to >oCallLegB.strTo</to>
          </sip-bye>
          <results >
            <result name="Default" link="62" stubbed="0"/>
            <result name="Success"/>
            <result name="Client error (4xx)"/>
            <result name="Server error (5xx)"/>
            <result name="Global error (6xx)"/>
            <result name="Timeout"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="49" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1722 y=1490 ?>
          <return xmlns="urn:www.pactolus.com:xtml:application" value=""/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logError("IVR Transfer failed.")

Server.logInfo("Final response from B leg: " + Session.oCallLegB.strStatus);

Server.logInfo("Final response from A leg: " + Session.oCallLegA.strStatus);]]></script>
          </scripts>
        </action>
        <action id="53" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=333 y=224 ?>
          <!--Play Ringtone-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="oMS.strConnectionId" endpoint="oMS.strEndPoint" callid="oMS.strCallId" repeat="-1" timeout="120" ms-type="oMS.strType" returns="nReturnCode" start-play="1" interrupt="0" return-immediate="1" digit-map="" language="oAccessLine.strLanguage" digits="" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="silence" >.5</audio>
            <audio type="index" >341</audio>
          </play>
          <results >
            <result name="Default" link="65" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bPlayingRingback = true;]]></script>
          </scripts>
        </action>
        <action id="54" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=874 y=518 ?>
          <!--Stop play of ringtone-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="oMS.strConnectionId" endpoint="oMS.strEndPoint" callid="oMS.strCallId" repeat="-1" timeout="5" ms-type="oMS.strType" returns="nReturnCode" start-play="0" interrupt="0" return-immediate="0" digit-map="" language="oAccessLine.strLanguage" digits="" retry-count="" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer=""/>
          <results >
            <result name="Default" link="19" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[Session.bPlayingRingback = false;]]></script>
          </scripts>
        </action>
        <action id="56" plug-in="Pactolus.Branch.1" ><?xtml-editor x=641 y=537 ?>
          <results >
            <result name="Default" link="19" stubbed="0"/>
            <result name="bPlayingRingback" link="54" stubbed="0" >bPlayingRingback == true</result>
          </results>
        </action>
        <action id="58" plug-in="Pactolus.SipAck.1" ><?xtml-editor x=689 y=670 ?>
          <!--ACK to 487 from CANCEL-->
          <sip-ack xmlns="urn:www.pactolus.com:xtml:sip" add-record-route="0" add-via="0" increment-cseq-first="0" increment-cseq-last="0" >
            <call-id >oSimRingCallLegs[nRouteIdx].strCallId</call-id>
            <cseq >oSimRingCallLegs[nRouteIdx].strCSeq</cseq>
            <from >strFrom</from>
            <request-uri >oSimRingCallLegs[nRouteIdx].strRequestUri</request-uri>
            <route >oSimRingCallLegs[nRouteIdx].strRoute</route>
            <to >strTo</to>
            <via >strVia</via>
          </sip-ack>
          <results >
            <result name="Default" link="63" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
          </results>
        </action>
        <action id="60" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=887 y=328 ?>
          <!--VoipAuthenticateTermination-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;VoipAuthenticateTermination&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >oAPI</parameter>
            <parameter >oAccessLine</parameter>
            <parameter >oService</parameter>
            <parameter >strResponse</parameter>
            <parameter >strRequestUri</parameter>
            <parameter >oSub</parameter>
          </function>
          <results >
            <result name="Default" link="13" stubbed="0"/>
            <result name="Success" link="47" stubbed="0" >nReturnCode == 0

OR (bTransferFromOriginate == true

AND (nReturnCode == -10

OR nReturnCode == -11

OR nReturnCode == -17))</result>
            <result name="phone not found" link="77" stubbed="0" >nReturnCode == -2</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.enableEvents(false);

//for the purposes of calling authTerminate, construct a RequestUri using the

// original A leg Request Uri but with the new target phone number.

var uri = new SipRequestUri(Session.oCallLegA.strRequestUri.toString());

uri.url.phoneNumber = Session.oAPI.strDestReceived;

Session.strRequestUri = uri.encode();

Session.nReturnCode = -99;



//in case no phone number is found, save off our initial values

Session.oAPI_temp = Session.oAPI;

Session.oAccessLine_tmp = Session.oAccessLine;

Session.oService_temp = Session.oService;



if ( !Session.bInternalTransfer &&  Session.oAPI.nDeptId <= 0 ) {

	Session.oAPI.lDeptId = Session.oAPI.nDeptId = 0;

}]]></script>
            <script language="javascript" timing="middle" ><![CDATA[if ( 0 == Session.nReturnCode ) {



	if ( Session.s_CT_IVR_MENU != Session.oAPI.strCallType ) {

		Session.bInternalTransfer = true;

	}

	

	/* determine how many destinations to try (not including voicemail) */

	var nDestinations = 0 ;

	for( var i = 0; i < Session.oAPI.oRoute.length; i++, nDestinations++ ) {

		if( 0 == Session.oAPI.oRoute[i].strPhoneNumber.length	&&

			0 == Session.oAPI.oRoute[i].strContact.length	) {

			break ;

		}

	}

	

	Session.oAPI.oRoute.length = nDestinations ;

	Server.logInfo("Number of routes returned was: " + nDestinations ) ;

	

	/* if the user asked for simultaneous ring, but only provided a single destination then keep things simple */

	if( Session.sHuntSimultaneous == Session.oAPI.nHuntType && nDestinations < 2 ) {

		Session.oAPI.nHuntType = Session.sHuntSequential ;

	}

	Server.logInfo("Routes will be attempted " + (Session.sHuntSequential == Session.oAPI.nHuntType ? "sequentially" : "simultaneously") ) ;

	Server.logInfo("Voicemail " + (Session.oAPI.bForwardToVoicemail ? "will" : "will not") + " be attempted if all routes are exhausted") ;



	/* DH: added for rating; save attributes we will need for subsequent call to AuthDest */	

	Session.oAPI.lServiceProviderId = Session.oAccessLine.oSub.lSPId ;

	Session.oSub.nPrimaryOfferingId = Session.oAccessLine.oSub.nPrimaryOfferingId;

	Session.oSub.lSubscriberId = Session.oAccessLine.oSub.lSubscriberId ;

	Session.oSub.nServiceId = Session.oService.nSvcId ;

	Session.oSub.fPrepaidBalance = Session.oAPI.fAccountBalance ;

	Session.oAPI.strStrippedOrigNumber = Session.oAPI.strAniReceived; 

	Session.oAPI.lPhoneNumberId = Session.oAccessLine.lPhoneNumberId ;

	Session.oAPI.lWiretapOrderId = Session.oAccessLine.lWiretapOrderId ;

	Session.oAPI.strDestinationNumber = Session.oAPI.strDestReceived ;

	Session.oAPI.strPostPaidFlag = Session.oAPI.bPrepaid ? "F" : "T" ;

	Session.oAPI.strRateCallsFlag = Session.oAPI.bRateCalls ? "T" : "F" ;

	Session.oAPI.strCreditLimitFlag = Session.oAPI.bCreditLimit ? "T" : "F" ;

	Session.oAPI.strCreditLimitFlagFirm = "F" ;

	if( !Session.oAPI.bPrepaid && Session.oAPI.bRateCalls && Session.oAPI.bCreditLimit && "T" == Session.oAPI.strSharedUseBillingFlag ) {

		Session.oAPI.strCreditLimitFlagFirm = "T" ;

	}



}							

else if ( -2 == Session.nReturnCode ) {

	Server.logInfo("Phone number not found in authTerm. Treat as PSTN");

	Session.oAccessLine = Session.oAccessLine_tmp;

	Session.oAPI = Session.oAPI_temp;

	Session.oService = Session.oService_temp;

}



//set back to the IVR Transfer setting

Session.oCallLegB.strWiretapFlag = Session.oAccessLine.strWiretapFlag ;

Session.oCallLegB.strWiretapDest = Session.oAccessLine.strWiretapDest ;

Session.oCallLegB.strIntlDestFlag = Session.oAPI.strIntlDestFlag ;

Session.oCallLegB.intDestCountryId = Session.oAPI.nDestCountryId ;

Session.oCallLegB.strDestCallingCode = Session.oAPI.strDestCallingCode ;

Session.oCallLegB.strDestAreaCode = Session.oAPI.strDestAreaCode ;

Session.oCallLegB.strDestRouteType = Session.oAPI.strDestOnNet ;



if( Session.oAPI.strRingTone.length > 0 ) {

	Session.oCallLegB.strAlertInfo = Session.oAPI.strRingTone ;

	Server.logInfo("Setting Alert-Info header on B leg to: " + Session.oCallLegB.strAlertInfo ) ;

} 



if ( Session.s_CT_IVR_MENU == Session.oAPI.strCallType && 

	0 < Session.oAPI.strReceptionPhone.length ) {

	Session.oAPI.bTryReceptionist = true;

	Session.oCallLegB.strOutdialDestNbr = Session.oAPI.strReceptionPhone ;

} 

else {

	Session.oAPI.bTryReceptionist = false;

}



Session.oAPI.lDeptId = Session.oAPI.nDeptId;



]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.enableEvents(true);	]]></script>
          </scripts>
        </action>
        <action id="61" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=1556 y=460 ?>
          <!--SimultaneousRing-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;SimultaneousRing&quot;" return="bConnected" external-function="0" library="" >
            <parameter >oCallLegA</parameter>
            <parameter >oCallLegB</parameter>
            <parameter >oSimRingCallLegs</parameter>
            <parameter >oAPI.nRingNoAnswerTimeout</parameter>
            <parameter >nSessionTimerA</parameter>
            <parameter >oCallLegA.bRefrehser</parameter>
            <parameter >0</parameter>
            <parameter >0</parameter>
            <parameter >bALegHungUp</parameter>
            <parameter >nFinalStatus</parameter>
            <parameter >oAPI.strAniReceived</parameter>
          </function>
          <results >
            <result name="Default" link="62" stubbed="0"/>
            <result name="success" link="75" stubbed="0" >bConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.enableEvents(false);



for( var i = 0; i < Session.oAPI.oRoute.length; i++ ) {

	if( null != Session.oAPI.oRoute[i].strContact && 0 < Session.oAPI.oRoute[i].strContact.length ) {	



		// route is specified in terms of a Contact and, optionally, Record-Route header 

		js_calculate_uri_and_route( true, "SIP/2.0", Session.oCallLegA.strFrom.toString(), 

			Session.oAPI.oRoute[i].strContact.toString(), 

			Session.oAPI.oRoute[i].strRecordRoute.toString(), 

			Session.oSimRingCallLegs[i].strRemoteUri,

			Session.oSimRingCallLegs[i].strRoute) ;

		Session.oSimRingCallLegs[i].strRequestUri = Session.oSimRingCallLegs[i].strRemoteUri ;



		/* SimultaneousRing will only rate PSTN numbers, based on strCalledNumber being non-empty */

		Session.oSimRingCallLegs[i].strOutdialDestNbrNoRouteCode = "" ; 



		Server.logInfo("Simring route #" + (i+1) + " Request-URI: " + Session.oSimRingCallLegs[i].strRequestUri ) ;

		Server.logInfo("Simring route #" + (i+1) + "      Route: " + Session.oSimRingCallLegs[i].strRoute ) ;

	}

	else {



		// perform number translations for dialing */

		var bOnNet = ("T" == Session.oAPI.oRoute[i].strDestOnNet ? true : false );

		Session.oSimRingCallLegs[i].strOutdialDestNbr = js_translate_destination_broadband( Session.strCarrierName, 

			Session.oAPI.oRoute[i].strPhoneNumber, Session.oAPI.nOrigCountryId, bOnNet, Session.oAPI.strAniReceived ) ;

		

		/* SimultaneousRing will only rate this number, if necessary */

		Session.oSimRingCallLegs[i].strOutdialDestNbrNoRouteCode = Session.oSimRingCallLegs[i].strOutdialDestNbr ;



		Session.oSimRingCallLegs[i].strRemoteUri = "sip:" + Session.oSimRingCallLegs[i].strOutdialDestNbr ;

		Session.oSimRingCallLegs[i].strRemoteUri += "@" ;

		Session.oSimRingCallLegs[i].strRemoteUri += Session.oProxyList[Session.nProxyId] ;

		

		Session.oSimRingCallLegs[i].strRequestUri = Session.oSimRingCallLegs[i].strRemoteUri ;

		

		Session.oSimRingCallLegs[i].strRoute = "" ;

		

		Server.logInfo("Simring route #" + (Session.nIdx + 1) + " Request-URI: " + Session.oSimRingCallLegs[i].strRemoteUri ) ;

	}

}



]]></script>
            <script language="javascript" timing="last" ><![CDATA[//set these values for ProcCallCompletion for the target phone

Session.nIdx = Session.oCallLegB.nHuntGroupRouteId;

Session.oAccessLine.oSub.lSubscriberId = Session.oSimRingCallLegs[Session.nIdx].lSubscriberId;

Session.oAccessLine.lPhoneNumberId = Session.oSimRingCallLegs[Session.nIdx].lPhoneNumberId;

Server.logInfo("Target B-leg Subscriber ID: " + Session.oAccessLine.oSub.lSubscriberId);

Server.logInfo("Target B-leg Phone Number ID: " + Session.oAccessLine.lPhoneNumberId);

]]></script>
          </scripts>
        </action>
        <action id="62" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1193 y=1475 ?>
          <results >
            <result name="Default" link="49" stubbed="1"/>
            <result name="CANCEL to A leg" link="36" stubbed="1" >bInviteAWithNewSDP == true

AND bGotFinalResponse == false

AND bALegHungUp == false</result>
            <result name="Forward to VM" link="17" stubbed="0" >bForwardedToVM == false

AND oAPI.bForwardToVoicemail == true

AND oCallLegA.bConnected == true</result>
            <result name="BYE to A leg" link="38" stubbed="1" >oCallLegA.bConnected == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="last" ><![CDATA[if ( 3 == Result.id ) {

	Session.oCallLegB.strRemoteUri = "sip:" + Session.oCallLegB.strOutdialDestNbr + "@" + Session.strNiuAddress;

	Session.oCallLegB.strRemoteUri += ";target=pcs_vmail_deposit";

	if( null != Session.g_oAPI.lVoiceMailId && 0 != Session.g_oAPI.lVoiceMailId ) {

		Session.oCallLegB.strRemoteUri += ";vmail_account_id=" ;

		Session.oCallLegB.strRemoteUri += Session.g_oAPI.lVoiceMailId ;

	}

	Session.oCallLegB.strRemoteUri += " SIP/2.0" ;

	Server.logInfo("Forwarding caller to voicemail");

	Session.bForwardedToVM = true;

}]]></script>
          </scripts>
        </action>
        <action id="63" plug-in="Standard.WaitEvent.1" ><?xtml-editor x=408 y=591 ?>
          <!--Wait for responses-->
          <wait xmlns="urn:www.pactolus.com:xtml:communication" timeout="nTimeout" recv-name="strEvent" >
            <msg name="Pactolus.EveSipResponse.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strAcceptLanguage</parameter>
              <parameter ></parameter>
              <parameter >strAllow</parameter>
              <parameter >strAllowEvents</parameter>
              <parameter >strCallId</parameter>
              <parameter ></parameter>
              <parameter >strContact</parameter>
              <parameter >strContent</parameter>
              <parameter >strContentDisposition</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strContentType</parameter>
              <parameter >strCSeq</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strFrom</parameter>
              <parameter >strInReplyTo</parameter>
              <parameter ></parameter>
              <parameter >strMinSE</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strProxyAuthenticate</parameter>
              <parameter >strRecordRoute</parameter>
              <parameter ></parameter>
              <parameter >strRequire</parameter>
              <parameter >strRetryAfter</parameter>
              <parameter >strRSeq</parameter>
              <parameter ></parameter>
              <parameter >strSessionExpires</parameter>
              <parameter >strStatus</parameter>
              <parameter >strSubscriptionState</parameter>
              <parameter >strSupported</parameter>
              <parameter >strTimestamp</parameter>
              <parameter >strTo</parameter>
              <parameter >strUnsupported</parameter>
              <parameter ></parameter>
              <parameter >strVia</parameter>
              <parameter ></parameter>
              <parameter >strWWWAuthenticate</parameter>
            </msg>
            <msg name="Pactolus.EveSipAck.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCallId</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strRoute</parameter>
              <parameter ></parameter>
              <parameter >strTo</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
            </msg>
            <msg name="Pactolus.EveSipBye.1" >
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strCallId</parameter>
              <parameter >strCSeq</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strFrom</parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter ></parameter>
              <parameter >strTo</parameter>
              <parameter ></parameter>
              <parameter >strVia</parameter>
            </msg>
          </wait>
          <results >
            <result name="Default" link="63" stubbed="1"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout" link="33" stubbed="1"/>
            <result name="ACK from A Leg" link="31" stubbed="0" >bGotAck == true

AND strCallId match oCallLegA.strCallId</result>
            <result name="final non-success " link="40" stubbed="0" >nFinalStatus &gt;= 400

AND bALegHungUp == false

AND nIdx &gt;= nContactLength</result>
            <result name="3xx Response from B Leg" link="27" stubbed="1" >bGotResponse == true

AND (nFinalStatus &gt;= 300

AND nFinalStatus &lt;= 399)

AND strCallId match oCallLegB.strCallId</result>
            <result name="Response with new sdp" link="56" stubbed="0" >bNewSdp == true

AND nFinalStatus &lt; 300</result>
            <result name="BYE from A Leg" link="21" stubbed="1" >bGotBye == true

AND bALegHungUp == true</result>
            <result name="final success, A Leg" link="29" stubbed="0" >nFinalStatus == 200

AND strCallId match oCallLegA.strCallId

AND bGotResponse == true</result>
            <result name="final success, B Leg" link="30" stubbed="0" >nFinalStatus == 200

AND strCallId match oCallLegB.strCallId

AND bGotResponse == true</result>
            <result name="RNA, forward to VM" link="33" stubbed="1" >'Result'  == 'Timeout'

AND oAPI.bForwardToVoicemail == true

AND bForwardedToVM == false</result>
            <result name="487 to Cancelled INVITE (sim ring)" link="58" stubbed="0" >b487 == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.enableEvents(true);

Server.logInfo("Setting timeout value to " + Session.nTimeout ) ;





]]></script>
            <script language="javascript" timing="middle" ><![CDATA[Session.bGotAck = Session.bGotResponse = Session.bNewSdp = Session.bGotCaleaNotify = Session.bGotBye = false;



if( 2 == Result.id ) { 

	if( -1 != Session.strEvent.indexOf( "SipAck" ) ) {

		Session.bGotAck = true ;

	}

	else if( -1 != Session.strEvent.indexOf( "SipResponse" ) ) {

				

		//chceck that this is from either the Caller or Transfer Target

		if( Session.strCallId == Session.oCallLegB.strCallId ||  

			Session.strCallId == Session.oCallLegA.strCallId ) {



			Session.bGotResponse = true ;

			

			var status = new SipStatus(Session.strStatus) ;

			Session.nFinalStatus = status.code ;



					

			//the rest of this script only applies to responses from the Transfer Target.

			if ( Session.strCallId == Session.oCallLegB.strCallId ) {

			

				/* update the timeout now that we have a response */

				if( Session.bALegHungUp ) {

					/* 	per RFC 3261: 

						If there is no final response for the original request in 64*T1 seconds 

						(T1 is defined in Section 17.1.1.1), the client SHOULD then consider the

						original transaction cancelled and SHOULD destroy the client

						transaction handling the original request.

					*/

					Session.nTimeout = 10 ;

				}

				else if ( Session.bForwardedToVM ) {

					Session.nTimeout = 120;	

				}

				else {

					Session.nTimeout = (0 == Session.oAPI.nRingNoAnswerTimeout ? 120 :  Session.oAPI.nRingNoAnswerTimeout ) ;

				}		

		

			

				/* save the via header on the response; this is the via we sent and we will need to use it 

				on either a CANCEL or an ACK to a non-success final response 

				*/

					if (0 == Session.strMyVia.length) {

					Session.strMyVia = Session.strVia ;

				}

			

				

				/* the To header may now have a tag, so update our stored value */

				if( Session.nFinalStatus >= 200 ) {

					Session.oCallLegB.strTo = Session.strTo ;

					Session.oCallLegB.strSIPStatus = Session.nFinalStatus;

					

					if ( 300 != Session.nFinalStatus ) {

						Session.nTimeout = 10;

					}

				}

				

				/* if we got the far end SDP save it */

				Session.strSdpToOfferBLeg = "" ;

				if( Session.strContent.length > 0 && Session.nFinalStatus < 300 ) {

			

					Server.logInfo("Received a response from B Leg with SDP: " + Session.strContent) ;

					Server.logInfo("Previous SDP from B Leg was: " + Session.oCallLegB.strRemoteSdp ) ;

					if( Session.oCallLegB.strRemoteSdp != Session.strContent ) {

						Server.logInfo("New SDP received from B") ;				

						Session.bNewSdp = true ;

					}

					else {

						Server.logInfo("B leg SDP is unchanged.") ;				

						Session.strSdpToOfferALeg = Session.strContent ;

					} 

					

					Session.oCallLegB.strRemoteSdp = Session.strContent ;

					Session.oCallLegB.strContentType = Session.strContentType ;

				}

				

				if( Session.strSessionExpires.length > 0 ) {

					Session.oCallLegB.nSessionTimer = Clib.atoi( Session.strSessionExpires ) ;

					if( -1 != Session.strSessionExpires.indexOf("uas") ) {

						Session.oCallLegB.bRefresher = false ;

					}

					else {

						Session.oCallLegB.bRefresher = true ;

					}

				}

			}

		}

		//call id does not match A leg or B leg. Check if it is from one of the cancelled Sim Ring routes.

		else {

			Session.nRouteIdx = js_search_callid(Session.oSimRingCallLegs, Session.strCallId) ;

			var status = new SipStatus(Session.strStatus);

			if( -1 == Session.nRouteIdx ) {

				Server.logError("Received response but call leg not found for callId: " + Session.strCallId ) ;

			}

			else if ( 487 == status.code ) {

				Server.logInfo("Received 487 final response to canceled simring INVITE") ;

				Session.b487 = true;

			}					

		}

	}

	

	else if( -1 != Session.strEvent.indexOf("SipBye") ) {

		

		/* 	GSX sometimes sends a BYE in response to an INVITE.

			That's not right, but handle it as a 503 final response.

		*/

		if ( Session.strCallId == Session.oCallLegB.strCallId ) {

			Session.nFinalStatus = 503 ;

			Session.bGotResponse = true ;

		}

		else if ( Session.strCallId == Session.oCallLegA.strCallId ) {

			Session.bALegHungUp = true;

			Session.oCallLegA.bConnected = false;

			Session.bGotBye = true;

		}

		

	}

	

	else {

		Server.logInfo("Discarding event: " + Session.strEvent ) ;

	}

}





	]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.enableEvents(false);



]]></script>
          </scripts>
        </action>
        <action id="64" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1210 y=1692 ?>
          <!--increment route-->
          <results >
            <result name="Default" link="47" stubbed="0"/>
            <result name="bForwardedToVoicemail" link="13" stubbed="0" >bForwardedToVM == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if (Session.bInternalTransfer) {

	Session.nRouteIdx++ ;

	Server.logInfo("Incrementing to route #" + Session.nRouteIdx ) ;

}

else {

	Server.logInfo("Incrementing to proxy #" + Session.nProxyId ) ;

	Session.nProxyId++;

}











]]></script>
          </scripts>
        </action>
        <action id="65" plug-in="Pactolus.Branch.1" ><?xtml-editor x=604 y=262 ?>
          <results >
            <result name="Default" link="11" stubbed="0"/>
            <result name="transfer to extension" link="60" stubbed="0" >bInternalTransfer == true</result>
            <result name="voice mail transfer" link="47" stubbed="0" >bVoicemailTransfer == true</result>
            <result name="bReturnToIvr" link="17" stubbed="1" >bReturnToIvr == true</result>
            <result name="forward to IVR" link="47" stubbed="0" >oAPI.strCallType == s_CT_IVR_MENU</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oProxyList[0] = Session.strPrimarySoftswitch;



if ( 0 < Session.strBackupSoftswitch.length ) {



	Session.oProxyList[1] = Session.strBackupSoftswitch;



}]]></script>
          </scripts>
        </action>
        <action id="66" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=1530 y=12 ?>
          <!--psAPIAuthorizeDestination-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;psAPIAuthorizeDestination&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >oAPI</parameter>
            <parameter >oRate</parameter>
            <parameter >oSub</parameter>
            <parameter >oCallLegB</parameter>
            <parameter >oCallLegA</parameter>
          </function>
          <results >
            <result name="Default" link="17" stubbed="1"/>
            <result name="destination restricted" link="67" stubbed="1" >nReturnCode == -3</result>
            <result name="insufficient digits" link="67" stubbed="1" >nReturnCode == -4</result>
            <result name="no destination given" link="67" stubbed="1" >nReturnCode == -5</result>
            <result name="time avail &lt; min threshold" link="67" stubbed="1" >nReturnCode == -6</result>
            <result name="no subrate - block call" link="67" stubbed="1" >nReturnCode == -7</result>
            <result name="dest not in phone list" link="67" stubbed="1" >nReturnCode == -8</result>
            <result name="success - unlimited time" >nReturnCode == 1</result>
            <result name="no rates" link="67" stubbed="1" >nReturnCode == -9</result>
            <result name="curr balance &lt; min balance" link="67" stubbed="1" >g_oAPI.fAccountBalance &lt; g_oAPI.fMinPrepaidBalance

AND nReturnCode == 0</result>
            <result name="-10 - rate &gt; balance" link="67" stubbed="1" >nReturnCode == -10</result>
            <result name="out of calling plan" link="67" stubbed="1" >nReturnCode == -11</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oAPI.strDestinationNumber = Session.oCallLegB.strOutdialDestNbr;

Server.logInfo("Rating destination number: " + Session.oAPI.strDestinationNumber ) ;

Server.logInfo("oAPI.strBroadbandCallingFlag: " + Session.oAPI.strBroadbandCallingFlag ) ;]]></script>
            <script language="javascript" timing="last" ><![CDATA[Server.logInfo("AuthDest returned: " + Result.name + "(" + Result.id + ")" ) ;

Server.logInfo("There are " + Session.oSub.nSecondsAvailable + " seconds for this call."); 



]]></script>
          </scripts>
        </action>
        <action id="67" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1727 y=179 ?>
          <!--increment route-->
          <results >
            <result name="Default" link="47" stubbed="0"/>
            <result name="bForwardedToVoicemail" link="13" stubbed="0" >bForwardedToVM == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if (Session.bInternalTransfer) {

	Session.nRouteIdx++ ;

}

else {

	Session.nProxyId++;

}











]]></script>
          </scripts>
        </action>
        <action id="68" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1292 y=58 ?>
          <results >
            <result name="Default" link="17" stubbed="1"/>
            <result name="rate this call" link="66" stubbed="0" >bRateCallAttempt == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bRateCallAttempt = false ;

if( Session.oAPI.bRateCalls && 

	(!Session.bForwardedToVM && Session.oAPI.strCallType != Session.s_CT_IVR_MENU ) ) {

		

	

	Session.bRateCallAttempt = true ;

	Server.logInfo("Rating this call to destination: " + Session.oCallLegB.strOutdialDestNbr + 

		" which is associated with subscriber id: " + Session.oSub.lSubscriberId ) ;

}

]]></script>
          </scripts>
        </action>
        <action id="69" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1220 y=1891 ?>
          <results >
            <result name="Default" link="64" stubbed="0"/>
            <result name="write cdr?" link="70" stubbed="0" >bRateCallAttempt == true</result>
          </results>
        </action>
        <action id="70" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=1451 y=1880 ?>
          <!--psAPIProcCallCompletion-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;psAPIProcCallCompletion&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >oAPI</parameter>
            <parameter >oSub</parameter>
            <parameter >oCallLegA</parameter>
            <parameter >oCallLegB</parameter>
            <parameter >oRate</parameter>
            <parameter >oDummy</parameter>
            <parameter >oDummy</parameter>
          </function>
          <results >
            <result name="Default" link="64" stubbed="0"/>
          </results>
        </action>
        <action id="71" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=1939 y=1381 ?>
          <!--psAPIProcCallCompletion-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;psAPIProcCallCompletion&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >oAPI</parameter>
            <parameter >oSub</parameter>
            <parameter >oCallLegA</parameter>
            <parameter >oCallLegB</parameter>
            <parameter >oRate</parameter>
            <parameter >oDummy</parameter>
            <parameter >oDummy</parameter>
          </function>
          <results >
            <result name="Default" link="49" stubbed="0"/>
          </results>
        </action>
        <action id="72" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1708 y=1392 ?>
          <results >
            <result name="Default" link="49" stubbed="0"/>
            <result name="write cdr?" link="71" stubbed="0" >bRateCallAttempt == true</result>
          </results>
        </action>
        <action id="73" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=2022 y=716 ?>
          <!--psAPIProcCallCompletion-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;psAPIProcCallCompletion&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >oAPI</parameter>
            <parameter >oSub</parameter>
            <parameter >oCallLegA</parameter>
            <parameter >oCallLegB</parameter>
            <parameter >oRate</parameter>
            <parameter >oDummy</parameter>
            <parameter >oDummy</parameter>
          </function>
          <results >
            <result name="Default" link="26" stubbed="0"/>
          </results>
        </action>
        <action id="74" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1791 y=727 ?>
          <results >
            <result name="Default" link="26" stubbed="0"/>
            <result name="write cdr?" link="73" stubbed="0" >bRateCallAttempt == true</result>
          </results>
        </action>
        <action id="75" plug-in="Pactolus.Branch.1" ><?xtml-editor x=1804 y=468 ?>
          <results >
            <result name="Default" link="56" stubbed="0"/>
            <result name="rate call?" link="76" stubbed="0" >bRateCallAttempt == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.bRateCallAttempt = false ;



/* only rate PSTN destinations, if this product offering is doing rating */

Server.logInfo("Simultaneous ring connected to: " + Session.oCallLegB.strOutdialDestNbrNoRouteCode ) ;

if( Session.oAPI.bRateCalls && Session.oCallLegB.strOutdialDestNbrNoRouteCode.length > 0 ) {

	

	Server.logInfo("Simultaneous ring call was completed to a PSTN destination, we need to rate this call") ;

	Session.oCallLegB.strDestRouteType = Session.s_OFF_NET ;

	Session.bRateCallAttempt = true ;

}]]></script>
          </scripts>
        </action>
        <action id="76" plug-in="Standard.FunctionCall.1" ><?xtml-editor x=2087 y=428 ?>
          <!--psAPIAuthorizeDestination-->
          <function xmlns="urn:www.pactolus.com:xtml:application" name="&quot;psAPIAuthorizeDestination&quot;" return="nReturnCode" external-function="1" library="lib_APISce.xml" >
            <parameter >oAPI</parameter>
            <parameter >oRate</parameter>
            <parameter >oSub</parameter>
            <parameter >oCallLegB</parameter>
            <parameter >oCallLegA</parameter>
          </function>
          <results >
            <result name="Default" link="56" stubbed="1"/>
            <result name="destination restricted" link="62" stubbed="1" >nReturnCode == -3</result>
            <result name="insufficient digits" link="62" stubbed="1" >nReturnCode == -4</result>
            <result name="no destination given" link="62" stubbed="1" >nReturnCode == -5</result>
            <result name="time avail &lt; min threshold" link="62" stubbed="1" >nReturnCode == -6</result>
            <result name="no subrate - block call" link="62" stubbed="1" >nReturnCode == -7</result>
            <result name="dest not in phone list" >nReturnCode == -8</result>
            <result name="success - unlimited time" >nReturnCode == 1</result>
            <result name="no rates" link="62" stubbed="1" >nReturnCode == -9</result>
            <result name="curr balance &lt; min balance" link="62" stubbed="1" >g_oAPI.fAccountBalance &lt; g_oAPI.fMinPrepaidBalance

AND nReturnCode == 0</result>
            <result name="-10 - rate &gt; balance" link="62" stubbed="1" >nReturnCode == -10</result>
            <result name="out of calling plan" link="62" stubbed="1" >nReturnCode == -11</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oAPI.strDestinationNumber = Session.oCallLegB.strOutdialDestNbrNoRouteCode;



]]></script>
            <script language="javascript" timing="last" ><![CDATA[//set the single max call timer, we'll use for both prepaid and postpaid

Server.logInfo("nSecondsAvailable: " + Session.oSub.nSecondsAvailable);

Server.logInfo("Service Max Call Duration: " + Session.oService.nMaxCallDuration );



if( Session.oSub.nSecondsAvailable > 0 &&  

	(Session.oService.nMaxCallDuration > 0 && 

	Session.oSub.nSecondsAvailable > Session.oService.nMaxCallDuration) ||

	(0 == Session.oSub.nSecondsAvailable && Session.oService.nMaxCallDuration > 0 ) ) {

	

	Session.oSub.nSecondsAvailable = Session.oService.nMaxCallDuration ;

}

Server.logInfo("There are " + Session.oSub.nSecondsAvailable + " seconds for this call."); 



]]></script>
          </scripts>
        </action>
        <action id="77" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=1069 y=54 ?>
          <!--false-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="bFalse"/>
        </action>
      </actions>
      <text-objects >
        <text-object x-coord="19" y-coord="12" width="635" height="168" text="Caller has been passed back from the IVR to the initial app (voip_terminate or voip_originate) and now needs to be connected to the target phone. This can be either an internal extension or an external phone number. The IVR call leg has exited, so the transfer target is treated as a new B leg.

(1) Connect caller to media server and begin playing ringback. 

(2) fetch outdial information for new B leg

(3) Invite transfer target

(4) upon receipt of response with sdp, Invite caller 

" font-name="Times New Roman" size="-16" red="0" green="0" blue="0" weight="0" underline="0" strikeout="0" point-size="12" italic="0"/>
      </text-objects>
    </function>
    <function name="generateAuthorization" start="1" event="" returns="i4" >
      <parameters >
        <parameter name="oSipMsg" type="object" pass="byref"/>
        <parameter name="strRealm" type="string" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="nReturnValue" type="i4" >-50</var>
        <var name="bHasAni" type="boolean" >0</var>
        <var name="strSessionId" type="string" ></var>
        <var name="strNonce" type="string" ></var>
        <var name="strUri" type="string" ></var>
        <var name="strUserName" type="string" ></var>
        <var name="strPassword" type="string" ></var>
        <var name="strMethod" type="string" ></var>
        <var name="strResponse" type="string" ></var>
      </local-vars>
      <actions >
        <action id="1" plug-in="Pactolus.Branch.1" ><?xtml-editor x=42 y=88 ?>
          <results >
            <result name="Default" link="3" stubbed="1"/>
            <result name="bHasAni" link="2" stubbed="0" >bHasAni == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[var from = new SipFrom(Session.oSipMsg.strFrom.toString());

if ( 0 < from.url.phoneNumber.length) {

	Session.strPassword = Session.strUserName = from.url.phoneNumber;

	Session.bHasAni = true;

}

else {

	Server.logError("No phone number in the FROM header. Cannot generate Authorization header for this request.");

	Session.nReturnValue = -1;

	return;

}



Session.strSessionId = Session._sessionId;



var uri = new SipRequestUri(Session.oSipMsg.strRequestUri.toString());

Session.strUri = "sip:";

Session.strUri += uri.url.host;



var method = new SipCSeq(Session.oSipMsg.strCSeq.toString());

Session.strMethod = method.method;







]]></script>
          </scripts>
        </action>
        <action id="2" plug-in="Pactolus.UserFunction.1" ><?xtml-editor x=324 y=71 ?>
          <!--Generate a nonce value-->
          <user-function xmlns="urn:www.pactolus.com:xtml:application" process="&quot;PACTOLUS_ps_c_adaptor&quot;" function="&quot;generate_nonce&quot;" timeout="3" return="" async="0" >
            <parameter >strSessionId</parameter>
            <parameter >strNonce</parameter>
          </user-function>
          <results >
            <result name="Default" link="3" stubbed="1"/>
            <result name="Success" link="5" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="3" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=404 y=324 ?>
          <!--failed-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="nReturnValue"/>
        </action>
        <action id="4" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=891 y=105 ?>
          <!--success-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="0"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if ( "REGISTER" == Session.strMethod ) {

	Session.oSipMsg.strAuthorization = "Digest " ;

	Session.oSipMsg.strAuthorization += "username=\"";

	Session.oSipMsg.strAuthorization += Session.strUserName;

	Session.oSipMsg.strAuthorization += "\",realm=\"";

	Session.oSipMsg.strAuthorization += Session.strRealm;

	Session.oSipMsg.strAuthorization += "\",nonce=\"";

	Session.oSipMsg.strAuthorization += Session.strNonce;

	Session.oSipMsg.strAuthorization += "\",uri=\"";

	Session.oSipMsg.strAuthorization += Session.strUri;

	Session.oSipMsg.strAuthorization += "\",response=\"";

	Session.oSipMsg.strAuthorization += Session.strResponse;

	Session.oSipMsg.strAuthorization += "\"";

	

	Server.logInfo("Generated Authorization header: " + Session.oSipMsg.strAuthorization);

}

else {

	Session.oSipMsg.strProxyAuthorization = "Digest " ;

	Session.oSipMsg.strProxyAuthorization += "username=\"";

	Session.oSipMsg.strProxyAuthorization += Session.strUserName;

	Session.oSipMsg.strProxyAuthorization += "\",realm=\"";

	Session.oSipMsg.strProxyAuthorization += Session.strRealm;

	Session.oSipMsg.strProxyAuthorization += "\",nonce=\"";

	Session.oSipMsg.strProxyAuthorization += Session.strNonce;

	Session.oSipMsg.strProxyAuthorization += "\",uri=\"";

	Session.oSipMsg.strProxyAuthorization += Session.strUri;

	Session.oSipMsg.strProxyAuthorization += "\",response=\"";

	Session.oSipMsg.strProxyAuthorization += Session.strResponse;

	Session.oSipMsg.strProxyAuthorization += "\"";

	

	Server.logInfo("Generated ProxyAuthorization header: " + Session.oSipMsg.strProxyAuthorization);

}



]]></script>
          </scripts>
        </action>
        <action id="5" plug-in="Pactolus.JavaStaticMethod.1" ><?xtml-editor x=617 y=65 ?>
          <!--calculateAuthorizationResponse-->
          <java xmlns="urn:www.pactolus.com:xtml:application" class="&quot;com.pactolus.broadband.psAPISceBroadbandAuth&quot;" method="&quot;calculateAuthorizationResponse&quot;" timeout="5" return="nReturnValue" method-return-var="" method-return-type="0" >
            <parameter type="in" var-type="string" >strSessionId</parameter>
            <parameter type="in" var-type="string" >strUri</parameter>
            <parameter type="in" var-type="string" >strRealm</parameter>
            <parameter type="in" var-type="string" >strUserName</parameter>
            <parameter type="in" var-type="string" >strPassword</parameter>
            <parameter type="in" var-type="string" >strMethod</parameter>
            <parameter type="in" var-type="string" >strNonce</parameter>
            <parameter type="inout" var-type="string" >strResponse</parameter>
          </java>
          <results >
            <result name="Default" link="3" stubbed="1"/>
            <result name="Success" link="4" stubbed="1"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
      </actions>
    </function>
    <function name="bbtel_moh" start="28" event="" returns="i4" >
      <parameters >
        <parameter name="oCallLeg" type="object" pass="byref"/>
        <parameter name="oMS" type="object" pass="byref"/>
        <parameter name="oAPI" type="object" pass="byref"/>
        <parameter name="strLanguage" type="string" pass="byref"/>
        <parameter name="nTimerId" type="i4" pass="byref"/>
        <parameter name="nInterruptPlays" type="i4" pass="byref"/>
        <parameter name="bPlayInterrupt" type="boolean" pass="byref"/>
      </parameters>
      <local-vars >
        <var name="strTo" type="string" ></var>
        <var name="strFrom" type="string" ></var>
        <var name="nReturnValue" type="i4" >0</var>
        <var name="nFailure" type="i4" >-99</var>
        <var name="bConnected" type="boolean" >0</var>
        <var name="strMailbox" type="string" >MOH</var>
        <var name="nUnseen" type="i4" >0</var>
        <var name="nSaved" type="i4" >0</var>
        <var name="oUnseen" type="object" ></var>
        <var name="oSaved" type="object" ></var>
        <var name="strQuery" type="string" ></var>
        <var name="oMessageIds" type="object" ></var>
        <var name="bHasInterrupt" type="boolean" >0</var>
        <var name="oInterrupt" type="object" ></var>
        <var name="oMOH" type="object" ></var>
        <var name="nPlayedLength" type="i4" >0</var>
        <var name="nMOHTimeout" type="i4" >3600</var>
        <var name="nPlayOffset" type="i4" >0</var>
        <var name="nInterruptPlays" type="i4" >0</var>
        <var name="nFunctionReturn" type="i4" >0</var>
        <var name="nConnectTimeout" type="i4" >5</var>
        <var name="nTimeout" type="i4" >5</var>
        <var name="strDefaultMoHPrompt" type="string" >/export/home/pcs/pactolus_app_server/media/local/default_music_on_hold.wav</var>
      </local-vars>
      <actions >
        <action id="28" plug-in="Pactolus.Branch.1" ><?xtml-editor x=20 y=183 ?>
          <results >
            <result name="Default" link="29" stubbed="0"/>
            <result name="bPlayInterrupt" link="34" stubbed="0" >bPlayInterrupt == true</result>
          </results>
        </action>
        <action id="29" plug-in="Pactolus.MSConnect.1" ><?xtml-editor x=236 y=29 ?>
          <!--outdial to B-->
          <cc-connect xmlns="urn:www.pactolus.com:xtml:sip-cc" call-id="oCallLeg.strCallId" caller-sdp="oCallLeg.strRemoteSdp" capability="1" inbound="0" returns="nReturnValue" timeout="nConnectTimeout" endpoint="oMS.strEndPoint" connection-id="oMS.strConnectionId" ms-sdp="oMS.strContent" to="strTo" from="strFrom" cseq="oCallLeg.strCSeq" via="" mgcp-call-id="oMS.strCallId" ingress-gateway="oCallLeg.strRemoteUri" packetization-period="oMS.nPacketizationPeriod" early-media="0" early-media-only="0" codec="-1" ms-type="oMS.strType" telephone-events="0" route="oCallLeg.strRoute" record-route="oCallLeg.strRecordRoute" contact="oCallLeg.strContact" session-expires="oCallLeg.strSessionExpires" min-se="" supported="oCallLeg.strSupported" use-session-timer="0" min-supported-session-timer="" refresher=""/>
          <results >
            <result name="Default" link="33" stubbed="0"/>
            <result name="Success" link="31" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
            <result name="Resource Unavailable"/>
            <result name="Caller Hung up"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if ( !Session.oCallLeg.bUac ) {
	Session.strTo = Session.oCallLeg.strFrom;
	Session.strFrom = Session.oCallLeg.strTo;
}
else {
	Session.strTo = Session.oCallLeg.strTo;
	Session.strFrom = Session.oCallLeg.strFrom;
}
Session.oCallLeg.bAttemptedToOutdial = true; 
Session.oCallLeg.bCurrentlyDialing = true ;	
Server.logInfo("bbtel_moh Connecting party to Mediaserver for Music On Hold");]]></script>
            <script language="javascript" timing="last" ><![CDATA[if ( 2 != Result.id ) {
	Server.logError("Error Connecting Party to Music On Hold");
}
Session.oCallLeg.bAttemptedToOutdial = true; 
Session.oCallLeg.bCurrentlyDialing = false ;]]></script>
          </scripts>
        </action>
        <action id="30" plug-in="Pactolus.ReadMail.1" ><?xtml-editor x=659 y=127 ?>
          <!--get MOH recording-->
          <imap-read xmlns="urn:www.pactolus.com:xtml:imap" username="oAPI.strRecordingAcctUser" password="oAPI.strRecordingAcctPassword" mailbox="strMailbox" msg-uid="oMOH[0]" to="" from="" cc="" subject="oMOH[0].strSubject" body="" attachment1="oMOH[0].strRecording" attachment2="" attachment3="" timeout="nTimeout" returns="nReturnValue" timestamp=""/>
          <results >
            <result name="Default" link="41" stubbed="0"/>
            <result name="Success" link="39" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="31" plug-in="Pactolus.MailboxSearch.1" ><?xtml-editor x=450 y=134 ?>
          <search-mailbox xmlns="urn:www.pactolus.com:xtml:imap" username="oAPI.strRecordingAcctUser" password="oAPI.strRecordingAcctPassword" mailbox="strMailbox" query-string="strQuery" search-result="oMOH" timeout="nTimeout" returns="nReturnValue"/>
          <results >
            <result name="Default" link="41" stubbed="0"/>
            <result name="Success" link="30" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.strQuery = "SUBJECT \"MOH_RECORDING\"" ;
Session.oMessageIds.length = 0;]]></script>
          </scripts>
        </action>
        <action id="32" plug-in="Pactolus.ReadMail.1" ><?xtml-editor x=453 y=282 ?>
          <!--get Interrupt recording-->
          <imap-read xmlns="urn:www.pactolus.com:xtml:imap" username="oAPI.strRecordingAcctUser" password="oAPI.strRecordingAcctPassword" mailbox="strMailbox" msg-uid="oInterrupt[0]" to="" from="" cc="" subject="oInterrupt[0].strSubject" body="" attachment1="oInterrupt[0].strRecording" attachment2="" attachment3="" timeout="nTimeout" returns="nReturnValue" timestamp=""/>
          <results >
            <result name="Default" link="40" stubbed="0"/>
            <result name="Success" link="38" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oInterrupt[0].strRecording = "";]]></script>
            <script language="javascript" timing="last" ><![CDATA[if ( 0 == Session.oInterrupt[0].strRecording.length ) {
	Session.bHasInterrupt = false;
}

]]></script>
          </scripts>
        </action>
        <action id="33" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=863 y=20 ?>
          <!--failed to connect-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="-99"/>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Server.logError("bbtel_moh: failed to connect caller to mediaserver. Returning error -99");
]]></script>
          </scripts>
        </action>
        <action id="34" plug-in="Pactolus.MailboxSearch.1" ><?xtml-editor x=238 y=267 ?>
          <search-mailbox xmlns="urn:www.pactolus.com:xtml:imap" username="oAPI.strRecordingAcctUser" password="oAPI.strRecordingAcctPassword" mailbox="strMailbox" query-string="strQuery" search-result="oInterrupt" timeout="nTimeout" returns="nReturnValue"/>
          <results >
            <result name="Default" link="40" stubbed="0"/>
            <result name="Success" link="32" stubbed="0"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.strQuery = "SUBJECT \"MOH_INTERRUPT\"" ;
Session.oMessageIds.length = 0;]]></script>
            <script language="javascript" timing="last" ><![CDATA[if ( 2 != Result.id ) {
	Session.bHasInterrupt = false;
	Server.logError("Error finding Interrupt recording");
}]]></script>
          </scripts>
        </action>
        <action id="35" plug-in="Standard.FunctionReturn.1" ><?xtml-editor x=727 y=630 ?>
          <!--success - no error-->
          <return xmlns="urn:www.pactolus.com:xtml:application" value="nFunctionReturn"/>
        </action>
        <action id="36" plug-in="Standard.Timer.1" ><?xtml-editor x=711 y=490 ?>
          <timer xmlns="urn:www.pactolus.com:xtml:application" start="1" id="nTimerId" duration="oAPI.nMOHInterruptInterval"/>
          <results >
            <result name="Default" link="35" stubbed="0"/>
          </results>
        </action>
        <action id="37" plug-in="Pactolus.Branch.1" ><?xtml-editor x=478 y=559 ?>
          <results >
            <result name="Default" link="35" stubbed="0"/>
            <result name="bHasInterrupt" link="36" stubbed="0" >bHasInterrupt == true</result>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[if ( 0 < Session.oAPI.strMOHInterruptRecording.length ) {
	Session.bHasInterrupt = true;
}
]]></script>
          </scripts>
        </action>
        <action id="38" plug-in="Pactolus.MGCPPlay.1" ><?xtml-editor x=677 y=280 ?>
          <!--play interrupt message-->
          <play xmlns="urn:www.pactolus.com:xtml:media" connection-id="oMS.strConnectionId" endpoint="oMS.strEndPoint" callid="oMS.strCallId" repeat="1" timeout="3600" ms-type="oMS.strType" returns="nReturnValue" start-play="1" interrupt="0" return-immediate="0" digit-map="" language="strLanguage" digits="" retry-count="1" clear-digits="1" terminating-digit="" quick-collect="0" digit-timer="" >
            <audio type="silence" >.5</audio>
            <audio type="url" >oInterrupt[0].strRecording</audio>
            <audio type="silence" >.5</audio>
          </play>
          <results >
            <result name="Default" link="40" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
          </results>
        </action>
        <action id="39" plug-in="Pactolus.CollectPlay.1" ><?xtml-editor x=255 y=507 ?>
          <!--play continous moh-->
          <collect-play xmlns="urn:www.pactolus.com:xtml:media" endpoint="oMS.strEndPoint" connection-id="oMS.strConnectionId" timeout="oAPI.nMOHInterruptInterval" ms-type="oMS.strType" played-length="" digits="" terminating-char="" rc="" returns="" play-offset="nPlayOffset" language="strLanguage" retry-count="-1" time-to-play="" interrupt="0" repeat="1" clear-digits="0" digit-map="" fdt="" idt="" ict="" terminating-digit="" >
            <audio type="silence" >.5</audio>
            <audio type="url" >oMOH[0].strRecording</audio>
            <audio type="silence" >.5</audio>
          </collect-play>
          <results >
            <result name="Default" link="37" stubbed="0"/>
            <result name="Success"/>
            <result name="Error"/>
            <result name="Timeout"/>
            <result name="No/Impossible Match"/>
            <result name="First/Inter Digit Timeout"/>
          </results>
        </action>
        <action id="40" plug-in="Pactolus.Branch.1" ><?xtml-editor x=902 y=279 ?>
          <!--set play offset-->
          <results >
            <result name="Default" link="31" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.nPlayOffset = (Session.oAPI.nMOHInterruptInterval * Session.nInterruptPlays) + 5;
Server.logInfo("Setting nPlayOffset to: " + Session.nPlayOffset);]]></script>
          </scripts>
        </action>
        <action id="41" plug-in="Pactolus.Branch.1" ><?xtml-editor x=891 y=92 ?>
          <!--Music On Hold Prompt Not Found. Use Default Instead-->
          <results >
            <result name="Default" link="39" stubbed="0"/>
          </results>
          <scripts >
            <script language="javascript" timing="first" ><![CDATA[Session.oMOH[0].strRecording = Session.strDefaultMoHPrompt;]]></script>
          </scripts>
        </action>
      </actions>
    </function>
  </functions>
  <script language="javascript" ><![CDATA[#include <javascript_utils.jsh>

#include <dialing_plan_utils.jsh>



function create_sip_callid( i )

{

	var curtime = new Date;

	var NewCallId = curtime.getTime().toString() + "_" + i ;

	

	/* Session id is formatted like this: x.y.app.z@ip-address */

	var sid = new String( Session._sessionId );

	var s ;

	if( null == (s = Clib.strtok( sid.toString(), "." ) ) ) {

		return NewCallId ;

	}

	NewCallId += s ;

	

	if( null == (s = Clib.strtok( null, "." ) ) ) {

		return NewCallId ;

	}

	NewCallId += s ;



	var appname = Clib.strtok( null, "." ) ;

	if( null == (s = Clib.strtok( null, " " ) ) ) {

		return NewCallId ;

	}

	NewCallId += s ;

	return NewCallId ;

}



function copy_call_leg( &from, &to )

{

	to.strFrom = from.strFrom ;

	to.strTo = from.strTo ;

	to.strCallId = from.strCallId ;

	to.strCSeq = from.strCSeq ;

	to.strRemoteSdp = from.strRemoteSdp ;

	to.strContentType = from.strContentType ;

	to.strOriginalTo = from.strOriginalTo ;

	to.strOriginalVia = from.strOrignalVia ;

	to.strRecordRoute = from.strRecordRoute ;

	to.strRemoteUri = from.strRemoteUri ;

	to.strRoute = from.strRoute ;

	to.strRequestUri = from.strRequestUri ;

	to.bGotResponse = from.bGotResponse ;

	to.bComplete = from.bComplete ;

	to.strOutdialDestNbr = from.strOutdialDestNbr;

	to.strOutdialDestNbrNoRouteCode = from.strOutdialDestNbrNoRouteCode ;

}



function remove_call_leg( &inArray, idx )

{

	if( idx >= inArray.length ) {

		Server.logError("remove_call_leg: OutOfBoundsError attempting to remove idx " + idx + " from array of size " + inArray.length ) ;

		return inArray.length ;

	}

	

	for( var i = idx; i < inArray.length - 1; i++ ) {

		copy_call_leg( inArray[i+1], inArray[i] ) ;

	}

	return --inArray.length ;

}



function parseContacts( contacts )

{

	var contact_array = contacts.split(",") ;

	for( var i = 0; i < contact_array.length; i++ ) {

		var s = new String(contact_array[i]) ;

		var pos ;

		if( 0 == s.indexOf("<") ) {

			pos = s.indexOf(">") ;

			contact_array[i] = s.slice(1, pos ) ;

		}

		else {

			pos = s.indexOf(";") ;

			if( -1 != pos ) {

				contact_array[i] = s.slice(0, pos) ;

			}

			else {

				contact_array[i] = s ;

			}

		}

	}

	return contact_array ;

}

]]></script>
  <properties >
    <property key="default" value="C:/pactolus_app_server/prompts/pcs_english.vox"/>
    <property key="disable-logging" value="0"/>
    <property key="js-include-path" value="../libs"/>
    <property key="library-modules" value="lib_APISce.xml;lib_callcontrol.xml;lib_mediaserver.xml"/>
    <property key="library-path" value="../libs"/>
  </properties>
  <application-version >
    <revision >$Id: lib_voip.xml,v 1.245.2.4 2010/03/18 09:29:41 jgibson Exp $</revision>
  </application-version>
  <label >$Name: PCS-A-4-1-1-1-4-c6 $</label>
</xtml>